
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 6d3cc05bd3..c7c544d5a7 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -470,60 +470,65 @@ def _print_Integral(self, integral):
         pform.binding = prettyForm.MUL
         return pform
 
-    def _print_Product(self, expr):
-        func = expr.term
-        pretty_func = self._print(func)
+def _print_Product(self, expr):
+    from sympy.printing.pretty.stringpict import stringPict
+    from sympy.printing.pretty.pretty_symbology import xobj
+    from sympy.printing.pretty.pretty_form import prettyForm
+    from sympy.core.relational import Equality
 
-        horizontal_chr = xobj('_', 1)
-        corner_chr = xobj('_', 1)
-        vertical_chr = xobj('|', 1)
+    func = expr.term
+    pretty_func = self._print(func)
 
-        if self._use_unicode:
-            # use unicode corners
-            horizontal_chr = xobj('-', 1)
-            corner_chr = u'\N{BOX DRAWINGS LIGHT DOWN AND HORIZONTAL}'
+    horizontal_chr = xobj('_', 1)
+    corner_chr = xobj('_', 1)
+    vertical_chr = xobj('|', 1)
 
-        func_height = pretty_func.height()
+    if self._use_unicode:
+        # use unicode corners
+        horizontal_chr = xobj('-', 1)
+        corner_chr = u'\N{BOX DRAWINGS LIGHT DOWN AND HORIZONTAL}'
 
-        first = True
-        max_upper = 0
-        sign_height = 0
+    func_height = pretty_func.height()
 
-        for lim in expr.limits:
-            width = (func_height + 2) * 5 // 3 - 2
-            sign_lines = []
-            sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)
-            for i in range(func_height + 1):
-                sign_lines.append(vertical_chr + (' '*width) + vertical_chr)
+    first = True
+    max_upper = 0
+    sign_height = 0
 
-            pretty_sign = stringPict('')
-            pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))
+    for lim in expr.limits:
+        width = (func_height + 2) * 3 // 3 - 2  # Adjust width
+        sign_lines = []
+        sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)
+        for i in range(func_height):
+            sign_lines.append(vertical_chr + (' '*width) + vertical_chr)  # Remove empty line
 
-            pretty_upper = self._print(lim[2])
-            pretty_lower = self._print(Equality(lim[0], lim[1]))
+        pretty_sign = stringPict('')
+        pretty_sign = prettyForm(*pretty_sign.stack(*sign_lines))
 
-            max_upper = max(max_upper, pretty_upper.height())
+        pretty_upper = self._print(lim[2])
+        pretty_lower = self._print(Equality(lim[0], lim[1]))
 
-            if first:
-                sign_height = pretty_sign.height()
+        max_upper = max(max_upper, pretty_upper.height())
 
-            pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))
-            pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))
+        if first:
+            sign_height = pretty_sign.height()
 
-            if first:
-                pretty_func.baseline = 0
-                first = False
+        pretty_sign = prettyForm(*pretty_sign.above(pretty_upper))
+        pretty_sign = prettyForm(*pretty_sign.below(pretty_lower))
+
+        if first:
+            pretty_func.baseline = 0
+            first = False
 
-            height = pretty_sign.height()
-            padding = stringPict('')
-            padding = prettyForm(*padding.stack(*[' ']*(height - 1)))
-            pretty_sign = prettyForm(*pretty_sign.right(padding))
+        height = pretty_sign.height()
+        padding = stringPict('')
+        padding = prettyForm(*padding.stack(*[' ']*(height - 1)))
+        pretty_sign = prettyForm(*pretty_sign.right(padding))
 
-            pretty_func = prettyForm(*pretty_sign.right(pretty_func))
+        pretty_func = prettyForm(*pretty_sign.right(pretty_func))
 
-        pretty_func.baseline = max_upper + sign_height//2
-        pretty_func.binding = prettyForm.MUL
-        return pretty_func
+    pretty_func.baseline = max_upper + sign_height//2
+    pretty_func.binding = prettyForm.MUL
+    return pretty_func
 
     def _print_Sum(self, expr):
         ascii_mode = not self._use_unicode
