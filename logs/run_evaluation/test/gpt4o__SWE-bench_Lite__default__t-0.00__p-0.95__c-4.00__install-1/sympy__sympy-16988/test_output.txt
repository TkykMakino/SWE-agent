+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/sets/sets.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit e727339af6dc22321b00f52d971cda39e4ce89fb
Merge: 6dd3966100 3c5b991bea
Author: Francesco Bonazzi <franz.bonazzi@gmail.com>
Date:   Fri Jun 7 09:45:12 2019 +0200

    Merge pull request #16969 from kangzhiq/Added_functions_to_AC
    
    Added functions to ArrayComprehension

+ git diff e727339af6dc22321b00f52d971cda39e4ce89fb
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 03cf57a30b..9190d3e628 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1256,22 +1256,54 @@ def identity(self):
     def zero(self):
         return S.EmptySet
 
-    def __new__(cls, *args, **kwargs):
-        evaluate = kwargs.get('evaluate', global_evaluate[0])
-
-        # flatten inputs to merge intersections and iterables
-        args = _sympify(args)
-
-        # Reduce sets using known rules
-        if evaluate:
-            args = list(cls._new_args_filter(args))
-            return simplify_intersection(args)
-
-        args = list(ordered(args, Set._infimum_key))
-
-        obj = Basic.__new__(cls, *args)
-        obj._argset = frozenset(args)
-        return obj
+def __new__(cls, *args, **kwargs):
+    from sympy.core.compatibility import ordered
+    from sympy.core.sympify import _sympify
+    from sympy.sets.sets import Set, simplify_intersection
+    from sympy.core.singleton import S
+    from sympy.core.basic import Basic
+    from sympy.core.evaluate import global_evaluate
+
+    evaluate = kwargs.get('evaluate', global_evaluate[0])
+
+    # flatten inputs to merge intersections and iterables
+    args = _sympify(args)
+
+    # Remove duplicates while maintaining order
+    seen = set()
+    args = [x for x in args if not (x in seen or seen.add(x))]
+
+    # Reduce sets using known rules
+    if evaluate:
+        args = list(cls._new_args_filter(args))
+        return simplify_intersection(args)
+
+    args = list(ordered(args, Set._infimum_key))
+
+    obj = Basic.__new__(cls, *args)
+    obj._argset = frozenset(args)
+    return obj
+
+    # Reduce sets using known rules
+    if evaluate:
+        args = list(cls._new_args_filter(args))
+        return simplify_intersection(args)
+
+    args = list(ordered(args, Set._infimum_key))
+
+    obj = Basic.__new__(cls, *args)
+    obj._argset = frozenset(args)
+    return obj
+    # Reduce sets using known rules
+    if evaluate:
+        args = list(cls._new_args_filter(args))
+        return simplify_intersection(args)
+
+    args = list(ordered(args, Set._infimum_key))
+
+    obj = Basic.__new__(cls, *args)
+    obj._argset = frozenset(args)
+    return obj
 
     @property
     @cacheit
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.5.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.5.dev0
    Uninstalling sympy-1.5.dev0:
      Successfully uninstalled sympy-1.5.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.5.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout e727339af6dc22321b00f52d971cda39e4ce89fb sympy/sets/tests/test_sets.py
Updated 0 paths from 3be1a44635
+ git apply -v -
Checking patch sympy/sets/tests/test_sets.py...
Applied patch sympy/sets/tests/test_sets.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/sets/tests/test_sets.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        25411020
hash randomization: on (PYTHONHASHSEED=3715941521)

sympy/sets/tests/test_sets.py[78] 
test_imageset F
test_interval_arguments ok
test_interval_symbolic_end_points ok
test_union F
test_union_iter ok
test_difference F
test_Complement F
test_complement F
test_intersect1 F
test_intersection F
test_issue_9623 F
test_is_disjoint F
test_ProductSet_of_single_arg_is_arg ok
test_interval_subs ok
test_interval_to_mpi ok
test_measure E
test_is_subset F
test_is_proper_subset F
test_is_superset F
test_is_proper_superset F
test_contains E
test_interval_symbolic ok
test_union_contains ok
test_is_number ok
test_Interval_is_left_unbounded ok
test_Interval_is_right_unbounded ok
test_Interval_as_relational ok
test_Finite_as_relational ok
test_Union_as_relational ok
test_Intersection_as_relational E
test_EmptySet F
test_finite_basic F
test_powerset ok
test_product_basic F
test_real F
test_supinf ok
test_universalset F
test_Union_of_ProductSets_shares ok
test_Interval_free_symbols ok
test_image_interval F
test_image_piecewise E
test_image_Intersection f
test_image_FiniteSet ok
test_image_Union E
test_image_EmptySet ok
test_issue_5724_7680 ok
test_boundary ok
test_boundary_Union F
test_union_boundary_of_joining_sets f
test_boundary_ProductSet F
test_boundary_ProductSet_line ok
test_is_open F
test_is_closed F
test_closure ok
test_interior F
test_issue_7841 ok
test_Eq ok
test_SymmetricDifference ok
test_issue_9536 ok
test_issue_9637 F
test_issue_9808 X
test_issue_9956 ok
test_issue_Symbol_inter F
test_issue_11827 ok
test_issue_10113 F
test_issue_10248 E
test_issue_9447 F
test_issue_10337 ok
test_issue_10326 ok
test_issue_2799 ok
test_issue_9706 ok
test_issue_8257 ok
test_issue_10931 F
test_issue_11174 ok
test_finite_set_intersection F
test_union_intersection_constructor E
test_Union_contains ok
test_issue_16878b f                                                       [FAIL]


________________________________ xpassed tests _________________________________
sympy/sets/tests/test_sets.py: test_issue_9808

________________________________________________________________________________
__________________ sympy/sets/tests/test_sets.py:test_measure __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 389, in test_measure
    assert Union(Interval(1, 2), Interval(3, 4)).measure == 2
  File "/testbed/sympy/sets/sets.py", line 468, in measure
    return self._measure
  File "/testbed/sympy/sets/sets.py", line 1132, in _measure
    sets = [(sos, inter) for sos, inter in sets if inter.measure != 0]
  File "/testbed/sympy/sets/sets.py", line 1132, in <listcomp>
    sets = [(sos, inter) for sos, inter in sets if inter.measure != 0]
  File "/testbed/sympy/sets/sets.py", line 468, in measure
    return self._measure
  File "/testbed/sympy/sets/sets.py", line 572, in _measure
    raise NotImplementedError("(%s)._measure" % self)
NotImplementedError: (Intersection(Interval(1, 2), Interval(3, 4)))._measure
________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_contains __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 529, in test_contains
    assert Intersection(Interval(1, x), Interval(2, 3)).contains(y) == \
  File "/testbed/sympy/sets/sets.py", line 315, in contains
    c = self._contains(other)
  File "/testbed/sympy/sets/sets.py", line 324, in _contains
    raise NotImplementedError(filldedent('''
NotImplementedError: 
(Intersection(Interval(1, x), Interval(2, 3)))._contains(y) is not
defined. This method, when defined, will receive a sympified object.
The method should return True, False, None or something that expresses
what must be true for the containment of that object in self to be
evaluated. If None is returned then a generic Contains object will be
returned by the ``contains`` method.
________________________________________________________________________________
________ sympy/sets/tests/test_sets.py:test_Intersection_as_relational _________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 624, in test_Intersection_as_relational
    assert (Intersection(Interval(0, 1), FiniteSet(2),
AttributeError: 'Intersection' object has no attribute 'as_relational'
________________________________________________________________________________
______________ sympy/sets/tests/test_sets.py:test_image_piecewise ______________
Traceback (most recent call last):
  File "/testbed/sympy/solvers/inequalities.py", line 528, in solve_univariate_inequality
    raise ValueError
ValueError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 823, in test_image_piecewise
    assert imageset(x, f, Interval(-5, 5)) == Union(Interval(-5, -1), Interval(S(1)/25, oo))
  File "/testbed/sympy/sets/sets.py", line 1904, in imageset
    r = set_function(f, set)
  File "/testbed/sympy/sets/sets.py", line 2133, in set_function
    return _set_function(f, x)
  File "/testbed/sympy/multipledispatch/dispatcher.py", line 198, in __call__
    return func(*args, **kwargs)
  File "/testbed/sympy/sets/handlers/functions.py", line 51, in _set_function
    intrvl = p_cond.as_set()
  File "/testbed/sympy/logic/boolalg.py", line 156, in as_set
    return self.subs(reps)._eval_as_set()
  File "/testbed/sympy/core/relational.py", line 320, in _eval_as_set
    return solve_univariate_inequality(self, x, relational=False)
  File "/testbed/sympy/solvers/inequalities.py", line 532, in solve_univariate_inequality
    raise NotImplementedError(filldedent('''
NotImplementedError: 
The inequality, x <= -1, cannot be solved using
solve_univariate_inequality.
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_image_Union ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 842, in test_image_Union
    assert imageset(x, x**2, Interval(-2, 0) + FiniteSet(1, 2, 3)) == \
  File "/testbed/sympy/sets/sets.py", line 1904, in imageset
    r = set_function(f, set)
  File "/testbed/sympy/sets/sets.py", line 2133, in set_function
    return _set_function(f, x)
  File "/testbed/sympy/multipledispatch/dispatcher.py", line 198, in __call__
    return func(*args, **kwargs)
  File "/testbed/sympy/sets/handlers/functions.py", line 124, in _set_function
    return Union(*(imageset(f, arg) for arg in x.args))
  File "/testbed/sympy/sets/sets.py", line 1074, in __new__
    return simplify_union(args)
  File "/testbed/sympy/sets/sets.py", line 1985, in simplify_union
    new_set = union_sets(s, t)
  File "/testbed/sympy/multipledispatch/dispatcher.py", line 198, in __call__
    return func(*args, **kwargs)
  File "/testbed/sympy/sets/handlers/union.py", line 110, in union_sets
    if any(b.contains(x) == True for x in a):
  File "/testbed/sympy/sets/handlers/union.py", line 110, in <genexpr>
    if any(b.contains(x) == True for x in a):
  File "/testbed/sympy/sets/sets.py", line 315, in contains
    c = self._contains(other)
  File "/testbed/sympy/sets/fancysets.py", line 426, in _contains
    for soln in solns:
UnboundLocalError: local variable 'solns' referenced before assignment
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_10248 ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1020, in test_issue_10248
    assert list(Intersection(S.Reals, FiniteSet(x))) == [
TypeError: 'Intersection' object is not iterable
________________________________________________________________________________
______ sympy/sets/tests/test_sets.py:test_union_intersection_constructor _______
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1124, in test_union_intersection_constructor
    raises(Exception, lambda: Intersection(tuple(sets)))
  File "/testbed/sympy/utilities/pytest.py", line 86, in raises
    raise Failed("DID NOT RAISE")
sympy.utilities.pytest.Failed: DID NOT RAISE

________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_imageset __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 24, in test_imageset
    assert (1, r) in imageset(x, (x, x), S.Reals) != False
AssertionError
________________________________________________________________________________
___________________ sympy/sets/tests/test_sets.py:test_union ___________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 128, in test_union
    assert FiniteSet(1, 2, 3) & FiniteSet(2, 3, 4) == FiniteSet(2, 3)
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_difference _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 167, in test_difference
    assert Interval(1, 3) - Interval(1, 2) == Interval(2, 3, True)
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_Complement _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 187, in test_Complement
    assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_complement _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 229, in test_complement
    assert Union(Interval(0, 1), Interval(2, 3)).complement(S.Reals) == \
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_intersect1 _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 262, in test_intersect1
    assert all(S.Integers.intersection(i) is i for i in
AssertionError
________________________________________________________________________________
_______________ sympy/sets/tests/test_sets.py:test_intersection ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 317, in test_intersection
    assert i.is_iterable
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_9623 _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 356, in test_issue_9623
    assert Intersection(a, b, c) == Intersection(b, c)
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_is_disjoint ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 362, in test_is_disjoint
    assert Interval(0, 2).is_disjoint(Interval(3, 4)) == True
AssertionError
________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_is_subset _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 411, in test_is_subset
    assert Interval(0, 1).is_subset(Interval(0, 2)) is True
AssertionError
________________________________________________________________________________
_____________ sympy/sets/tests/test_sets.py:test_is_proper_subset ______________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 441, in test_is_proper_subset
    assert Interval(0, 1).is_proper_subset(Interval(0, 2)) is True
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_is_superset ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 450, in test_is_superset
    assert Interval(0, 3).is_superset(Interval(0, 2))
AssertionError
________________________________________________________________________________
____________ sympy/sets/tests/test_sets.py:test_is_proper_superset _____________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 476, in test_is_proper_superset
    assert Interval(0, 3).is_proper_superset(Interval(0, 2)) is True
AssertionError
________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_EmptySet __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 631, in test_EmptySet
    assert S.EmptySet.intersect(S.UniversalSet) == S.EmptySet
AssertionError
________________________________________________________________________________
_______________ sympy/sets/tests/test_sets.py:test_finite_basic ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 641, in test_finite_basic
    assert A.is_subset(AorB) and B.is_subset(AorB)
AssertionError
________________________________________________________________________________
_______________ sympy/sets/tests/test_sets.py:test_product_basic _______________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 706, in test_product_basic
    assert (d4*d4).is_subset(d6*d6)
AssertionError
________________________________________________________________________________
___________________ sympy/sets/tests/test_sets.py:test_real ____________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 736, in test_real
    assert all(s.is_subset(S.Reals) for s in [I, J, A, B, C])
AssertionError
________________________________________________________________________________
_______________ sympy/sets/tests/test_sets.py:test_universalset ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 769, in test_universalset
    assert U.intersect(Interval(2, 4)) == Interval(2, 4)
AssertionError
________________________________________________________________________________
______________ sympy/sets/tests/test_sets.py:test_image_interval _______________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 792, in test_image_interval
    assert imageset(x, 2*x, Interval(-2, 1)) == Interval(-4, 2)
AssertionError
________________________________________________________________________________
______________ sympy/sets/tests/test_sets.py:test_boundary_Union _______________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 863, in test_boundary_Union
    assert (Interval(0, 1) + Interval(2, 3)).boundary == FiniteSet(0, 1, 2, 3)
AssertionError
________________________________________________________________________________
____________ sympy/sets/tests/test_sets.py:test_boundary_ProductSet ____________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 891, in test_boundary_ProductSet
    assert (open_square + second_square).boundary == (
AssertionError
________________________________________________________________________________
__________________ sympy/sets/tests/test_sets.py:test_is_open __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 906, in test_is_open
    assert Interval(0, 1, True, True).is_open
AssertionError
________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_is_closed _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 911, in test_is_closed
    assert Interval(0, 1, False, False).is_closed
AssertionError
________________________________________________________________________________
_________________ sympy/sets/tests/test_sets.py:test_interior __________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 921, in test_interior
    assert Interval(0, 1, False, True).interior == Interval(0, 1, True, True)
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_9637 _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 967, in test_issue_9637
    assert Complement(Interval(1, 3), b) == \
AssertionError
________________________________________________________________________________
____________ sympy/sets/tests/test_sets.py:test_issue_Symbol_inter _____________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 990, in test_issue_Symbol_inter
    assert Intersection(r, i, FiniteSet(m), FiniteSet(m, n)) == \
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_10113 ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1014, in test_issue_10113
    assert imageset(x, f, S.Reals) == Union(Interval(-oo, 0), Interval(1, oo, True, True))
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_9447 _________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1026, in test_issue_9447
    assert Complement(S.UniversalSet, a) == Complement(
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_10931 ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1093, in test_issue_10931
    assert S.Integers - S.Reals == EmptySet()
AssertionError
________________________________________________________________________________
__________ sympy/sets/tests/test_sets.py:test_finite_set_intersection __________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1108, in test_finite_set_intersection
    assert Intersection(FiniteSet(-oo, x), FiniteSet(x)) == FiniteSet(x)
AssertionError

 tests finished: 37 passed, 30 failed, 3 expected to fail, 
1 expected to fail but passed, 7 exceptions, in 3.17 seconds 
DO *NOT* COMMIT!
+ git checkout e727339af6dc22321b00f52d971cda39e4ce89fb sympy/sets/tests/test_sets.py
Updated 1 path from 3be1a44635
