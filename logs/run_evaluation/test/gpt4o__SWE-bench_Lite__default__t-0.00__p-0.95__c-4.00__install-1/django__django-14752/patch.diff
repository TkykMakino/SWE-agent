
diff --git a/custom_autocomplete_view.py b/custom_autocomplete_view.py
new file mode 100644
index 0000000000..f75f8e2999
--- /dev/null
+++ b/custom_autocomplete_view.py
@@ -0,0 +1,5 @@
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def serialize_result(self, obj, to_field_name):
+        return super().serialize_result(obj, to_field_name) | {'notes': getattr(obj, 'notes', '')}
diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..593bb371dd 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -26,12 +26,14 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
-                for obj in context['object_list']
+                self.serialize_result(obj, to_field_name) for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
 
+    def serialize_result(self, obj, to_field_name):
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get_paginator(self, *args, **kwargs):
         """Use the ModelAdmin's paginator."""
         return self.model_admin.get_paginator(self.request, *args, **kwargs)
diff --git a/test_custom_autocomplete_view.py b/test_custom_autocomplete_view.py
new file mode 100644
index 0000000000..b94637969a
--- /dev/null
+++ b/test_custom_autocomplete_view.py
@@ -0,0 +1,228 @@
+import os
+import django
+import unittest
+from django.conf import settings
+from django.test import RequestFactory, TestCase
+from django.http import JsonResponse
+from django.contrib.admin.sites import AdminSite
+from custom_autocomplete_view import CustomAutocompleteJsonView
+
+# Minimal settings configuration
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+django.setup()
+
+class MockModel:
+    def __init__(self, id, name, notes):
+        self.id = id
+        self.name = name
+        self.notes = notes
+
+    def __str__(self):
+        return self.name
+
+class MockModelAdmin:
+    def get_search_fields(self, request):
+        return ['name']
+
+    def get_queryset(self, request):
+        return [MockModel(1, 'Test', 'Test notes')]
+
+    def get_paginator(self, request, queryset, per_page):
+        return queryset
+
+class CustomAutocompleteJsonViewTest(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+        self.view = CustomAutocompleteJsonView.as_view(admin_site=self.admin_site)
+        self.model_admin = MockModelAdmin()
+
+    def test_serialize_result(self):
+        request = self.factory.get('/autocomplete/', {
+            'term': 'Test',
+            'app_label': 'app',
+            'model_name': 'model',
+            'field_name': 'field'
+        })
+        response = self.view(request)
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('notes', response.json()['results'][0])
+        self.assertEqual(response.json()['results'][0]['notes'], 'Test notes')
+
+if __name__ == "__main__":
+    unittest.main()
+import django
+import unittest
+from django.conf import settings
+from django.test import RequestFactory, TestCase
+from django.http import JsonResponse
+from django.contrib.admin.sites import AdminSite
+from custom_autocomplete_view import CustomAutocompleteJsonView
+
+# Minimal settings configuration
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+django.setup()
+
+class MockModel:
+    def __init__(self, id, name, notes):
+        self.id = id
+        self.name = name
+        self.notes = notes
+
+    def __str__(self):
+        return self.name
+
+class MockModelAdmin:
+    def get_search_fields(self, request):
+        return ['name']
+
+    def get_queryset(self, request):
+        return [MockModel(1, 'Test', 'Test notes')]
+
+    def get_paginator(self, request, queryset, per_page):
+        return queryset
+
+class CustomAutocompleteJsonViewTest(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+        self.view = CustomAutocompleteJsonView.as_view(admin_site=self.admin_site)
+        self.model_admin = MockModelAdmin()
+
+    def test_serialize_result(self):
+        request = self.factory.get('/autocomplete/', {'term': 'Test'})
+        response = self.view(request)
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('notes', response.json()['results'][0])
+        self.assertEqual(response.json()['results'][0]['notes'], 'Test notes')
+
+if __name__ == "__main__":
+    unittest.main()
+import django
+from django.conf import settings
+from django.test import RequestFactory, TestCase
+from django.http import JsonResponse
+from django.contrib.admin.sites import AdminSite
+from custom_autocomplete_view import CustomAutocompleteJsonView
+
+# Minimal settings configuration
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+django.setup()
+
+class MockModel:
+    def __init__(self, id, name, notes):
+        self.id = id
+        self.name = name
+        self.notes = notes
+
+    def __str__(self):
+        return self.name
+
+class MockModelAdmin:
+    def get_search_fields(self, request):
+        return ['name']
+
+    def get_queryset(self, request):
+        return [MockModel(1, 'Test', 'Test notes')]
+
+    def get_paginator(self, request, queryset, per_page):
+        return queryset
+
+class CustomAutocompleteJsonViewTest(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+        self.view = CustomAutocompleteJsonView.as_view(admin_site=self.admin_site)
+        self.model_admin = MockModelAdmin()
+
+    def test_serialize_result(self):
+        request = self.factory.get('/autocomplete/', {'term': 'Test'})
+        response = self.view(request)
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('notes', response.json()['results'][0])
+        self.assertEqual(response.json()['results'][0]['notes'], 'Test notes')
+
+if __name__ == "__main__":
+    CustomAutocompleteJsonViewTest().test_serialize_result()
+from django.http import JsonResponse
+from django.contrib.auth.models import User
+from django.contrib.admin.sites import AdminSite
+from custom_autocomplete_view import CustomAutocompleteJsonView
+
+class MockModel:
+    def __init__(self, id, name, notes):
+        self.id = id
+        self.name = name
+        self.notes = notes
+
+    def __str__(self):
+        return self.name
+
+class MockModelAdmin:
+    def get_search_fields(self, request):
+        return ['name']
+
+    def get_queryset(self, request):
+        return [MockModel(1, 'Test', 'Test notes')]
+
+    def get_paginator(self, request, queryset, per_page):
+        return queryset
+
+class CustomAutocompleteJsonViewTest(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+        self.view = CustomAutocompleteJsonView.as_view(admin_site=self.admin_site)
+        self.model_admin = MockModelAdmin()
+
+    def test_serialize_result(self):
+        request = self.factory.get('/autocomplete/', {'term': 'Test'})
+        response = self.view(request)
+        self.assertEqual(response.status_code, 200)
+        self.assertIn('notes', response.json()['results'][0])
+        self.assertEqual(response.json()['results'][0]['notes'], 'Test notes')
+
+if __name__ == "__main__":
+    CustomAutocompleteJsonViewTest().test_serialize_result()
