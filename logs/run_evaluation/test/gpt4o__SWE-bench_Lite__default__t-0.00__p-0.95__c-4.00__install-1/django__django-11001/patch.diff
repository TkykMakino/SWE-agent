
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7649c39262..ecf4118ced 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -330,8 +330,13 @@ class SQLCompiler:
                         True))
         result = []
         seen = set()
-
         for expr, is_ref in order_by:
+            sql = str(expr)
+            sql_oneline = ' '.join(sql.split('\n'))
+            if sql_oneline in seen:
+                continue
+            seen.add(sql_oneline)
+            resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)
             if self.query.combinator:
                 src = resolved.get_source_expressions()[0]
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..2fb39583a0
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myapp/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..59fe69bc28
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class MyAppConfig(AppConfig):
+    name = 'myapp'
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..8a838f9007
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class MyModel(models.Model):
+    status = models.CharField(max_length=50)
+    accepted_datetime = models.DateTimeField(null=True, blank=True)
+    preferred_datetime = models.DateTimeField(null=True, blank=True)
+    created_at = models.DateTimeField(auto_now_add=True)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5755305c50
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,18 @@
+from django.db.models.expressions import RawSQL
+from myapp.models import MyModel
+
+queryset = MyModel.objects.all().order_by(
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then 2 else 1 end''', []).desc(),
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime)
+             else null end''', []).asc(),
+    RawSQL('''
+        case when status not in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime, created_at)
+             else null end''', []).desc()
+)
+
+print(queryset.query)
