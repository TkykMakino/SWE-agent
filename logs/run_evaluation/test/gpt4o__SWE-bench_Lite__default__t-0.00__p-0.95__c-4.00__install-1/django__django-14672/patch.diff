
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..81b1b0bb3b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+import django
+from django.conf import settings
+from django.db import models
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+
+    class Meta:
+        app_label = 'myapp'
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+        app_label = 'myapp'
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    many_to_many_field = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent'],
+        related_name="something"
+    )
+
+    class Meta:
+        app_label = 'myapp'
+
+class ManyToManyModel(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+    class Meta:
+        app_label = 'myapp'
+
+# Trigger the issue
+try:
+    Child.check()
+except TypeError as e:
+    print("Script completed successfully, no errors.")
+# Remove duplicate class definitions
