
diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py
index d32adc3066..9f8c02ab47 100644
--- a/sympy/geometry/util.py
+++ b/sympy/geometry/util.py
@@ -1,5 +1,5 @@
 """Utility functions for geometrical entities.
-
+from sympy import Eq, Function
 Contains
 ========
 intersection
@@ -12,7 +12,7 @@
 """
 from __future__ import division, print_function
 
-from sympy import Function, Symbol, solve
+from sympy import Function, Symbol, solve, Eq
 from sympy.core.compatibility import (
     is_sequence, range, string_types, ordered)
 from sympy.core.containers import OrderedSet
@@ -570,16 +570,29 @@ def idiff(eq, y, x, n=1):
         y = y[0]
     elif isinstance(y, Symbol):
         dep = {y}
+    elif isinstance(y, Function):
+        dep = {y}
+        y = y.args[0]
     else:
         raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)
 
+    if isinstance(eq, Eq):
+        eq = eq.lhs - eq.rhs
+
     f = dict([(s, Function(
         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
     dydx = Function(y.name)(x).diff(x)
     eq = eq.subs(f)
     derivs = {}
     for i in range(n):
-        yp = solve(eq.diff(x), dydx)[0].subs(derivs)
+        solutions = solve(eq.diff(x), dydx)
+        if not solutions:
+            raise ValueError("No solutions found for the differential equation.")
+        yp = solutions[0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
         if i == n - 1:
             return yp.subs([(v, k) for k, v in f.items()])
         derivs[dydx] = yp
