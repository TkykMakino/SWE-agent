
diff --git a/myproject/manage.py b/myproject/manage.py
new file mode 100755
index 0000000000..893db8eafe
--- /dev/null
+++ b/myproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/myproject/myproject/__init__.py b/myproject/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/myproject/asgi.py b/myproject/myproject/asgi.py
new file mode 100644
index 0000000000..ab191894ae
--- /dev/null
+++ b/myproject/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_asgi_application()
diff --git a/myproject/myproject/settings.py b/myproject/myproject/settings.py
new file mode 100644
index 0000000000..76fdd27487
--- /dev/null
+++ b/myproject/myproject/settings.py
@@ -0,0 +1,126 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 4.2.dev20221222094112.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-u#t*n-y!(v%1g@q2n8=*^(q+!v*t7clg1+p53wh=e$5-x*^^xr"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "testapp",
+]
+
+MIDDLEWARE = [
+    "myproject.utils.tenant_db_router.TenantSubdomainMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "myproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "myproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+TENANT_MAP = {"localhost":"default", "tenant_1":"default"}
+DATABASE_ROUTERS = ["myproject.utils.tenant_db_router.TenantDatabaseRouter"]
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/myproject/myproject/testapp/models.py b/myproject/myproject/testapp/models.py
new file mode 100644
index 0000000000..26a27d5a22
--- /dev/null
+++ b/myproject/myproject/testapp/models.py
@@ -0,0 +1,4 @@
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/myproject/myproject/urls.py b/myproject/myproject/urls.py
new file mode 100644
index 0000000000..523ce70c6f
--- /dev/null
+++ b/myproject/myproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for myproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/myproject/myproject/utils/__init__.py b/myproject/myproject/utils/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/myproject/myproject/utils/__init__.py
@@ -0,0 +1 @@
+
diff --git a/myproject/myproject/utils/tenant_db_router/tenant_db_router.py b/myproject/myproject/utils/tenant_db_router/tenant_db_router.py
new file mode 100644
index 0000000000..299c70219b
--- /dev/null
+++ b/myproject/myproject/utils/tenant_db_router/tenant_db_router.py
@@ -0,0 +1,45 @@
+from threading import local
+from django.conf import settings
+
+local_state = local()
+
+class InvalidTenantException(Exception):
+    pass
+
+class TenantSubdomainMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    def __call__(self, request):
+        ## Get Subdomain
+        host = request.get_host().split(":")[0]
+        local_state.subdomain = (
+            # We assume single level of subdomain : app.service.com 
+            # HOST_IP : used to for local dev. 
+            host if host in settings.HOST_IP else host.split(".")[0]
+        )
+        response = self.get_response(request)
+        return response
+
+class TenantDatabaseRouter:
+    def _default_db(self):
+        subdomain = getattr(local_state, "subdomain", None)
+        if subdomain is not None and subdomain in settings.TENANT_MAP:
+            db_name = settings.TENANT_MAP[local_state.subdomain]
+            return db_name
+        else:
+            raise InvalidTenantException()
+
+    def db_for_read(self, model, **hints):
+        print("read", hints)
+        return self._default_db()
+
+    def db_for_write(self, model, **hints):
+        print("write", hints)
+        return self._default_db()
+
+    def allow_relation(self, obj1, obj2, **hints):
+        return None
+
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return None
diff --git a/myproject/myproject/wsgi.py b/myproject/myproject/wsgi.py
new file mode 100644
index 0000000000..1de9e2cef2
--- /dev/null
+++ b/myproject/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_wsgi_application()
diff --git a/myproject/testapp/__init__.py b/myproject/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/testapp/admin.py b/myproject/testapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/myproject/testapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/myproject/testapp/apps.py b/myproject/testapp/apps.py
new file mode 100644
index 0000000000..5876911b2d
--- /dev/null
+++ b/myproject/testapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "testapp"
diff --git a/myproject/testapp/migrations/__init__.py b/myproject/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/testapp/models.py b/myproject/testapp/models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/myproject/testapp/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/myproject/testapp/tests.py b/myproject/testapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/myproject/testapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/myproject/testapp/views.py b/myproject/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/myproject/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
