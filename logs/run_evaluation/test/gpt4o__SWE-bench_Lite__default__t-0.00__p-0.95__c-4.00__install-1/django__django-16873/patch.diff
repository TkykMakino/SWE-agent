
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c2ab69ee5b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,108 @@
+from django.template.defaultfilters import escape
+from django.test import SimpleTestCase
+from django.template import Engine, Context
+from django.conf import settings
+import django
+
+# Configure settings
+settings.configure(
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        },
+    ]
+)
+
+# Setup Django
+django.setup()
+
+class RegressionTests(SimpleTestCase):
+    def setUp(self):
+        self.engine = Engine.get_default()
+
+    def test_join01(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{{ some_list|join:some_var }}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, escape(some_var.join(some_list)))
+
+    def test_join02(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, some_var.join(some_list))
+
+if __name__ == "__main__":
+    import unittest
+    unittest.main()
+from django.test import SimpleTestCase
+from django.template import Engine, Context
+from django.conf import settings
+
+# Configure settings
+settings.configure(
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        },
+    ]
+)
+
+class RegressionTests(SimpleTestCase):
+    def setUp(self):
+        self.engine = Engine.get_default()
+
+    def test_join01(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{{ some_list|join:some_var }}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, escape(some_var.join(some_list)))
+
+    def test_join02(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, some_var.join(some_list))
+
+if __name__ == "__main__":
+    import unittest
+    unittest.main()
+from django.test import SimpleTestCase
+from django.template import Engine, Context
+
+class RegressionTests(SimpleTestCase):
+    def setUp(self):
+        self.engine = Engine.get_default()
+
+    def test_join01(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{{ some_list|join:some_var }}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, escape(some_var.join(some_list)))
+
+    def test_join02(self):
+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]
+        some_var = "<br/>"
+        output = self.engine.from_string('{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}').render(Context({"some_list": some_list, "some_var": some_var}))
+        self.assertEqual(output, some_var.join(some_list))
+
+if __name__ == "__main__":
+    import unittest
+    unittest.main()
+from django import template
+from django.utils.safestring import mark_safe
+from django.utils.html import conditional_escape
+from django.template.defaultfilters import stringfilter
+
+register = template.Library()
+
+@register.filter(is_safe=True, needs_autoescape=True)
+@stringfilter
+def join(value, arg, autoescape=True):
+    if autoescape:
+        esc = conditional_escape
+        value = [esc(v) for v in value]
+        arg = esc(arg)
+    else:
+        esc = lambda x: x
+    return mark_safe(arg.join(value))
