+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/core/management/templates.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_project/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 29345aecf6e8d53ccb3577a3762bb0c263f7558d
Author: snowman2 <alansnow21@gmail.com>
Date:   Thu May 13 13:02:31 2021 +0200

    Fixed #32721 -- Fixed migrations crash when adding namespaced spatial indexes on PostGIS.

diff --git a/django/contrib/gis/db/backends/postgis/schema.py b/django/contrib/gis/db/backends/postgis/schema.py
index a4b4910c36..c574bed84f 100644
--- a/django/contrib/gis/db/backends/postgis/schema.py
+++ b/django/contrib/gis/db/backends/postgis/schema.py
@@ -33,10 +33,9 @@ class PostGISSchemaEditor(DatabaseSchemaEditor):
         elif field.dim > 2 and not field.geography:
             # Use "nd" ops which are fast on multidimensional cases
             opclasses = [self.geom_index_ops_nd]
-        if not kwargs.get('name'):
-            name = '%s_%s_id' % (model._meta.db_table, field.column)
-        else:
-            name = kwargs['name']
+        name = kwargs.get('name')
+        if not name:
+            name = self._create_index_name(model._meta.db_table, [field.column], '_id')
 
         return super()._create_index_sql(
             model,
diff --git a/tests/gis_tests/geoapp/test_indexes.py b/tests/gis_tests/geoapp/test_indexes.py
index 4aee5062d8..ce9376d810 100644
--- a/tests/gis_tests/geoapp/test_indexes.py
+++ b/tests/gis_tests/geoapp/test_indexes.py
@@ -1,6 +1,8 @@
+from django.contrib.gis.db import models
 from django.db import connection
 from django.db.models import Index
 from django.test import TransactionTestCase
+from django.test.utils import isolate_apps
 
 from .models import City
 
@@ -38,6 +40,30 @@ class SchemaIndexesTests(TransactionTestCase):
             str(index.create_sql(City, editor)),
         )
 
+    @isolate_apps('gis_tests.geoapp')
+    def test_namespaced_db_table(self):
+        if not connection.ops.postgis:
+            self.skipTest('PostGIS-specific test.')
+
+        class SchemaCity(models.Model):
+            point = models.PointField()
+
+            class Meta:
+                app_label = 'geoapp'
+                db_table = 'django_schema"."geoapp_schema_city'
+
+        index = Index(fields=['point'])
+        editor = connection.schema_editor()
+        create_index_sql = str(index.create_sql(SchemaCity, editor))
+        self.assertIn(
+            '%s USING ' % editor.quote_name(SchemaCity._meta.db_table),
+            create_index_sql,
+        )
+        self.assertIn(
+            'CREATE INDEX "geoapp_schema_city_point_9ed70651_id" ',
+            create_index_sql,
+        )
+
     def test_index_name(self):
         if not self.has_spatial_indexes(City._meta.db_table):
             self.skipTest('Spatial indexes in Meta.indexes are not supported.')
diff --git a/tests/gis_tests/gis_migrations/test_operations.py b/tests/gis_tests/gis_migrations/test_operations.py
index 25d55619ed..6c7adcf359 100644
--- a/tests/gis_tests/gis_migrations/test_operations.py
+++ b/tests/gis_tests/gis_migrations/test_operations.py
@@ -210,7 +210,7 @@ class OperationTests(OperationTestCase):
         self.assertSpatialIndexExists('gis_neighborhood', 'point3d')
 
         with connection.cursor() as cursor:
-            index_name = 'gis_neighborhood_point3d_id'
+            index_name = 'gis_neighborhood_point3d_113bc868_id'
             cursor.execute(self.get_opclass_query, [index_name])
             self.assertEqual(
                 cursor.fetchall(),
+ git diff 29345aecf6e8d53ccb3577a3762bb0c263f7558d
diff --git a/django/core/management/templates.py b/django/core/management/templates.py
index 8dc6068286..f248ab1b71 100644
--- a/django/core/management/templates.py
+++ b/django/core/management/templates.py
@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):
                 raise CommandError(e)
         else:
             if app_or_project == 'app':
-                self.validate_name(os.path.basename(target), 'directory')
+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')
             top_dir = os.path.abspath(os.path.expanduser(target))
             if not os.path.exists(top_dir):
                 raise CommandError("Destination directory '%s' does not "
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210514051028) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.0.dev20210514051028-0.editable-py3-none-any.whl size=26128 sha256=83ebc2b265e38cbc19185d66f4a93ad108d011172da88d7b405d1ba3b309e610
  Stored in directory: /tmp/pip-ephem-wheel-cache-lcch66__/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210514051028
    Uninstalling Django-4.0.dev20210514051028:
      Successfully uninstalled Django-4.0.dev20210514051028
Successfully installed Django-4.0.dev20210514051028
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 29345aecf6e8d53ccb3577a3762bb0c263f7558d tests/admin_scripts/tests.py
Updated 0 paths from c424880b88
+ git apply -v -
Checking patch tests/admin_scripts/tests.py...
Applied patch tests/admin_scripts/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 admin_scripts.tests
Testing against Django installed in '/testbed/django'
Importing application admin_scripts
Found 199 tests.
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: admin_scripts, auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique...Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
 OK
System check identified no issues (0 silenced).
test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning) ... ok
test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning) ... ok
test_option_then_setting (admin_scripts.tests.ArgumentOrder)
Options passed before settings are correctly handled. ... ok
test_option_then_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options are correctly handled when they are passed before and after ... ok
test_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options passed after settings are correctly handled. ... ok
test_setting_then_short_option (admin_scripts.tests.ArgumentOrder)
Short options passed after settings are correctly handled. ... ok
test_short_option_then_setting (admin_scripts.tests.ArgumentOrder)
Short options passed before settings are correctly handled. ... ok
test_app_command (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided ... FAIL
test_app_command_invalid_app_label (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided ... FAIL
test_app_command_multiple_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when multiple app names are provided ... FAIL
test_app_command_no_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when no app name is provided ... FAIL
test_app_command_some_invalid_app_labels (admin_scripts.tests.CommandTypes)
User AppCommands can execute when some of the provided app names are invalid ... FAIL
test_base_command (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when a label is provided ... FAIL
test_base_command_multiple_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided ... FAIL
test_base_command_no_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided ... FAIL
test_base_command_with_option (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with options when a label is provided ... FAIL
test_base_command_with_options (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with multiple options when a label is provided ... FAIL
test_base_command_with_wrong_option (admin_scripts.tests.CommandTypes)
User BaseCommands outputs command usage when wrong option is specified ... FAIL
test_base_run_from_argv (admin_scripts.tests.CommandTypes)
Test run_from_argv properly terminates even with custom execute() (#19665) ... ok
test_color_style (admin_scripts.tests.CommandTypes) ... ok
test_command_color (admin_scripts.tests.CommandTypes) ... ok
test_command_no_color (admin_scripts.tests.CommandTypes)
--no-color prevent colorization of the output ... ok
test_custom_stderr (admin_scripts.tests.CommandTypes) ... ok
test_custom_stdout (admin_scripts.tests.CommandTypes) ... ok
test_force_color_command_init (admin_scripts.tests.CommandTypes) ... ok
test_force_color_execute (admin_scripts.tests.CommandTypes) ... ok
test_help (admin_scripts.tests.CommandTypes)
help is handled as a special case ... ok
test_help_alternative (admin_scripts.tests.CommandTypes)
--help is equivalent to help ... ok
test_help_commands (admin_scripts.tests.CommandTypes)
help --commands shows the list of all available commands ... ok
test_help_short_altert (admin_scripts.tests.CommandTypes)
-h is handled as a short form of --help ... ok
test_label_command (admin_scripts.tests.CommandTypes)
User LabelCommands can execute when a label is provided ... FAIL
test_label_command_multiple_label (admin_scripts.tests.CommandTypes)
User LabelCommands are executed multiple times if multiple labels are provided ... FAIL
test_label_command_no_label (admin_scripts.tests.CommandTypes)
User LabelCommands raise an error if no label is provided ... FAIL
test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes) ... ok
test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes) ... ok
test_noargs (admin_scripts.tests.CommandTypes)
NoArg Commands can be executed ... FAIL
test_noargs_with_args (admin_scripts.tests.CommandTypes)
NoArg Commands raise an error if an argument is provided ... FAIL
test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes)
A command called from the command line should close connections after ... ok
test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes)
Non-ASCII message of CommandError does not raise any ... ok
test_specific_help (admin_scripts.tests.CommandTypes)
--help can be used on a specific command ... ok
test_version (admin_scripts.tests.CommandTypes)
version is handled as a special case ... ok
test_version_alternative (admin_scripts.tests.CommandTypes)
--version is equivalent to version ... ok
test_all (admin_scripts.tests.DiffSettings)
The all option also shows settings with the default value. ... ok
test_basic (admin_scripts.tests.DiffSettings)
Runs without error and emits settings diff. ... ok
test_custom_default (admin_scripts.tests.DiffSettings)
The --default option specifies an alternate settings module for ... ok
test_dynamic_settings_configured (admin_scripts.tests.DiffSettings) ... ok
test_settings_configured (admin_scripts.tests.DiffSettings) ... ok
test_unified (admin_scripts.tests.DiffSettings)
--output=unified emits settings diff in unified mode. ... ok
test_unified_all (admin_scripts.tests.DiffSettings)
--output=unified --all emits settings diff in unified mode and includes ... ok
test_precedence (admin_scripts.tests.Discovery)
Apps listed first in INSTALLED_APPS have precedence. ... ok
test_builtin_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can't execute user commands unless settings are provided ... ok
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can't execute user commands if it isn't provided settings ... ok
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if the environment contains settings ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if a settings file is provided ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can't execute user commands unless settings are provided ... ok
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands unless settings are provided ... ok
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can't execute user commands unless settings are provided ... ok
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_commands_with_invalid_settings (admin_scripts.tests.DjangoAdminNoSettings)
Commands that don't require settings succeed if the settings file ... ok
test_builtin_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin can't execute user commands unless settings are provided ... ok
test_setup_environ (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory ... ok
test_setup_environ_custom_template (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory with a custom template ... ok
test_startapp_unicode_name (admin_scripts.tests.DjangoAdminSettingsDirectory)
startapp creates the correct directory with Unicode characters. ... ok
test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions) ... ok
test_suggestions (admin_scripts.tests.DjangoAdminSuggestions) ... FAIL
test_pks_parsing (admin_scripts.tests.Dumpdata)
Regression for #20509 ... FAIL
test_program_name_from_argv (admin_scripts.tests.ExecuteFromCommandLine)
Program name is computed from the execute_from_command_line()'s argv ... ok
test_program_name_in_help (admin_scripts.tests.MainModule) ... ok
test_builtin_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail with an error when no default settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work if settings are provided in the environment ... ok
test_builtin_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work with settings provided as argument ... ok
test_custom_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can't execute user commands without settings ... ok
test_custom_command_output_color (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py output syntax color can be deactivated with the `--no-color` option ... ok
test_custom_command_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided in environment ... ok
test_custom_command_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided as argument ... ok
test_app_with_import (admin_scripts.tests.ManageCheck)
manage.py check does not raise errors when an app imports a base ... FAIL
test_broken_app (admin_scripts.tests.ManageCheck)
manage.py check reports an ImportError if an app's models.py ... FAIL
test_complex_app (admin_scripts.tests.ManageCheck)
manage.py check does not raise an ImportError validating a ... FAIL
test_nonexistent_app (admin_scripts.tests.ManageCheck)
check reports an error on a nonexistent app in INSTALLED_APPS. ... FAIL
test_output_format (admin_scripts.tests.ManageCheck)
All errors/warnings should be sorted by level and by message. ... FAIL
test_warning_does_not_halt (admin_scripts.tests.ManageCheck)
When there are only warnings or less serious messages, then Django ... FAIL
test_builtin_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed when default settings are appropriate ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when default settings are appropriate ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed when default settings are appropriate ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when default settings are appropriate ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided as argument ... FAIL
test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings) ... ok
test_builtin_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands without appropriate settings ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist ... ok
test_builtin_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute builtin commands if settings are provided in the environment ... ok
test_builtin_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands succeed if settings are provided as argument ... ok
test_custom_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can't execute user commands using default settings ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided in environment ... ok
test_custom_command_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided as argument ... ok
test_builtin_command (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail with an error when no settings provided ... ok
test_builtin_with_bad_environment (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist ... ok
test_builtin_with_bad_settings (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist ... ok
test_no_database (admin_scripts.tests.ManageRunserver)
Ensure runserver.check_migrations doesn't choke on empty DATABASES. ... ok
test_readonly_database (admin_scripts.tests.ManageRunserver)
runserver.check_migrations() doesn't choke when a database is read-only. ... ok
test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runner_ambiguous (admin_scripts.tests.ManageRunserver) ... ok
test_runner_custom_defaults (admin_scripts.tests.ManageRunserver) ... ok
test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runner_hostname (admin_scripts.tests.ManageRunserver) ... ok
test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runserver_addrport (admin_scripts.tests.ManageRunserver) ... ok
test_skip_checks (admin_scripts.tests.ManageRunserver) ... ok
test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts) ... FAIL
test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
manage.py builtin commands does not swallow attribute error due to bad ... FAIL
test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)
Test listing available commands output note when only core commands are ... ok
test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
import error: manage.py builtin commands shows useful diagnostic info ... FAIL
test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors) ... FAIL
test_params_to_runserver (admin_scripts.tests.ManageTestserver) ... ok
test_testserver_handle_params (admin_scripts.tests.ManageTestserver) ... ok
test_importable_name (admin_scripts.tests.StartApp)
startapp validates that app name doesn't clash with existing Python ... ok
test_importable_target_name (admin_scripts.tests.StartApp) ... ok
test_invalid_name (admin_scripts.tests.StartApp)
startapp validates that app name is a valid Python identifier. ... ok
test_invalid_target_name (admin_scripts.tests.StartApp) ... ok
test_overlaying_app (admin_scripts.tests.StartApp) ... ok
test_template (admin_scripts.tests.StartApp) ... ok
test_trailing_slash_in_target_app_directory_name (admin_scripts.tests.StartApp) ... ok
test_custom_project_destination_missing (admin_scripts.tests.StartProject)
Make sure an exception is raised when the provided ... ok
test_custom_project_template (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template ... ok
test_custom_project_template_context_variables (admin_scripts.tests.StartProject)
Make sure template context variables are rendered with proper values ... ok
test_custom_project_template_from_tarball_by_path (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template from a tarball ... ok
test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)
The startproject management command is able to use a different project ... ok
test_custom_project_template_from_tarball_to_alternative_location (admin_scripts.tests.StartProject)
Startproject can use a project template from a tarball and create it in a specified location ... ok
test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)
The startproject management command is able to render templates with ... ok
test_file_without_extension (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to render custom files ... ok
test_importable_project_name (admin_scripts.tests.StartProject)
startproject validates that project name doesn't clash with existing ... ok
test_invalid_project_name (admin_scripts.tests.StartProject)
Make sure the startproject management command validates a project name ... ok
test_no_escaping_of_project_variables (admin_scripts.tests.StartProject)
Make sure template context variables are not html escaped ... ok
test_project_template_tarball_url (admin_scripts.tests.StartProject)
Startproject management command handles project template tar/zip balls from non-canonical urls ... ok
test_simple_project (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project ... ok
test_simple_project_different_directory (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project in a specific directory ... ok
test_template_dir_with_trailing_slash (admin_scripts.tests.StartProject)
Ticket 17475: Template dir passed has a trailing path separator ... ok
test_wrong_args (admin_scripts.tests.StartProject)
Make sure passing the wrong kinds of arguments outputs an error and prints usage ... ok

======================================================================
FAIL: test_app_command (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1741, in test_app_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1529 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'app_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_app_command_invalid_app_label (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1780, in test_app_command_invalid_app_label
    self.assertOutput(err, "No installed app with label 'NOT_AN_APP'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'NOT_AN_APP'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'app_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'NOT_AN_APP'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'app_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_app_command_multiple_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when multiple app names are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1760, in test_app_command_multiple_apps
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1529 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'app_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_app_command_no_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when no app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1754, in test_app_command_no_apps
    self.assertOutput(err, 'error: Enter at least one application label.')
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'error: Enter at least one application label.' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'app_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'error: Enter at least one application label.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'app_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_app_command_some_invalid_app_labels (admin_scripts.tests.CommandTypes)
User AppCommands can execute when some of the provided app names are invalid
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1786, in test_app_command_some_invalid_app_labels
    self.assertOutput(err, "No installed app with label 'NOT_AN_APP'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'NOT_AN_APP'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'app_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'NOT_AN_APP'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'app_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1610, in test_base_command
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1653, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1530 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command_multiple_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1622, in test_base_command_multiple_label
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1653, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1530 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command_no_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1616, in test_base_command_no_label
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1653, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1530 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command_with_option (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with options when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1628, in test_base_command_with_option
    self._test_base_command(args, expected_labels, option_a="'x'")
  File "/testbed/tests/admin_scripts/tests.py", line 1653, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1530 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command_with_options (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with multiple options when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1634, in test_base_command_with_options
    self._test_base_command(args, expected_labels, option_a="'x'", option_b="'y'")
  File "/testbed/tests/admin_scripts/tests.py", line 1653, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1530 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_base_command_with_wrong_option (admin_scripts.tests.CommandTypes)
User BaseCommands outputs command usage when wrong option is specified
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1641, in test_base_command_with_wrong_option
    self.assertOutput(err, "usage: manage.py base_command")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'usage: manage.py base_command' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'base_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'usage: manage.py base_command' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'base_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_label_command (admin_scripts.tests.CommandTypes)
User LabelCommands can execute when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1792, in test_label_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1531 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'label_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_label_command_multiple_label (admin_scripts.tests.CommandTypes)
User LabelCommands are executed multiple times if multiple labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1810, in test_label_command_multiple_label
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1531 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'label_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_label_command_no_label (admin_scripts.tests.CommandTypes)
User LabelCommands raise an error if no label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1804, in test_label_command_no_label
    self.assertOutput(err, 'Enter at least one label')
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'Enter at least one label' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'label_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Enter at least one label' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'label_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_noargs (admin_scripts.tests.CommandTypes)
NoArg Commands can be executed
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1723, in test_noargs
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_noargs_with_args (admin_scripts.tests.CommandTypes)
NoArg Commands raise an error if an argument is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1735, in test_noargs_with_args
    self.assertOutput(err, "error: unrecognized arguments: argument")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'error: unrecognized arguments: argument' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'error: unrecognized arguments: argument' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 438, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3830 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 431, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3830 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 474, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1764 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 467, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1764 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 236, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 229, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 272, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1754 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 265, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1754 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if the environment contains settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 304, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if a settings file is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 297, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 340, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1754 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 333, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1754 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 372, in test_builtin_with_environment
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 365, in test_builtin_with_settings
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 408, in test_custom_command_with_environment
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 401, in test_custom_command_with_settings
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 508, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3830 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 501, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3830 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 543, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1764 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 536, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1764 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.alternate_settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 630, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 623, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3810 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2348, in test_suggestions
    self.assertOutput(err, "Unknown command: 'rnserver'. Did you mean runserver?")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'rnserver'. Did you mean runserver?" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'rnserver\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'rnserver'. Did you mean runserver?' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'rnserver'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/opt/miniconda3/envs/testbed/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_pks_parsing (admin_scripts.tests.Dumpdata)
Regression for #20509
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2327, in test_pks_parsing
    self.assertOutput(err, "You can only use --pks option with one model")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'You can only use --pks option with one model' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 393, in execute\n    self.check()\n  File "/testbed/django/core/management/base.py", line 419, in check\n    all_issues = checks.run_checks(\n  File "/testbed/django/core/checks/registry.py", line 77, in run_checks\n    new_errors = check(app_configs=app_configs, databases=databases)\n  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders\n    for conf in settings.TEMPLATES\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'You can only use --pks option with one model' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 393, in execute
    self.check()
  File "/testbed/django/core/management/base.py", line 419, in check
    all_issues = checks.run_checks(
  File "/testbed/django/core/checks/registry.py", line 77, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders
    for conf in settings.TEMPLATES
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_app_with_import (admin_scripts.tests.ManageCheck)
manage.py check does not raise errors when an app imports a base
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1164, in test_app_with_import
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3539 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 63, in handle
    self.check(
  File "/testbed/django/core/management/base.py", line 419, in check
    all_issues = checks.run_checks(
  File "/testbed/django/core/checks/registry.py", line 77, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders
    for conf in settings.TEMPLATES
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_broken_app (admin_scripts.tests.ManageCheck)
manage.py check reports an ImportError if an app's models.py
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1104, in test_broken_app
    self.assertOutput(err, 'ImportError')
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'ImportError' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 63, in handle\n    self.check(\n  File "/testbed/django/core/management/base.py", line 419, in check\n    all_issues = checks.run_checks(\n  File "/testbed/django/core/checks/registry.py", line 77, in run_checks\n    new_errors = check(app_configs=app_configs, databases=databases)\n  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders\n    for conf in settings.TEMPLATES\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'ImportError' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 63, in handle
    self.check(
  File "/testbed/django/core/management/base.py", line 419, in check
    all_issues = checks.run_checks(
  File "/testbed/django/core/checks/registry.py", line 77, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders
    for conf in settings.TEMPLATES
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_complex_app (admin_scripts.tests.ManageCheck)
manage.py check does not raise an ImportError validating a
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1145, in test_complex_app
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3539 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 63, in handle
    self.check(
  File "/testbed/django/core/management/base.py", line 419, in check
    all_issues = checks.run_checks(
  File "/testbed/django/core/checks/registry.py", line 77, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders
    for conf in settings.TEMPLATES
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_nonexistent_app (admin_scripts.tests.ManageCheck)
check reports an error on a nonexistent app in INSTALLED_APPS.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1094, in test_nonexistent_app
    self.assertOutput(err, 'admin_scriptz')
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'admin_scriptz' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 63, in handle\n    self.check(\n  File "/testbed/django/core/management/base.py", line 419, in check\n    all_issues = checks.run_checks(\n  File "/testbed/django/core/checks/registry.py", line 77, in run_checks\n    new_errors = check(app_configs=app_configs, databases=databases)\n  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders\n    for conf in settings.TEMPLATES\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'admin_scriptz' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 63, in handle
    self.check(
  File "/testbed/django/core/management/base.py", line 419, in check
    all_issues = checks.run_checks(
  File "/testbed/django/core/checks/registry.py", line 77, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/templates.py", line 22, in check_setting_app_dirs_loaders
    for conf in settings.TEMPLATES
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_output_format (admin_scripts.tests.ManageCheck)
All errors/warnings should be sorted by level and by message.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1195, in test_output_format
    self.assertEqual(err, expected_err)
AssertionError: 'Traceback (most recent call last):\n  Fil[3561 chars]\'\n' != 'SystemCheckError: System check identified[171 chars]).\n'
Diff is 3886 characters long. Set self.maxDiff to None to see it.

======================================================================
FAIL: test_warning_does_not_halt (admin_scripts.tests.ManageCheck)
When there are only warnings or less serious messages, then Django
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1226, in test_warning_does_not_halt
    self.assertEqual(err, expected_err)
AssertionError: 'Traceback (most recent call last):\n  Fil[3561 chars]\'\n' != 'System check identified some issues:\n\nW[69 chars]).\n'
Diff is 3780 characters long. Set self.maxDiff to None to see it.

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 686, in test_builtin_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 700, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 693, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 721, in test_custom_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 735, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 728, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 751, in test_builtin_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 765, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 758, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 3588 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 786, in test_custom_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 800, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 793, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 151, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 1532 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 817, in test_builtin_command
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 831, in test_builtin_with_environment
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 824, in test_builtin_with_settings
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands without appropriate settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 852, in test_custom_command
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 866, in test_custom_command_with_environment
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 859, in test_custom_command_with_settings
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 972, in test_builtin_command
    self.assertOutput(err, "No installed app with label 'admin_scripts'.")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'admin_scripts'." not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'No installed app with label 'admin_scripts'.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can't execute user commands using default settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1007, in test_custom_command
    self.assertOutput(err, "Unknown command: 'noargs_command'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Unknown command: 'noargs_command'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'noargs_command\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'Unknown command: 'noargs_command'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'noargs_command'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1380, in test_empty_allowed_hosts_error
    self.assertOutput(err, 'CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.')
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/commands/runserver.py", line 65, in execute\n    super().execute(*args, **options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/runserver.py", line 72, in handle\n    if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/commands/runserver.py", line 65, in execute
    super().execute(*args, **options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/runserver.py", line 72, in handle
    if not settings.DEBUG and not settings.ALLOWED_HOSTS:
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
manage.py builtin commands does not swallow attribute error due to bad
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1056, in test_attribute_error
    self.assertOutput(err, "AttributeError: 'list' object has no attribute 'crash'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "AttributeError: 'list' object has no attribute 'crash'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'collectstatic\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'AttributeError: 'list' object has no attribute 'crash'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'collectstatic'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
import error: manage.py builtin commands shows useful diagnostic info
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1045, in test_import_error
    self.assertOutput(err, "foo42bar")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'foo42bar' not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/base.py", line 354, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File "/testbed/django/core/management/base.py", line 398, in execute\n    output = self.handle(*args, **options)\n  File "/testbed/django/core/management/commands/check.py", line 47, in handle\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>\n    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n  File "/testbed/django/apps/registry.py", line 154, in get_app_config\n    self.check_apps_ready()\n  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/base.py", line 367, in run_from_argv\n    connections.close_all()\n  File "/testbed/django/db/utils.py", line 208, in close_all\n    for alias in self:\n  File "/testbed/django/utils/connection.py", line 73, in __iter__\n    return iter(self.settings)\n  File "/testbed/django/utils/functional.py", line 48, in __get__\n    res = instance.__dict__[self.name] = self.func(instance)\n  File "/testbed/django/utils/connection.py", line 45, in settings\n    self._settings = self.configure_settings(self._settings)\n  File "/testbed/django/db/utils.py", line 144, in configure_settings\n    databases = super().configure_settings(databases)\n  File "/testbed/django/utils/connection.py", line 50, in configure_settings\n    settings = getattr(django_settings, self.settings_name)\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'foo42bar' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/base.py", line 354, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/testbed/django/core/management/base.py", line 398, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 47, in handle
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/core/management/commands/check.py", line 47, in <listcomp>
    app_configs = [apps.get_app_config(app_label) for app_label in app_labels]
  File "/testbed/django/apps/registry.py", line 154, in get_app_config
    self.check_apps_ready()
  File "/testbed/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/base.py", line 367, in run_from_argv
    connections.close_all()
  File "/testbed/django/db/utils.py", line 208, in close_all
    for alias in self:
  File "/testbed/django/utils/connection.py", line 73, in __iter__
    return iter(self.settings)
  File "/testbed/django/utils/functional.py", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/testbed/django/utils/connection.py", line 45, in settings
    self._settings = self.configure_settings(self._settings)
  File "/testbed/django/db/utils.py", line 144, in configure_settings
    databases = super().configure_settings(databases)
  File "/testbed/django/utils/connection.py", line 50, in configure_settings
    settings = getattr(django_settings, self.settings_name)
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

======================================================================
FAIL: test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1063, in test_key_error
    self.assertOutput(err, "KeyError: 'blah'")
  File "/testbed/tests/admin_scripts/tests.py", line 161, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "KeyError: 'blah'" not found in 'Traceback (most recent call last):\n  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command\n    app_name = commands[subcommand]\nKeyError: \'collectstatic\'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 413, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command\n    settings.INSTALLED_APPS\n  File "/testbed/django/conf/__init__.py", line 67, in __getattr__\n    self._setup(name)\n  File "/testbed/django/conf/__init__.py", line 54, in _setup\n    self._wrapped = Settings(settings_module)\n  File "/testbed/django/conf/__init__.py", line 141, in __init__\n    mod = importlib.import_module(self.SETTINGS_MODULE)\n  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import\n  File "<frozen importlib._bootstrap>", line 991, in _find_and_load\n  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked\nModuleNotFoundError: No module named \'test_project.settings\'\n' : 'KeyError: 'blah'' does not match actual output text 'Traceback (most recent call last):
  File "/testbed/django/core/management/__init__.py", line 237, in fetch_command
    app_name = commands[subcommand]
KeyError: 'collectstatic'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 419, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 413, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/testbed/django/core/management/__init__.py", line 244, in fetch_command
    settings.INSTALLED_APPS
  File "/testbed/django/conf/__init__.py", line 67, in __getattr__
    self._setup(name)
  File "/testbed/django/conf/__init__.py", line 54, in _setup
    self._wrapped = Settings(settings_module)
  File "/testbed/django/conf/__init__.py", line 141, in __init__
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 973, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'test_project.settings'
'

----------------------------------------------------------------------
Ran 199 tests in 23.808s

FAILED (failures=70)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 29345aecf6e8d53ccb3577a3762bb0c263f7558d tests/admin_scripts/tests.py
Updated 1 path from c424880b88
