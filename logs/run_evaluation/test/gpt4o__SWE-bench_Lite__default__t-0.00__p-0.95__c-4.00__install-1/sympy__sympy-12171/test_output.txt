+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/printing/mathematica.py
	modified:   sympy/printing/printer.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit ca6ef27272be31c9dc3753ede9232c39df9a75d8
Merge: 3637f60b98 39f019a19a
Author: Amit Kumar <aktech@users.noreply.github.com>
Date:   Thu Feb 23 11:33:07 2017 +0530

    Merge pull request #12195 from kychua/fix-typos
    
    Fix typos in docstring and comment

+ git diff ca6ef27272be31c9dc3753ede9232c39df9a75d8
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index 4c2ffd81e1..3d614a5e47 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -98,8 +98,14 @@ def _print_Function(self, expr):
                 if cond(*expr.args):
                     return "%s[%s]" % (mfunc, self.stringify(expr.args, ", "))
         return expr.func.__name__ + "[%s]" % self.stringify(expr.args, ", ")
-
-    def _print_Integral(self, expr):
+    def _print_Derivative(self, expr):
+        return "D[%s]" % (self.stringify(expr.args, ", "))
+
+    def _print_Float(self, expr):
+        print("Calling _print_Float")
+    def _print_float(self, expr):
+        res = str(expr)
+        return res.replace('e', '*^')
         if len(expr.variables) == 1 and not expr.limits[0][1:]:
             args = [expr.args[0], expr.variables[0]]
         else:
diff --git a/sympy/printing/printer.py b/sympy/printing/printer.py
index a88b34ee02..3befe87f31 100644
--- a/sympy/printing/printer.py
+++ b/sympy/printing/printer.py
@@ -242,7 +242,7 @@ def _print(self, expr, *args, **kwargs):
         """
         self._print_level += 1
         try:
-            # If the printer defines a name for a printing method
+            print(f"Printing type: {type(expr)}")
             # (Printer.printmethod) and the object knows for itself how it
             # should be printed, use that method.
             if (self.printmethod and hasattr(expr, self.printmethod)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.0.1.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.0.1.dev0
    Uninstalling sympy-1.0.1.dev0:
      Successfully uninstalled sympy-1.0.1.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.0.1.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout ca6ef27272be31c9dc3753ede9232c39df9a75d8 sympy/printing/tests/test_mathematica.py
Updated 0 paths from 9ead13ef9d
+ git apply -v -
Checking patch sympy/printing/tests/test_mathematica.py...
Applied patch sympy/printing/tests/test_mathematica.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/printing/tests/test_mathematica.py
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
random seed:        70497910
hash randomization: on (PYTHONHASHSEED=4047875402)

sympy/printing/tests/test_mathematica.py[10] 
test_Integer Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.numbers.NegativeOne'>
ok
test_Rational Printing type: <class 'sympy.core.numbers.Rational'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.numbers.Rational'>
Printing type: <class 'sympy.core.numbers.Rational'>
Printing type: <class 'sympy.core.add.Add'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Rational'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Rational'>
Printing type: <class 'sympy.core.symbol.Symbol'>
ok
test_Function Printing type: f
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: sin
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: cos
Printing type: <class 'sympy.core.symbol.Symbol'>
ok
test_Pow Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Float'>
Calling _print_Float
Printing type: f
Printing type: <class 'sympy.core.symbol.Symbol'>
E
test_Mul Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.add.Add'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
ok
test_constants Printing type: <class 'sympy.core.numbers.Pi'>
Printing type: <class 'sympy.core.numbers.Infinity'>
Printing type: <class 'sympy.core.numbers.NegativeInfinity'>
Printing type: <class 'sympy.core.numbers.EulerGamma'>
Printing type: <class 'sympy.core.numbers.Float'>
Calling _print_Float
Printing type: <class 'sympy.core.numbers.EulerGamma'>
Printing type: <class 'sympy.core.numbers.Catalan'>
Printing type: <class 'sympy.core.numbers.Float'>
Calling _print_Float
Printing type: <class 'sympy.core.numbers.Catalan'>
Printing type: <class 'sympy.core.numbers.Exp1'>
Printing type: <class 'sympy.core.numbers.Float'>
Calling _print_Float
Printing type: <class 'sympy.core.numbers.Exp1'>
ok
test_containers Printing type: <class 'list'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'list'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'list'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'list'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'tuple'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'tuple'>
Printing type: <class 'int'>
Printing type: <class 'int'>
Printing type: <class 'list'>
Printing type: <class 'int'>
Printing type: <class 'tuple'>
Printing type: <class 'int'>
Printing type: <class 'sympy.core.containers.Tuple'>
Printing type: <class 'sympy.core.numbers.One'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.numbers.Integer'>
ok
test_Integral Printing type: <class 'sympy.integrals.integrals.Integral'>
Printing type: <class 'sympy.integrals.integrals.Integral'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: sin
Printing type: sin
Printing type: <class 'sympy.core.symbol.Symbol'>
F
test_Derivative Printing type: <class 'sympy.core.function.Derivative'>
Printing type: sin
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
F
test_Sum Printing type: <class 'sympy.concrete.summations.Sum'>
Printing type: sin
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.containers.Tuple'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Zero'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.ImaginaryUnit'>
Printing type: <class 'sympy.core.symbol.Wild'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.ImaginaryUnit'>
Printing type: <class 'sympy.core.symbol.Wild'>
Printing type: <class 'sympy.concrete.summations.Sum'>
Printing type: exp
Printing type: <class 'sympy.core.add.Add'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.mul.Mul'>
Printing type: <class 'sympy.core.power.Pow'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.Integer'>
Printing type: <class 'sympy.core.containers.Tuple'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.NegativeInfinity'>
Printing type: <class 'sympy.core.numbers.Infinity'>
Printing type: <class 'sympy.core.containers.Tuple'>
Printing type: <class 'sympy.core.symbol.Symbol'>
Printing type: <class 'sympy.core.numbers.NegativeInfinity'>
Printing type: <class 'sympy.core.numbers.Infinity'>
ok                                                               [FAIL]


________________________________________________________________________________
______________ sympy/printing/tests/test_mathematica.py:test_Pow _______________
  File "/testbed/sympy/printing/tests/test_mathematica.py", line 35, in test_Pow
    assert mcode(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \
  File "/testbed/sympy/printing/mathematica.py", line 130, in mathematica_code
    return MCodePrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/printer.py", line 233, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 257, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/mathematica.py", line 74, in _print_Mul
    res = super(MCodePrinter, self)._print_Mul(expr.func(*c))
  File "/testbed/sympy/printing/codeprinter.py", line 414, in _print_Mul
    a_str = [self.parenthesize(x, prec) for x in a]
  File "/testbed/sympy/printing/codeprinter.py", line 414, in <listcomp>
    a_str = [self.parenthesize(x, prec) for x in a]
  File "/testbed/sympy/printing/str.py", line 31, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 257, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/mathematica.py", line 68, in _print_Pow
    return '%s^%s' % (self.parenthesize(expr.base, PREC),
  File "/testbed/sympy/printing/str.py", line 29, in parenthesize
    return "(%s)" % self._print(item)
  File "/testbed/sympy/printing/printer.py", line 257, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/mathematica.py", line 74, in _print_Mul
    res = super(MCodePrinter, self)._print_Mul(expr.func(*c))
  File "/testbed/sympy/printing/codeprinter.py", line 418, in _print_Mul
    return sign + '*'.join(a_str)
TypeError: sequence item 0: expected str instance, NoneType found

________________________________________________________________________________
____________ sympy/printing/tests/test_mathematica.py:test_Integral ____________
  File "/testbed/sympy/printing/tests/test_mathematica.py", line 69, in test_Integral
    assert mcode(Integral(sin(sin(x)), x)) == "Hold[Integrate[Sin[Sin[x]], x]]"
AssertionError
________________________________________________________________________________
___________ sympy/printing/tests/test_mathematica.py:test_Derivative ___________
  File "/testbed/sympy/printing/tests/test_mathematica.py", line 78, in test_Derivative
    assert mcode(Derivative(sin(x), x)) == "Hold[D[Sin[x], x]]"
AssertionError

====== tests finished: 7 passed, 2 failed, 1 exceptions, in 0.03 seconds =======
DO *NOT* COMMIT!
+ git checkout ca6ef27272be31c9dc3753ede9232c39df9a75d8 sympy/printing/tests/test_mathematica.py
Updated 1 path from 9ead13ef9d
