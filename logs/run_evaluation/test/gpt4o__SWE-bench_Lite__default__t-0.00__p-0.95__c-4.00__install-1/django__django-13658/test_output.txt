+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/core/management/__init__.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce_issue.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 0773837e15bb632afffb6848a58c59a791008fa1
Author: Hannes Ljungberg <hannes.ljungberg@gmail.com>
Date:   Mon Nov 9 17:54:20 2020 +0100

    Fixed #32182 -- Fixed crash of JSONField nested key transforms with subquery annotations on PostgreSQL.

diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index 5b0272a945..94596556d2 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -302,7 +302,8 @@ class KeyTransform(Transform):
     def as_postgresql(self, compiler, connection):
         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
         if len(key_transforms) > 1:
-            return '(%s %s %%s)' % (lhs, self.postgres_nested_operator), params + [key_transforms]
+            sql = '(%s %s %%s)' % (lhs, self.postgres_nested_operator)
+            return sql, tuple(params) + (key_transforms,)
         try:
             lookup = int(self.key_name)
         except ValueError:
diff --git a/docs/releases/3.1.4.txt b/docs/releases/3.1.4.txt
index 6641b0aaf5..02408cca68 100644
--- a/docs/releases/3.1.4.txt
+++ b/docs/releases/3.1.4.txt
@@ -14,3 +14,6 @@ Bugfixes
 
 * Fixed passing extra HTTP headers to ``AsyncRequestFactory`` request methods
   (:ticket:`32159`).
+
+* Fixed crash of key transforms for :class:`~django.db.models.JSONField` on
+  PostgreSQL when using on a ``Subquery()`` annotation (:ticket:`32182`).
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index 1c63d70bf9..e39e3fe757 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -408,6 +408,18 @@ class TestQuerying(TestCase):
             [self.objs[4]],
         )
 
+    def test_nested_key_transform_on_subquery(self):
+        self.assertSequenceEqual(
+            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
+                subquery_value=Subquery(
+                    NullableJSONModel.objects.filter(pk=OuterRef('pk')).values('value')
+                ),
+                key=KeyTransform('d', 'subquery_value'),
+                chain=KeyTransform('f', KeyTransform('1', 'key')),
+            ).filter(chain='g'),
+            [self.objs[4]],
+        )
+
     def test_expression_wrapper_key_transform(self):
         self.assertSequenceEqual(
             NullableJSONModel.objects.annotate(
+ git diff 0773837e15bb632afffb6848a58c59a791008fa1
diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 1ba093e51f..0d7e0f69a3 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -186,6 +186,17 @@ class ManagementUtility:
     Encapsulate the logic of the django-admin and manage.py utilities.
     """
     def __init__(self, argv=None):
+        self.argv = argv or sys.argv[:]
+        self.prog_name = os.path.basename(self.argv[0])
+        print(f"prog_name: {self.prog_name}")
+        if self.prog_name == '__main__.py':
+            self.prog_name = 'python -m django'
+        self.settings_exception = None
+        self.argv = argv or sys.argv[:]
+        self.prog_name = os.path.basename(self.argv[0])
+        if self.prog_name == '__main__.py':
+            self.prog_name = 'python -m django'
+        self.settings_exception = None
         self.argv = argv or sys.argv[:]
         self.prog_name = os.path.basename(self.argv[0])
         if self.prog_name == '__main__.py':
@@ -344,8 +355,8 @@ class ManagementUtility:
         # Preprocess options to extract --settings and --pythonpath.
         # These options could affect the commands that are available, so they
         # must be processed early.
-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)
-        parser.add_argument('--settings')
+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)
+        print(f"CommandParser prog: {self.prog_name}")
         parser.add_argument('--pythonpath')
         parser.add_argument('args', nargs='*')  # catch-all
         try:
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git checkout 0773837e15bb632afffb6848a58c59a791008fa1 tests/admin_scripts/tests.py
Updated 0 paths from b2891298b7
+ git apply -v -
Checking patch tests/admin_scripts/tests.py...
Applied patch tests/admin_scripts/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 admin_scripts.tests
Testing against Django installed in '/testbed/django'
Importing application admin_scripts
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: admin_scripts, auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning) ... System check identified no issues (0 silenced).
ok
test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning) ... ok
test_option_then_setting (admin_scripts.tests.ArgumentOrder)
Options passed before settings are correctly handled. ... FAIL
test_option_then_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options are correctly handled when they are passed before and after ... FAIL
test_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options passed after settings are correctly handled. ... FAIL
test_setting_then_short_option (admin_scripts.tests.ArgumentOrder)
Short options passed after settings are correctly handled. ... FAIL
test_short_option_then_setting (admin_scripts.tests.ArgumentOrder)
Short options passed before settings are correctly handled. ... FAIL
test_app_command (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided ... FAIL
test_app_command_invalid_app_label (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided ... FAIL
test_app_command_multiple_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when multiple app names are provided ... FAIL
test_app_command_no_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when no app name is provided ... FAIL
test_app_command_some_invalid_app_labels (admin_scripts.tests.CommandTypes)
User AppCommands can execute when some of the provided app names are invalid ... FAIL
test_base_command (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when a label is provided ... FAIL
test_base_command_multiple_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided ... FAIL
test_base_command_no_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided ... FAIL
test_base_command_with_option (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with options when a label is provided ... FAIL
test_base_command_with_options (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with multiple options when a label is provided ... FAIL
test_base_command_with_wrong_option (admin_scripts.tests.CommandTypes)
User BaseCommands outputs command usage when wrong option is specified ... FAIL
test_base_run_from_argv (admin_scripts.tests.CommandTypes) ... ok
test_color_style (admin_scripts.tests.CommandTypes) ... ok
test_command_color (admin_scripts.tests.CommandTypes) ... ok
test_command_no_color (admin_scripts.tests.CommandTypes)
--no-color prevent colorization of the output ... ok
test_custom_stderr (admin_scripts.tests.CommandTypes) ... ok
test_custom_stdout (admin_scripts.tests.CommandTypes) ... ok
test_force_color_command_init (admin_scripts.tests.CommandTypes) ... ok
test_force_color_execute (admin_scripts.tests.CommandTypes) ... ok
test_help (admin_scripts.tests.CommandTypes)
help is handled as a special case ... FAIL
test_help_alternative (admin_scripts.tests.CommandTypes)
--help is equivalent to help ... ok
test_help_commands (admin_scripts.tests.CommandTypes)
help --commands shows the list of all available commands ... FAIL
test_help_short_altert (admin_scripts.tests.CommandTypes)
-h is handled as a short form of --help ... ok
test_label_command (admin_scripts.tests.CommandTypes)
User LabelCommands can execute when a label is provided ... FAIL
test_label_command_multiple_label (admin_scripts.tests.CommandTypes)
User LabelCommands are executed multiple times if multiple labels are provided ... FAIL
test_label_command_no_label (admin_scripts.tests.CommandTypes)
User LabelCommands raise an error if no label is provided ... FAIL
test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes) ... ok
test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes) ... ok
test_noargs (admin_scripts.tests.CommandTypes)
NoArg Commands can be executed ... FAIL
test_noargs_with_args (admin_scripts.tests.CommandTypes)
NoArg Commands raise an error if an argument is provided ... FAIL
test_run_from_argv_closes_connections (admin_scripts.tests.CommandTypes) ... ok
test_run_from_argv_non_ascii_error (admin_scripts.tests.CommandTypes) ... ok
test_specific_help (admin_scripts.tests.CommandTypes)
--help can be used on a specific command ... FAIL
test_version (admin_scripts.tests.CommandTypes)
version is handled as a special case ... FAIL
test_version_alternative (admin_scripts.tests.CommandTypes)
--version is equivalent to version ... ok
test_all (admin_scripts.tests.DiffSettings)
The all option also shows settings with the default value. ... FAIL
test_basic (admin_scripts.tests.DiffSettings)
Runs without error and emits settings diff. ... FAIL
test_custom_default (admin_scripts.tests.DiffSettings) ... FAIL
test_dynamic_settings_configured (admin_scripts.tests.DiffSettings) ... FAIL
test_settings_configured (admin_scripts.tests.DiffSettings) ... FAIL
test_unified (admin_scripts.tests.DiffSettings)
--output=unified emits settings diff in unified mode. ... FAIL
test_unified_all (admin_scripts.tests.DiffSettings) ... FAIL
test_precedence (admin_scripts.tests.Discovery) ... ok
test_builtin_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can't execute user commands unless settings are provided ... FAIL
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can't execute user commands if it isn't provided settings ... FAIL
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if the environment contains settings ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if a settings file is provided ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can't execute user commands unless settings are provided ... FAIL
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands unless settings are provided ... FAIL
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can't execute user commands unless settings are provided ... FAIL
test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_commands_with_invalid_settings (admin_scripts.tests.DjangoAdminNoSettings) ... FAIL
test_builtin_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin can't execute user commands unless settings are provided ... FAIL
test_setup_environ (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory ... FAIL
test_setup_environ_custom_template (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory with a custom template ... FAIL
test_startapp_unicode_name (admin_scripts.tests.DjangoAdminSettingsDirectory)
startapp creates the correct directory with Unicode characters. ... FAIL
test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions) ... FAIL
test_suggestions (admin_scripts.tests.DjangoAdminSuggestions) ... FAIL
test_pks_parsing (admin_scripts.tests.Dumpdata)
Regression for #20509 ... FAIL
test_program_name_from_argv (admin_scripts.tests.ExecuteFromCommandLine) ... ERROR
test_program_name_in_help (admin_scripts.tests.MainModule) ... FAIL
test_builtin_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail with an error when no default settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work with settings provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can't execute user commands without settings ... FAIL
test_custom_command_output_color (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py output syntax color can be deactivated with the `--no-color` option ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided as argument ... FAIL
test_app_with_import (admin_scripts.tests.ManageCheck)
manage.py check does not raise errors when an app imports a base ... FAIL
test_broken_app (admin_scripts.tests.ManageCheck)
manage.py check reports an ImportError if an app's models.py ... FAIL
test_complex_app (admin_scripts.tests.ManageCheck)
manage.py check does not raise an ImportError validating a ... FAIL
test_nonexistent_app (admin_scripts.tests.ManageCheck)
check reports an error on a nonexistent app in INSTALLED_APPS. ... FAIL
test_output_format (admin_scripts.tests.ManageCheck)
All errors/warnings should be sorted by level and by message. ... FAIL
test_warning_does_not_halt (admin_scripts.tests.ManageCheck) ... FAIL
test_builtin_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed when default settings are appropriate ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when default settings are appropriate ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed when default settings are appropriate ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when default settings are appropriate ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided as argument ... FAIL
test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings) ... FAIL
test_builtin_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands without appropriate settings ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_builtin_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute builtin commands if settings are provided in the environment ... FAIL
test_builtin_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands succeed if settings are provided as argument ... FAIL
test_custom_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can't execute user commands using default settings ... FAIL
test_custom_command_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided in environment ... FAIL
test_custom_command_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided as argument ... FAIL
test_builtin_command (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail with an error when no settings provided ... FAIL
test_builtin_with_bad_environment (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist ... FAIL
test_builtin_with_bad_settings (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist ... FAIL
test_no_database (admin_scripts.tests.ManageRunserver) ... ok
test_readonly_database (admin_scripts.tests.ManageRunserver) ... ok
test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runner_ambiguous (admin_scripts.tests.ManageRunserver) ... ok
test_runner_custom_defaults (admin_scripts.tests.ManageRunserver) ... ok
test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runner_hostname (admin_scripts.tests.ManageRunserver) ... ok
test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver) ... ok
test_runserver_addrport (admin_scripts.tests.ManageRunserver) ... ok
test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts) ... FAIL
test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors) ... FAIL
test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors) ... FAIL
test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors) ... FAIL
test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors) ... FAIL
test_params_to_runserver (admin_scripts.tests.ManageTestserver) ... ok
test_testserver_handle_params (admin_scripts.tests.ManageTestserver) ... ok
test_importable_name (admin_scripts.tests.StartApp) ... FAIL
test_importable_target_name (admin_scripts.tests.StartApp) ... FAIL
test_invalid_name (admin_scripts.tests.StartApp)
startapp validates that app name is a valid Python identifier. ... test_invalid_target_name (admin_scripts.tests.StartApp) ... test_overlaying_app (admin_scripts.tests.StartApp) ... FAIL
test_custom_project_destination_missing (admin_scripts.tests.StartProject) ... FAIL
test_custom_project_template (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template ... FAIL
test_custom_project_template_context_variables (admin_scripts.tests.StartProject)
Make sure template context variables are rendered with proper values ... FAIL
test_custom_project_template_from_tarball_by_path (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template from a tarball ... FAIL
test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject) ... FAIL
test_custom_project_template_from_tarball_to_alternative_location (admin_scripts.tests.StartProject)
Startproject can use a project template from a tarball and create it in a specified location ... FAIL
test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject) ... FAIL
test_file_without_extension (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to render custom files ... FAIL
test_importable_project_name (admin_scripts.tests.StartProject) ... FAIL
test_invalid_project_name (admin_scripts.tests.StartProject)
Make sure the startproject management command validates a project name ... test_no_escaping_of_project_variables (admin_scripts.tests.StartProject)
Make sure template context variables are not html escaped ... FAIL
test_project_template_tarball_url (admin_scripts.tests.StartProject)
Startproject management command handles project template tar/zip balls from non-canonical urls ... FAIL
test_simple_project (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project ... FAIL
test_simple_project_different_directory (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project in a specific directory ... FAIL
test_template_dir_with_trailing_slash (admin_scripts.tests.StartProject)
Ticket 17475: Template dir passed has a trailing path separator ... FAIL
test_wrong_args (admin_scripts.tests.StartProject)
Make sure passing the wrong kinds of arguments outputs an error and prints usage ... FAIL

======================================================================
ERROR: test_program_name_from_argv (admin_scripts.tests.ExecuteFromCommandLine)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1880, in test_program_name_from_argv
    execute_from_command_line(['django-admin'] + args)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'

======================================================================
FAIL: test_option_then_setting (admin_scripts.tests.ArgumentOrder)
Options passed before settings are correctly handled.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1845, in test_option_then_setting
    self._test(args)
  File "/testbed/tests/admin_scripts/tests.py", line 1860, in _test
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_option_then_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options are correctly handled when they are passed before and after
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1856, in test_option_then_setting_then_option
    self._test(args, option_b="'y'")
  File "/testbed/tests/admin_scripts/tests.py", line 1860, in _test
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_setting_then_option (admin_scripts.tests.ArgumentOrder)
Options passed after settings are correctly handled.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1835, in test_setting_then_option
    self._test(args)
  File "/testbed/tests/admin_scripts/tests.py", line 1860, in _test
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_setting_then_short_option (admin_scripts.tests.ArgumentOrder)
Short options passed after settings are correctly handled.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1840, in test_setting_then_short_option
    self._test(args)
  File "/testbed/tests/admin_scripts/tests.py", line 1860, in _test
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_short_option_then_setting (admin_scripts.tests.ArgumentOrder)
Short options passed before settings are correctly handled.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1850, in test_short_option_then_setting
    self._test(args)
  File "/testbed/tests/admin_scripts/tests.py", line 1860, in _test
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_app_command (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1712, in test_app_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_app_command_invalid_app_label (admin_scripts.tests.CommandTypes)
User AppCommands can execute when a single app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1751, in test_app_command_invalid_app_label
    self.assertOutput(err, "No installed app with label 'NOT_AN_APP'.")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'NOT_AN_APP'." not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'No installed app with label 'NOT_AN_APP'.' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_app_command_multiple_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when multiple app names are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1731, in test_app_command_multiple_apps
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_app_command_no_apps (admin_scripts.tests.CommandTypes)
User AppCommands raise an error when no app name is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1725, in test_app_command_no_apps
    self.assertOutput(err, 'error: Enter at least one application label.')
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'error: Enter at least one application label.' not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'error: Enter at least one application label.' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_app_command_some_invalid_app_labels (admin_scripts.tests.CommandTypes)
User AppCommands can execute when some of the provided app names are invalid
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1757, in test_app_command_some_invalid_app_labels
    self.assertOutput(err, "No installed app with label 'NOT_AN_APP'.")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "No installed app with label 'NOT_AN_APP'." not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'No installed app with label 'NOT_AN_APP'.' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1581, in test_base_command
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1624, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command_multiple_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1593, in test_base_command_multiple_label
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1624, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command_no_label (admin_scripts.tests.CommandTypes)
User BaseCommands can execute when no labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1587, in test_base_command_no_label
    self._test_base_command(args, expected_labels)
  File "/testbed/tests/admin_scripts/tests.py", line 1624, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command_with_option (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with options when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1599, in test_base_command_with_option
    self._test_base_command(args, expected_labels, option_a="'x'")
  File "/testbed/tests/admin_scripts/tests.py", line 1624, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command_with_options (admin_scripts.tests.CommandTypes)
User BaseCommands can execute with multiple options when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1605, in test_base_command_with_options
    self._test_base_command(args, expected_labels, option_a="'x'", option_b="'y'")
  File "/testbed/tests/admin_scripts/tests.py", line 1624, in _test_base_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_base_command_with_wrong_option (admin_scripts.tests.CommandTypes)
User BaseCommands outputs command usage when wrong option is specified
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1611, in test_base_command_with_wrong_option
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_help (admin_scripts.tests.CommandTypes)
help is handled as a special case
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1429, in test_help
    self.assertOutput(out, "Type 'manage.py help <subcommand>' for help on a specific subcommand.")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Type 'manage.py help <subcommand>' for help on a specific subcommand." not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'Type 'manage.py help <subcommand>' for help on a specific subcommand.' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_help_commands (admin_scripts.tests.CommandTypes)
help --commands shows the list of all available commands
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1441, in test_help_commands
    self.assertOutput(out, 'startapp')
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'startapp' not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'startapp' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_label_command (admin_scripts.tests.CommandTypes)
User LabelCommands can execute when a label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1763, in test_label_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_label_command_multiple_label (admin_scripts.tests.CommandTypes)
User LabelCommands are executed multiple times if multiple labels are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1781, in test_label_command_multiple_label
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_label_command_no_label (admin_scripts.tests.CommandTypes)
User LabelCommands raise an error if no label is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1775, in test_label_command_no_label
    self.assertOutput(err, 'Enter at least one label')
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'Enter at least one label' not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'Enter at least one label' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_noargs (admin_scripts.tests.CommandTypes)
NoArg Commands can be executed
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1694, in test_noargs
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_noargs_with_args (admin_scripts.tests.CommandTypes)
NoArg Commands raise an error if an argument is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1706, in test_noargs_with_args
    self.assertOutput(err, "error: unrecognized arguments: argument")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'error: unrecognized arguments: argument' not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'error: unrecognized arguments: argument' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_specific_help (admin_scripts.tests.CommandTypes)
--help can be used on a specific command
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1459, in test_specific_help
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_version (admin_scripts.tests.CommandTypes)
version is handled as a special case
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1416, in test_version
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_all (admin_scripts.tests.DiffSettings)
The all option also shows settings with the default value.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2223, in test_all
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_basic (admin_scripts.tests.DiffSettings)
Runs without error and emits settings diff.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2200, in test_basic
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_default (admin_scripts.tests.DiffSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2234, in test_custom_default
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2215, in test_dynamic_settings_configured
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 517 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 20, in <module>
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_settings_configured (admin_scripts.tests.DiffSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2207, in test_settings_configured
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 516 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 9, in <module>
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_unified (admin_scripts.tests.DiffSettings)
--output=unified emits settings diff in unified mode.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2243, in test_unified
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_unified_all (admin_scripts.tests.DiffSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2257, in test_unified_all
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 419, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 447, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 440, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 433, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 426, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can't execute user commands unless settings are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 454, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 469, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminAlternateSettings)
alternate: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 462, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 220, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 248, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 241, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 234, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 227, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can't execute user commands if it isn't provided settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 255, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 270, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminDefaultSettings)
default: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 263, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 287, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 315, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 308, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if the environment contains settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 301, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin builtin commands succeed if a settings file is provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 294, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can't execute user commands unless settings are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 322, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 337, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminFullPathDefaultSettings)
fulldefault: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 330, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 353, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 381, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 374, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 367, in test_builtin_with_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin builtin commands fail if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 360, in test_builtin_with_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands unless settings are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 388, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 403, in test_custom_command_with_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMinimalSettings)
minimal: django-admin can't execute user commands, even if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 396, in test_custom_command_with_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 488, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 515, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 509, in test_builtin_with_bad_settings
    self.assertOutput(err, "No module named '?bad_settings'?", regex=True)
  File "/testbed/tests/admin_scripts/tests.py", line 157, in assertOutput
    "'%s' does not match actual output text '%s'" % (msg, stream)
AssertionError: unexpectedly None : 'No module named '?bad_settings'?' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 502, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 495, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can't execute user commands unless settings are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 522, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 537, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.DjangoAdminMultipleSettings)
alternate: django-admin can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 530, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 180, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 194, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminNoSettings)
no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 187, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_commands_with_invalid_settings (admin_scripts.tests.DjangoAdminNoSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 204, in test_commands_with_invalid_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 589, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 602, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 596, in test_builtin_with_bad_settings
    self.assertOutput(err, "No module named '?bad_settings'?", regex=True)
  File "/testbed/tests/admin_scripts/tests.py", line 157, in assertOutput
    "'%s' does not match actual output text '%s'" % (msg, stream)
AssertionError: unexpectedly None : 'No module named '?bad_settings'?' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 624, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 617, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: django-admin can't execute user commands unless settings are provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 609, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_setup_environ (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 556, in test_setup_environ
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_setup_environ_custom_template (admin_scripts.tests.DjangoAdminSettingsDirectory)
directory: startapp creates the correct directory with a custom template
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 569, in test_setup_environ_custom_template
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_startapp_unicode_name (admin_scripts.tests.DjangoAdminSettingsDirectory)
startapp creates the correct directory with Unicode characters.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 578, in test_startapp_unicode_name
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2303, in test_no_suggestions
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2297, in test_suggestions
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_pks_parsing (admin_scripts.tests.Dumpdata)
Regression for #20509
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2277, in test_pks_parsing
    self.assertOutput(err, "You can only use --pks option with one model")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'You can only use --pks option with one model' not found in 'Traceback (most recent call last):\n  File "./manage.py", line 22, in <module>\n    main()\n  File "./manage.py", line 18, in main\n    execute_from_command_line(sys.argv)\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'You can only use --pks option with one model' does not match actual output text 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_program_name_in_help (admin_scripts.tests.MainModule)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2286, in test_program_name_in_help
    self.assertOutput(out, "Type 'python -m django help <subcommand>' for help on a specific subcommand.")
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Type 'python -m django help <subcommand>' for help on a specific subcommand." not found in 'prog_name: __main__.py\nCommandParser prog: python -m django\n' : 'Type 'python -m django help <subcommand>' for help on a specific subcommand.' does not match actual output text 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail with an error when no default settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 875, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 903, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 896, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 889, in test_builtin_with_environment
    self.assertOutput(out, SYSTEM_CHECK_MSG)
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'System check identified no issues' not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'System check identified no issues' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py builtin commands work with settings provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 882, in test_builtin_with_settings
    self.assertOutput(out, SYSTEM_CHECK_MSG)
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'System check identified no issues' not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'System check identified no issues' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can't execute user commands without settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 910, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_output_color (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py output syntax color can be deactivated with the `--no-color` option
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 943, in test_custom_command_output_color
    "EXECUTE: noargs_command options=[('force_color', False), "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "EXECUTE: noargs_command options=[('force_color', False), ('no_color', True), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', False), ('verbosity', 1)]" not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'EXECUTE: noargs_command options=[('force_color', False), ('no_color', True), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', False), ('verbosity', 1)]' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 931, in test_custom_command_with_environment
    "EXECUTE: noargs_command options=[('force_color', False), "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "EXECUTE: noargs_command options=[('force_color', False), ('no_color', False), ('pythonpath', None), ('settings', None), ('traceback', False), ('verbosity', 1)]" not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'EXECUTE: noargs_command options=[('force_color', False), ('no_color', False), ('pythonpath', None), ('settings', None), ('traceback', False), ('verbosity', 1)]' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageAlternateSettings)
alternate: manage.py can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 919, in test_custom_command_with_settings
    "EXECUTE: noargs_command options=[('force_color', False), "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "EXECUTE: noargs_command options=[('force_color', False), ('no_color', False), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', False), ('verbosity', 1)]" not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'EXECUTE: noargs_command options=[('force_color', False), ('no_color', False), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', False), ('verbosity', 1)]' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_app_with_import (admin_scripts.tests.ManageCheck)
manage.py check does not raise errors when an app imports a base
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1158, in test_app_with_import
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_broken_app (admin_scripts.tests.ManageCheck)
manage.py check reports an ImportError if an app's models.py
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1097, in test_broken_app
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_complex_app (admin_scripts.tests.ManageCheck)
manage.py check does not raise an ImportError validating a
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1139, in test_complex_app
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_nonexistent_app (admin_scripts.tests.ManageCheck)
check reports an error on a nonexistent app in INSTALLED_APPS.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1085, in test_nonexistent_app
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_output_format (admin_scripts.tests.ManageCheck)
All errors/warnings should be sorted by level and by message.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1189, in test_output_format
    self.assertEqual(err, expected_err)
AssertionError: 'Traceback (most recent call last):\n  Fil[538 chars]\'\n' != 'SystemCheckError: System check identified[171 chars]).\n'
Diff is 818 characters long. Set self.maxDiff to None to see it.

======================================================================
FAIL: test_warning_does_not_halt (admin_scripts.tests.ManageCheck)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1220, in test_warning_does_not_halt
    self.assertEqual(err, expected_err)
AssertionError: 'Traceback (most recent call last):\n  Fil[538 chars]\'\n' != 'System check identified some issues:\n\nW[69 chars]).\n'
Diff is 712 characters long. Set self.maxDiff to None to see it.

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 680, in test_builtin_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 708, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 701, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 694, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 687, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 715, in test_custom_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 729, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageDefaultSettings)
default: manage.py can execute user commands when settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 722, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 745, in test_builtin_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 773, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 766, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 759, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 752, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when default settings are appropriate
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 780, in test_custom_command
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 794, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageFullPathDefaultSettings)
fulldefault: manage.py can execute user commands when settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 787, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 638, in test_non_existent_command_output
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 810, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 838, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 831, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 824, in test_builtin_with_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py builtin commands fail if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 817, in test_builtin_with_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands without appropriate settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 845, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 859, in test_custom_command_with_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageMinimalSettings)
minimal: manage.py can't execute user commands, even if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 852, in test_custom_command_with_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 965, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 993, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 986, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute builtin commands if settings are provided in the environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 979, in test_builtin_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py builtin commands succeed if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 972, in test_builtin_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can't execute user commands using default settings
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1000, in test_custom_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_custom_command_with_environment (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided in environment
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1014, in test_custom_command_with_environment
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_command_with_settings (admin_scripts.tests.ManageMultipleSettings)
multiple: manage.py can execute user commands if settings are provided as argument
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1007, in test_custom_command_with_settings
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_builtin_command (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail with an error when no settings provided
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 650, in test_builtin_command
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_environment (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 664, in test_builtin_with_bad_environment
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_builtin_with_bad_settings (admin_scripts.tests.ManageNoSettings)
no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 657, in test_builtin_with_bad_settings
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1350, in test_empty_allowed_hosts_error
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_attribute_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1049, in test_attribute_error
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_help (admin_scripts.tests.ManageSettingsWithSettingsErrors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1071, in test_help
    self.assertOutput(out, 'only Django core commands are listed')
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: 'only Django core commands are listed' not found in 'prog_name: manage.py\nCommandParser prog: manage.py\n' : 'only Django core commands are listed' does not match actual output text 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_import_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1037, in test_import_error
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1056, in test_key_error
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 51 != 0 : Stream should be empty: actually contains 'prog_name: manage.py
CommandParser prog: manage.py
'

======================================================================
FAIL: test_importable_name (admin_scripts.tests.StartApp)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2155, in test_importable_name
    "CommandError: 'os' conflicts with the name of an existing "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as an app name. Please try another name." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as an app name. Please try another name.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_importable_target_name (admin_scripts.tests.StartApp)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2175, in test_importable_target_name
    "CommandError: 'os' conflicts with the name of an existing Python "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as an app directory. Please try another directory." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as an app directory. Please try another directory.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_name (admin_scripts.tests.StartApp) (app_name='7testproject')
startapp validates that app name is a valid Python identifier.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2139, in test_invalid_name
    "sure the name is a valid identifier.".format(bad_name)
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: '7testproject' is not a valid app name. Please make sure the name is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: '7testproject' is not a valid app name. Please make sure the name is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_name (admin_scripts.tests.StartApp) (app_name='../testproject')
startapp validates that app name is a valid Python identifier.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2139, in test_invalid_name
    "sure the name is a valid identifier.".format(bad_name)
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: '../testproject' is not a valid app name. Please make sure the name is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: '../testproject' is not a valid app name. Please make sure the name is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_target_name (admin_scripts.tests.StartApp) [invalid.dir_name]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2168, in test_invalid_target_name
    "make sure the directory is a valid identifier." % bad_target
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: 'invalid.dir_name' is not a valid app directory. Please make sure the directory is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: 'invalid.dir_name' is not a valid app directory. Please make sure the directory is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_target_name (admin_scripts.tests.StartApp) [7invalid_dir_name]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2168, in test_invalid_target_name
    "make sure the directory is a valid identifier." % bad_target
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: '7invalid_dir_name' is not a valid app directory. Please make sure the directory is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: '7invalid_dir_name' is not a valid app directory. Please make sure the directory is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_target_name (admin_scripts.tests.StartApp) [.invalid_dir_name]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2168, in test_invalid_target_name
    "make sure the directory is a valid identifier." % bad_target
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: '.invalid_dir_name' is not a valid app directory. Please make sure the directory is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: '.invalid_dir_name' is not a valid app directory. Please make sure the directory is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_overlaying_app (admin_scripts.tests.StartApp)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2187, in test_overlaying_app
    "already exists. Overlaying an app into an existing directory "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "already exists. Overlaying an app into an existing directory won't replace conflicting files." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'already exists. Overlaying an app into an existing directory won't replace conflicting files.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_destination_missing (admin_scripts.tests.StartProject)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2103, in test_custom_project_destination_missing
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

======================================================================
FAIL: test_custom_project_template (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1980, in test_custom_project_template
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_template_context_variables (admin_scripts.tests.StartProject)
Make sure template context variables are rendered with proper values
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2068, in test_custom_project_template_context_variables
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_template_from_tarball_by_path (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to use a different project template from a tarball
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2002, in test_custom_project_template_from_tarball_by_path
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_template_from_tarball_by_url (admin_scripts.tests.StartProject)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2029, in test_custom_project_template_from_tarball_by_url
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_template_from_tarball_to_alternative_location (admin_scripts.tests.StartProject)
Startproject can use a project template from a tarball and create it in a specified location
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2014, in test_custom_project_template_from_tarball_to_alternative_location
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_custom_project_template_with_non_ascii_templates (admin_scripts.tests.StartProject)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2117, in test_custom_project_template_with_non_ascii_templates
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_file_without_extension (admin_scripts.tests.StartProject)
Make sure the startproject management command is able to render custom files
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2052, in test_file_without_extension
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_importable_project_name (admin_scripts.tests.StartProject)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1948, in test_importable_project_name
    "CommandError: 'os' conflicts with the name of an existing "
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'CommandError: 'os' conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_project_name (admin_scripts.tests.StartProject) (project_name='7testproject')
Make sure the startproject management command validates a project name
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1932, in test_invalid_project_name
    "sure the name is a valid identifier." % bad_name
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Error: '7testproject' is not a valid project name. Please make sure the name is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'Error: '7testproject' is not a valid project name. Please make sure the name is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_invalid_project_name (admin_scripts.tests.StartProject) (project_name='../testproject')
Make sure the startproject management command validates a project name
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1932, in test_invalid_project_name
    "sure the name is a valid identifier." % bad_name
  File "/testbed/tests/admin_scripts/tests.py", line 160, in assertOutput
    self.assertIn(msg, stream, "'%s' does not match actual output text '%s'" % (msg, stream))
AssertionError: "Error: '../testproject' is not a valid project name. Please make sure the name is a valid identifier." not found in 'Traceback (most recent call last):\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main\n    "__main__", mod_spec)\n  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code\n    exec(code, run_globals)\n  File "/testbed/django/__main__.py", line 9, in <module>\n    management.execute_from_command_line()\n  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line\n    utility.execute()\n  File "/testbed/django/core/management/__init__.py", line 364, in execute\n    handle_default_options(options)\n  File "/testbed/django/core/management/base.py", line 76, in handle_default_options\n    if options.settings:\nAttributeError: \'Namespace\' object has no attribute \'settings\'\n' : 'Error: '../testproject' is not a valid project name. Please make sure the name is a valid identifier.' does not match actual output text 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_no_escaping_of_project_variables (admin_scripts.tests.StartProject)
Make sure template context variables are not html escaped
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2088, in test_no_escaping_of_project_variables
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 567 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "./manage.py", line 22, in <module>
    main()
  File "./manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_project_template_tarball_url (admin_scripts.tests.StartProject)
Startproject management command handles project template tar/zip balls from non-canonical urls
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 2041, in test_project_template_tarball_url
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_simple_project (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1908, in test_simple_project
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_simple_project_different_directory (admin_scripts.tests.StartProject)
Make sure the startproject management command creates a project in a specific directory
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1961, in test_simple_project_different_directory
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_template_dir_with_trailing_slash (admin_scripts.tests.StartProject)
Ticket 17475: Template dir passed has a trailing path separator
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1991, in test_template_dir_with_trailing_slash
    self.assertNoOutput(err)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 768 != 0 : Stream should be empty: actually contains 'Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/testbed/django/__main__.py", line 9, in <module>
    management.execute_from_command_line()
  File "/testbed/django/core/management/__init__.py", line 425, in execute_from_command_line
    utility.execute()
  File "/testbed/django/core/management/__init__.py", line 364, in execute
    handle_default_options(options)
  File "/testbed/django/core/management/base.py", line 76, in handle_default_options
    if options.settings:
AttributeError: 'Namespace' object has no attribute 'settings'
'

======================================================================
FAIL: test_wrong_args (admin_scripts.tests.StartProject)
Make sure passing the wrong kinds of arguments outputs an error and prints usage
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/admin_scripts/tests.py", line 1898, in test_wrong_args
    self.assertNoOutput(out)
  File "/testbed/tests/admin_scripts/tests.py", line 150, in assertNoOutput
    self.assertEqual(len(stream), 0, "Stream should be empty: actually contains '%s'" % stream)
AssertionError: 60 != 0 : Stream should be empty: actually contains 'prog_name: __main__.py
CommandParser prog: python -m django
'

----------------------------------------------------------------------
Ran 196 tests in 21.684s

FAILED (failures=170, errors=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 0773837e15bb632afffb6848a58c59a791008fa1 tests/admin_scripts/tests.py
Updated 1 path from b2891298b7
