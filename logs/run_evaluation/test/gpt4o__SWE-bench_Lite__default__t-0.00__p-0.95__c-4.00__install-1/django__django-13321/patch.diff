
diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index 187e14b1b7..381c9b296b 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -1,4 +1,5 @@
 import base64
+import binascii
 import logging
 import string
 import warnings
@@ -119,10 +120,12 @@ class SessionBase:
     def decode(self, session_data):
         try:
             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
+        except (binascii.Error, ValueError, signing.BadSignature):
+            # Handle invalid padding, value errors, and bad signatures gracefully
+            return {}
         except Exception:
             return self._legacy_decode(session_data)
+            return self._legacy_decode(session_data)
 
     def _legacy_encode(self, session_dict):
         # RemovedInDjango40Warning.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..6cac1845e8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,29 @@
+from django.conf import settings
+from django.contrib.sessions.backends.base import SessionBase, CreateError
+
+# Configure settings
+settings.configure(SESSION_ENGINE='django.contrib.sessions.backends.db', SECRET_KEY='dummy')
+
+# Simulate invalid session data
+invalid_session_data = "invalid_session_data"
+
+# Create a session instance
+session = SessionBase()
+
+try:
+    # Attempt to decode the invalid session data
+    session.decode(invalid_session_data)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Simulate invalid session data
+invalid_session_data = "invalid_session_data"
+
+# Create a session instance
+session = SessionBase()
+
+try:
+    # Attempt to decode the invalid session data
+    session.decode(invalid_session_data)
+except Exception as e:
+    print(f"Error: {e}")
