
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..94a4d36a09 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1154,7 +1154,10 @@ class Exists(Subquery):
     def __init__(self, queryset, negated=False, **kwargs):
         self.negated = negated
         super().__init__(queryset, **kwargs)
-
+    def __rand__(self, other):
+        if isinstance(other, Q):
+            return other & self
+        return NotImplemented
     def __invert__(self):
         clone = self.copy()
         clone.negated = not self.negated
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..4b9177732d 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -6,6 +6,7 @@ large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
 import functools
+from django.db.models.expressions import Exists
 import inspect
 from collections import namedtuple
 
@@ -40,7 +41,8 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
+        if not isinstance(other, (Q, Exists)):
+            raise TypeError(other)
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cc7f334fb2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,29 @@
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Exists, Q
+
+# Minimal settings configuration
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+# Initialize Django
+django.setup()
+
+# Minimal Product model for testing
+class Product(models.Model):
+    class Meta:
+        app_label = 'myapp'
+try:
+    result = Q() & Exists(Product.objects.all())
+except TypeError as e:
+    print(f"TypeError: {e}")
