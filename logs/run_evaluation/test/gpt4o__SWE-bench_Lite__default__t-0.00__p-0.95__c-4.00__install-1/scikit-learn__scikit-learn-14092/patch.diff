
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index 8747844e5..1d2b48740 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -972,9 +972,29 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):
         If the parameter's value violates the given bounds.
     """
 
-    if not isinstance(x, target_type):
-        raise TypeError('`{}` must be an instance of {}, not {}.'
-                        .format(name, target_type, type(x)))
+    if isinstance(target_type, tuple):
+        if not any(np.issubdtype(type(x), t) if np.issubdtype(t, np.number) else isinstance(x, t) for t in target_type):
+            raise TypeError('`{}` must be an instance of {}, not {}.'
+                            .format(name, target_type, type(x)))
+    else:
+        if np.issubdtype(target_type, np.number):
+            if not np.issubdtype(type(x), target_type) and not isinstance(x, (int, float)):
+                raise TypeError('`{}` must be an instance of {}, not {}.'
+                                .format(name, target_type, type(x)))
+        else:
+            if not isinstance(x, target_type):
+                raise TypeError('`{}` must be an instance of {}, not {}.'
+                                .format(name, target_type, type(x)))
+                            .format(name, target_type, type(x)))
+    else:
+        if np.issubdtype(target_type, np.number):
+            if not np.issubdtype(type(x), target_type):
+                raise TypeError('`{}` must be an instance of {}, not {}.'
+                                .format(name, target_type, type(x)))
+        else:
+            if not isinstance(x, target_type):
+                raise TypeError('`{}` must be an instance of {}, not {}.'
+                                .format(name, target_type, type(x)))
 
     if min_val is not None and x < min_val:
         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))
