
diff --git a/tests/i18n/sampleproject/app_authors/__init__.py b/tests/i18n/sampleproject/app_authors/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/i18n/sampleproject/app_authors/admin.py b/tests/i18n/sampleproject/app_authors/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/tests/i18n/sampleproject/app_authors/apps.py b/tests/i18n/sampleproject/app_authors/apps.py
new file mode 100644
index 0000000000..c2ae9fe261
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class AppAuthorsConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "app_authors"
diff --git a/tests/i18n/sampleproject/app_authors/migrations/0001_initial.py b/tests/i18n/sampleproject/app_authors/migrations/0001_initial.py
new file mode 100644
index 0000000000..5068a83d21
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/migrations/0001_initial.py
@@ -0,0 +1,108 @@
+# Generated by Django 4.2.dev20220601171126 on 2024-11-04 13:37
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="DataSet",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.TextField(max_length=50)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Project",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.TextField(max_length=50)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ProjectDataSet",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "data_set",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.PROTECT,
+                        to="app_authors.dataset",
+                    ),
+                ),
+                (
+                    "project",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.PROTECT,
+                        to="app_authors.project",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("data_set", "project")},
+            },
+        ),
+        migrations.AddField(
+            model_name="project",
+            name="data_sets",
+            field=models.ManyToManyField(
+                through="app_authors.ProjectDataSet", to="app_authors.dataset"
+            ),
+        ),
+        migrations.CreateModel(
+            name="Authors",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("state", models.IntegerField()),
+                ("start_date", models.DateField()),
+                (
+                    "project_data_set",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.PROTECT,
+                        to="app_authors.projectdataset",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("project_data_set", "state", "start_date")},
+            },
+        ),
+    ]
diff --git a/tests/i18n/sampleproject/app_authors/migrations/__init__.py b/tests/i18n/sampleproject/app_authors/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/i18n/sampleproject/app_authors/models.py b/tests/i18n/sampleproject/app_authors/models.py
new file mode 100644
index 0000000000..3c23fe6bb4
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/models.py
@@ -0,0 +1,30 @@
+from django.db import models
+
+class DataSet(models.Model):
+    name = models.TextField(max_length=50)
+
+class Project(models.Model):
+    data_sets = models.ManyToManyField(
+        DataSet,
+        through='ProjectDataSet',
+    )
+    name = models.TextField(max_length=50)
+
+class ProjectDataSet(models.Model):
+    """
+    Cross table of data set and project
+    """
+    data_set = models.ForeignKey(DataSet, on_delete=models.PROTECT)
+    project = models.ForeignKey(Project, on_delete=models.PROTECT)
+    class Meta:
+        unique_together = (('data_set', 'project'),)
+
+class Authors(models.Model):
+    project_data_set = models.ForeignKey(
+        ProjectDataSet,
+        on_delete=models.PROTECT
+    )
+    state = models.IntegerField()
+    start_date = models.DateField()
+    class Meta:
+        unique_together = (('project_data_set', 'state', 'start_date'),)
diff --git a/tests/i18n/sampleproject/app_authors/tests.py b/tests/i18n/sampleproject/app_authors/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/tests/i18n/sampleproject/app_authors/views.py b/tests/i18n/sampleproject/app_authors/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/tests/i18n/sampleproject/app_authors/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/tests/i18n/sampleproject/sampleproject/settings.py b/tests/i18n/sampleproject/sampleproject/settings.py
index e69de29bb2..f9ae12f2d2 100644
--- a/tests/i18n/sampleproject/sampleproject/settings.py
+++ b/tests/i18n/sampleproject/sampleproject/settings.py
@@ -0,0 +1,33 @@
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'app_authors',
+]
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
