
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..95594ded83 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,20 +514,21 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)
 
     def __eq__(self, other):
-        # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            print(f"Comparing {self} with {other}")
+            print(f"self.model: {self.model}, other.model: {other.model}")
+            return (self.creation_counter == other.creation_counter and
+                    self.model == other.model)
+        return NotImplemented
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            return (self.creation_counter, self.model) < (other.creation_counter, other.model)
         return NotImplemented
-
     def __hash__(self):
-        return hash(self.creation_counter)
-
+        return hash((self.creation_counter, self.model))
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
         # intended to be altered after initial creation.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..868547385b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,24 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+
+from django.db import models
+from django.conf import settings
+from django.apps import apps
+
+apps.populate(settings.INSTALLED_APPS)
+
+class A(models.Model):
+    class Meta:
+        app_label = 'myapp'
+    myfield = models.IntegerField()
+
+class B(A):
+    class Meta:
+        app_label = 'myapp'
+
+class C(A):
+    class Meta:
+        app_label = 'myapp'
+
+print(len({B._meta.get_field('myfield'), C._meta.get_field('myfield')}))
+print(B._meta.get_field('myfield') == C._meta.get_field('myfield'))
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..0608295dc3
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,12 @@
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+USE_TZ = True
