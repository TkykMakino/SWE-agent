+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   astropy/io/ascii/qdp.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	pyproject.toml.orig

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 7269fa3e33e8d02485a647da91a5a2a60a06af61
Merge: 30869c3c7f 0996fa6323
Author: William Jamieson <wjamieson@stsci.edu>
Date:   Tue Apr 18 11:56:24 2023 -0400

    Merge pull request #14013 from WilliamJamieson/deprecate/Voigt1D_humlicek2_option

+ git diff 7269fa3e33e8d02485a647da91a5a2a60a06af61
diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py
index 83a4f004aa..d34d872b1d 100644
--- a/astropy/io/ascii/qdp.py
+++ b/astropy/io/ascii/qdp.py
@@ -69,7 +69,7 @@ def _line_type(line, delimiter=None):
     _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
     _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
     _line_type_re = re.compile(_type_re)
-    line = line.strip()
+    line = line.strip().upper()
     if not line:
         return "comment"
     match = _line_type_re.match(line)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]' --verbose
Using pip 24.0 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
Obtaining file:///testbed
  Installing build dependencies: started
  Running command pip subprocess to install build dependencies
  Collecting setuptools
    Downloading setuptools-75.3.0-py3-none-any.whl.metadata (6.9 kB)
  Collecting setuptools_scm>=6.2
    Using cached setuptools_scm-8.1.0-py3-none-any.whl.metadata (6.6 kB)
  Collecting wheel
    Using cached wheel-0.44.0-py3-none-any.whl.metadata (2.3 kB)
  Collecting cython==0.29.30
    Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata (2.8 kB)
  Collecting oldest-supported-numpy
    Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB)
  Collecting extension-helpers
    Downloading extension_helpers-1.2.0-py3-none-any.whl.metadata (2.2 kB)
  Collecting packaging>=20 (from setuptools_scm>=6.2)
    Using cached packaging-24.1-py3-none-any.whl.metadata (3.2 kB)
  Collecting typing-extensions (from setuptools_scm>=6.2)
    Using cached typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)
  Collecting tomli>=1 (from setuptools_scm>=6.2)
    Downloading tomli-2.0.2-py3-none-any.whl.metadata (10.0 kB)
  Collecting numpy==1.19.3 (from oldest-supported-numpy)
    Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata (2.0 kB)
  Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (2.0 MB)
  Downloading setuptools-75.3.0-py3-none-any.whl (1.3 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.3/1.3 MB 5.8 MB/s eta 0:00:00
  Using cached setuptools_scm-8.1.0-py3-none-any.whl (43 kB)
  Using cached wheel-0.44.0-py3-none-any.whl (67 kB)
  Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB)
  Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl (14.9 MB)
  Downloading extension_helpers-1.2.0-py3-none-any.whl (23 kB)
  Using cached packaging-24.1-py3-none-any.whl (53 kB)
  Downloading tomli-2.0.2-py3-none-any.whl (13 kB)
  Using cached typing_extensions-4.12.2-py3-none-any.whl (37 kB)
  Installing collected packages: wheel, typing-extensions, tomli, setuptools, packaging, numpy, cython, setuptools_scm, oldest-supported-numpy, extension-helpers
  ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
  astropy 5.3.dev882+g7269fa3e33.d20240922 requires numpy>=1.21, but you have numpy 1.19.3 which is incompatible.
  Successfully installed cython-0.29.30 extension-helpers-1.2.0 numpy-1.19.3 oldest-supported-numpy-2023.12.21 packaging-24.1 setuptools-75.3.0 setuptools_scm-8.1.0 tomli-2.0.2 typing-extensions-4.12.2 wheel-0.44.0
  WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Running command Checking if build backend supports build_editable
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Running command Getting requirements to build editable
  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
      main()
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
      json_out['return_val'] = hook(**hook_input['kwargs'])
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 132, in get_requires_for_build_editable
      return hook(config_settings)
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 482, in get_requires_for_build_editable
      return self.get_requires_for_build_wheel(config_settings)
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 333, in get_requires_for_build_wheel
      return self._get_build_requires(config_settings, requirements=[])
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 303, in _get_build_requires
      self.run_setup()
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 319, in run_setup
      exec(code, locals())
    File "<string>", line 69, in <module>
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 63, in get_extensions
      for setuppkg in iter_setup_packages(srcdir, packages):
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 159, in iter_setup_packages
      module = import_file(setup_package, name=packagename + ".setup_package")
    File "/tmp/pip-build-env-j4lz20jc/overlay/lib/python3.9/site-packages/extension_helpers/_utils.py", line 138, in import_file
      loader.exec_module(mod)
    File "<frozen importlib._bootstrap_external>", line 850, in exec_module
    File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
    File "astropy/wcs/setup_package.py", line 13, in <module>
      from setuptools.dep_util import newer_group
  ModuleNotFoundError: No module named 'setuptools.dep_util'
  error: subprocess-exited-with-error
  
  × Getting requirements to build editable did not run successfully.
  │ exit code: 1
  ╰─> See above for output.
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  full command: /opt/miniconda3/envs/testbed/bin/python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py get_requires_for_build_editable /tmp/tmp4vrf8id4
  cwd: /testbed
  Getting requirements to build editable: finished with status 'error'
error: subprocess-exited-with-error

× Getting requirements to build editable did not run successfully.
│ exit code: 1
╰─> See above for output.

note: This error originates from a subprocess, and is likely not a problem with pip.
+ git checkout 7269fa3e33e8d02485a647da91a5a2a60a06af61 astropy/io/ascii/tests/test_qdp.py
Updated 0 paths from fe91cbe1a0
+ git apply -v -
Checking patch astropy/io/ascii/tests/test_qdp.py...
Applied patch astropy/io/ascii/tests/test_qdp.py cleanly.
+ pytest -rA astropy/io/ascii/tests/test_qdp.py
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 80 from C header, got 96 from PyObject
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.19, pytest-7.4.0, pluggy-1.3.0

Running tests with Astropy version 5.3.dev882+g7269fa3e33.d20240922.
Running tests in astropy/io/ascii/tests/test_qdp.py.

Date: 2024-11-04T22:18:19

Platform: Linux-6.8.0-47-generic-x86_64-with-glibc2.35

Executable: /opt/miniconda3/envs/testbed/bin/python

Full Python Version: 
3.9.19 (main, May  6 2024, 19:43:03) 
[GCC 11.2.0]

encodings: sys: utf-8, locale: UTF-8, filesystem: utf-8
byteorder: little
float info: dig: 15, mant_dig: 15

Package versions: 
Numpy: 1.25.2
Scipy: not available
Matplotlib: not available
h5py: not available
Pandas: not available
PyERFA: 2.0.0.3
Cython: not available
Scikit-image: not available
asdf: not available
pyarrow: not available

Using Astropy options: remote_data: none.

CI: undefined
ARCH_ON_CI: undefined
IS_CRON: undefined

rootdir: /testbed
configfile: setup.cfg
plugins: hypothesis-6.82.6, xdist-3.3.1, cov-4.1.0, remotedata-0.4.0, mock-3.11.1, astropy-0.10.0, filter-subpackage-0.1.2, openfiles-0.5.0, astropy-header-0.2.2, doctestplus-1.0.0, arraydiff-0.5.0
collected 9 items

astropy/io/ascii/tests/test_qdp.py [31mF[0m[32m.[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[32m.[0m[32m.[0m[31m                             [100%][0m

=================================== FAILURES ===================================
[31m[1m________________________ test_get_tables_from_qdp_file _________________________[0m

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_get_tables_from_qdp_file0')

    def test_get_tables_from_qdp_file(tmp_path):
        example_qdp = """
        ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2
        ! Columns are as labelled
        READ TERR 1
        READ SERR 2
        ! WT -- hard data
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.212439       0.212439
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000
        NO NO NO NO NO
        ! WT -- soft data
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592
        NO NO NO NO NO
        ! WT -- hardness ratio
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        -nan
        """
    
        path = tmp_path / "test.qdp"
    
        with open(path, "w") as fp:
            print(example_qdp, file=fp)
    
>       table0 = _read_table_qdp(fp.name, names=["MJD", "Rate"], table_id=0)

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
[1m[31mastropy/io/ascii/qdp.py[0m:259: in _get_tables_from_qdp_file
    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
[1m[31mastropy/io/ascii/qdp.py[0m:122: in _get_type_from_list_of_lines
    types = [_line_type(line, delimiter=delimiter) for line in lines]
[1m[31mastropy/io/ascii/qdp.py[0m:122: in <listcomp>
    types = [_line_type(line, delimiter=delimiter) for line in lines]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '55045.099887 1.14467592592593E-05    -1.14467592592593E-05   0.000000        -NAN'
delimiter = None

    def _line_type(line, delimiter=None):
        """Interpret a QDP file line.
    
        Parameters
        ----------
        line : str
            a single line of the file
    
        Returns
        -------
        type : str
            Line type: "comment", "command", or "data"
    
        Examples
        --------
        >>> _line_type("READ SERR 3")
        'command'
        >>> _line_type(" \\n    !some gibberish")
        'comment'
        >>> _line_type("   ")
        'comment'
        >>> _line_type(" 21345.45")
        'data,1'
        >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
        'data,6'
        >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
        'data,6'
        >>> _line_type(" 21345.45 ! a comment to disturb")
        'data,1'
        >>> _line_type("NO NO NO NO NO")
        'new'
        >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
        'new'
        >>> _line_type("N O N NOON OON O")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        >>> _line_type(" some non-comment gibberish")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        """
        _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
        _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
    
        sep = delimiter
        if delimiter is None:
            sep = r"\s+"
        _new_re = rf"NO({sep}NO)+"
        _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
        _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
        _line_type_re = re.compile(_type_re)
        line = line.strip().upper()
        if not line:
            return "comment"
        match = _line_type_re.match(line)
    
        if match is None:
>           raise ValueError(f"Unrecognized QDP line: {line}")
[1m[31mE           ValueError: Unrecognized QDP line: 55045.099887 1.14467592592593E-05    -1.14467592592593E-05   0.000000        -NAN[0m

[1m[31mastropy/io/ascii/qdp.py[0m:78: ValueError
[31m[1m_____________________________ test_roundtrip[True] _____________________________[0m

qdp_file = '/tmp/pytest-of-root/pytest-0/test_roundtrip_True_0/test.qdp'
input_colnames = ['MJD', 'Rate'], delimiter = None

    def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):
        """Get all tables from a QDP file.
    
        Parameters
        ----------
        qdp_file : str
            Input QDP file name
    
        Other Parameters
        ----------------
        input_colnames : list of str
            Name of data columns (defaults to ['col1', 'col2', ...]), _not_
            including error columns.
        delimiter : str
            Delimiter for the values in the table.
    
        Returns
        -------
        list of `~astropy.table.Table`
            List containing all the tables present inside the QDP file
        """
        lines = _get_lines_from_file(qdp_file)
        contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
    
        table_list = []
        err_specs = {}
        colnames = None
    
        comment_text = ""
        initial_comments = ""
        command_lines = ""
        current_rows = None
    
        for line, datatype in zip(lines, contents):
            line = line.strip().lstrip("!")
            # Is this a comment?
            if datatype == "comment":
                comment_text += line + "\n"
                continue
    
            if datatype == "command":
                # The first time I find commands, I save whatever comments into
                # The initial comments.
                if command_lines == "":
                    initial_comments = comment_text
                    comment_text = ""
    
                if err_specs != {}:
                    warnings.warn(
                        "This file contains multiple command blocks. Please verify",
                        AstropyUserWarning,
                    )
                command_lines += line + "\n"
                continue
    
            if datatype.startswith("data"):
                # The first time I find data, I define err_specs
                if err_specs == {} and command_lines != "":
                    for cline in command_lines.strip().split("\n"):
                        command = cline.strip().split()
                        # This should never happen, but just in case.
                        if len(command) < 3:
                            continue
                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]
                if colnames is None:
                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)
    
                if current_rows is None:
                    current_rows = []
    
                values = []
                for v in line.split(delimiter):
                    if v == "NO":
                        values.append(np.ma.masked)
                    else:
                        # Understand if number is int or float
                        try:
>                           values.append(int(v))
[1m[31mE                           ValueError: invalid literal for int() with base 10: 'no'[0m

[1m[31mastropy/io/ascii/qdp.py[0m:314: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_roundtrip_True_0')
lowercase = True

    @pytest.mark.parametrize("lowercase", [False, True])
    def test_roundtrip(tmp_path, lowercase):
        example_qdp = """
        ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2
        ! Columns are as labelled
        READ TERR 1
        READ SERR 2
        ! WT -- hard data
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000
        NO NO NO NO NO
        ! WT -- soft data
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592
        NO NO NO NO NO
        ! WT -- hardness ratio
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935
        55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO
        ! Add command, just to raise the warning.
        READ TERR 1
        ! WT -- whatever
        !MJD            Err (pos)       Err(neg)        Rate            Error
        53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935
        NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO
        """
        if lowercase:
            example_qdp = lowercase_header(example_qdp)
    
        path = str(tmp_path / "test.qdp")
        path2 = str(tmp_path / "test2.qdp")
    
        with open(path, "w") as fp:
            print(example_qdp, file=fp)
        with pytest.warns(AstropyUserWarning) as record:
>           table = _read_table_qdp(path, names=["MJD", "Rate"], table_id=0)

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

qdp_file = '/tmp/pytest-of-root/pytest-0/test_roundtrip_True_0/test.qdp'
input_colnames = ['MJD', 'Rate'], delimiter = None

    def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):
        """Get all tables from a QDP file.
    
        Parameters
        ----------
        qdp_file : str
            Input QDP file name
    
        Other Parameters
        ----------------
        input_colnames : list of str
            Name of data columns (defaults to ['col1', 'col2', ...]), _not_
            including error columns.
        delimiter : str
            Delimiter for the values in the table.
    
        Returns
        -------
        list of `~astropy.table.Table`
            List containing all the tables present inside the QDP file
        """
        lines = _get_lines_from_file(qdp_file)
        contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
    
        table_list = []
        err_specs = {}
        colnames = None
    
        comment_text = ""
        initial_comments = ""
        command_lines = ""
        current_rows = None
    
        for line, datatype in zip(lines, contents):
            line = line.strip().lstrip("!")
            # Is this a comment?
            if datatype == "comment":
                comment_text += line + "\n"
                continue
    
            if datatype == "command":
                # The first time I find commands, I save whatever comments into
                # The initial comments.
                if command_lines == "":
                    initial_comments = comment_text
                    comment_text = ""
    
                if err_specs != {}:
                    warnings.warn(
                        "This file contains multiple command blocks. Please verify",
                        AstropyUserWarning,
                    )
                command_lines += line + "\n"
                continue
    
            if datatype.startswith("data"):
                # The first time I find data, I define err_specs
                if err_specs == {} and command_lines != "":
                    for cline in command_lines.strip().split("\n"):
                        command = cline.strip().split()
                        # This should never happen, but just in case.
                        if len(command) < 3:
                            continue
                        err_specs[command[1].lower()] = [int(c) for c in command[2:]]
                if colnames is None:
                    colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)
    
                if current_rows is None:
                    current_rows = []
    
                values = []
                for v in line.split(delimiter):
                    if v == "NO":
                        values.append(np.ma.masked)
                    else:
                        # Understand if number is int or float
                        try:
                            values.append(int(v))
                        except ValueError:
>                           values.append(float(v))
[1m[31mE                           ValueError: could not convert string to float: 'no'[0m

[1m[31mastropy/io/ascii/qdp.py[0m:316: ValueError
[31m[1m______________________________ test_read_example _______________________________[0m

    def test_read_example():
        example_qdp = """
            ! Initial comment line 1
            ! Initial comment line 2
            READ TERR 1
            READ SERR 3
            ! Table 0 comment
            !a a(pos) a(neg) b c ce d
            53000.5   0.25  -0.5   1  1.5  3.5 2
            54000.5   1.25  -1.5   2  2.5  4.5 3
            NO NO NO NO NO
            ! Table 1 comment
            !a a(pos) a(neg) b c ce d
            54000.5   2.25  -2.5   NO  3.5  5.5 5
            55000.5   3.25  -3.5   4  4.5  6.5 nan
            """
>       dat = ascii.read(example_qdp, format="qdp", table_id=1, names=["a", "b", "c", "d"])

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/io/ascii/ui.py[0m:426: in read
    dat = reader.read(table)
[1m[31mastropy/io/ascii/qdp.py[0m:632: in read
    return _read_table_qdp(
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
[1m[31mastropy/io/ascii/qdp.py[0m:259: in _get_tables_from_qdp_file
    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
[1m[31mastropy/io/ascii/qdp.py[0m:122: in _get_type_from_list_of_lines
    types = [_line_type(line, delimiter=delimiter) for line in lines]
[1m[31mastropy/io/ascii/qdp.py[0m:122: in <listcomp>
    types = [_line_type(line, delimiter=delimiter) for line in lines]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '55000.5   3.25  -3.5   4  4.5  6.5 NAN', delimiter = None

    def _line_type(line, delimiter=None):
        """Interpret a QDP file line.
    
        Parameters
        ----------
        line : str
            a single line of the file
    
        Returns
        -------
        type : str
            Line type: "comment", "command", or "data"
    
        Examples
        --------
        >>> _line_type("READ SERR 3")
        'command'
        >>> _line_type(" \\n    !some gibberish")
        'comment'
        >>> _line_type("   ")
        'comment'
        >>> _line_type(" 21345.45")
        'data,1'
        >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
        'data,6'
        >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
        'data,6'
        >>> _line_type(" 21345.45 ! a comment to disturb")
        'data,1'
        >>> _line_type("NO NO NO NO NO")
        'new'
        >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
        'new'
        >>> _line_type("N O N NOON OON O")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        >>> _line_type(" some non-comment gibberish")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        """
        _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
        _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
    
        sep = delimiter
        if delimiter is None:
            sep = r"\s+"
        _new_re = rf"NO({sep}NO)+"
        _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
        _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
        _line_type_re = re.compile(_type_re)
        line = line.strip().upper()
        if not line:
            return "comment"
        match = _line_type_re.match(line)
    
        if match is None:
>           raise ValueError(f"Unrecognized QDP line: {line}")
[1m[31mE           ValueError: Unrecognized QDP line: 55000.5   3.25  -3.5   4  4.5  6.5 NAN[0m

[1m[31mastropy/io/ascii/qdp.py[0m:78: ValueError
[31m[1m____________________________ test_roundtrip_example ____________________________[0m

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_roundtrip_example0')

    def test_roundtrip_example(tmp_path):
        example_qdp = """
            ! Initial comment line 1
            ! Initial comment line 2
            READ TERR 1
            READ SERR 3
            ! Table 0 comment
            !a a(pos) a(neg) b c ce d
            53000.5   0.25  -0.5   1  1.5  3.5 2
            54000.5   1.25  -1.5   2  2.5  4.5 3
            NO NO NO NO NO
            ! Table 1 comment
            !a a(pos) a(neg) b c ce d
            54000.5   2.25  -2.5   NO  3.5  5.5 5
            55000.5   3.25  -3.5   4  4.5  6.5 nan
            """
        test_file = tmp_path / "test.qdp"
    
>       t = Table.read(
            example_qdp, format="ascii.qdp", table_id=1, names=["a", "b", "c", "d"]
        )

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/table/connect.py[0m:62: in __call__
    out = self.registry.read(cls, *args, **kwargs)
[1m[31mastropy/io/registry/core.py[0m:218: in read
    data = reader(*args, **kwargs)
[1m[31mastropy/io/ascii/connect.py[0m:19: in io_read
    return read(filename, **kwargs)
[1m[31mastropy/io/ascii/ui.py[0m:426: in read
    dat = reader.read(table)
[1m[31mastropy/io/ascii/qdp.py[0m:632: in read
    return _read_table_qdp(
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
[1m[31mastropy/io/ascii/qdp.py[0m:259: in _get_tables_from_qdp_file
    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
[1m[31mastropy/io/ascii/qdp.py[0m:122: in _get_type_from_list_of_lines
    types = [_line_type(line, delimiter=delimiter) for line in lines]
[1m[31mastropy/io/ascii/qdp.py[0m:122: in <listcomp>
    types = [_line_type(line, delimiter=delimiter) for line in lines]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '55000.5   3.25  -3.5   4  4.5  6.5 NAN', delimiter = None

    def _line_type(line, delimiter=None):
        """Interpret a QDP file line.
    
        Parameters
        ----------
        line : str
            a single line of the file
    
        Returns
        -------
        type : str
            Line type: "comment", "command", or "data"
    
        Examples
        --------
        >>> _line_type("READ SERR 3")
        'command'
        >>> _line_type(" \\n    !some gibberish")
        'comment'
        >>> _line_type("   ")
        'comment'
        >>> _line_type(" 21345.45")
        'data,1'
        >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
        'data,6'
        >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
        'data,6'
        >>> _line_type(" 21345.45 ! a comment to disturb")
        'data,1'
        >>> _line_type("NO NO NO NO NO")
        'new'
        >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
        'new'
        >>> _line_type("N O N NOON OON O")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        >>> _line_type(" some non-comment gibberish")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        """
        _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
        _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
    
        sep = delimiter
        if delimiter is None:
            sep = r"\s+"
        _new_re = rf"NO({sep}NO)+"
        _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
        _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
        _line_type_re = re.compile(_type_re)
        line = line.strip().upper()
        if not line:
            return "comment"
        match = _line_type_re.match(line)
    
        if match is None:
>           raise ValueError(f"Unrecognized QDP line: {line}")
[1m[31mE           ValueError: Unrecognized QDP line: 55000.5   3.25  -3.5   4  4.5  6.5 NAN[0m

[1m[31mastropy/io/ascii/qdp.py[0m:78: ValueError
[31m[1m_________________________ test_roundtrip_example_comma _________________________[0m

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_roundtrip_example_comma0')

    def test_roundtrip_example_comma(tmp_path):
        example_qdp = """
            ! Initial comment line 1
            ! Initial comment line 2
            READ TERR 1
            READ SERR 3
            ! Table 0 comment
            !a,a(pos),a(neg),b,c,ce,d
            53000.5,0.25,-0.5,1,1.5,3.5,2
            54000.5,1.25,-1.5,2,2.5,4.5,3
            NO,NO,NO,NO,NO
            ! Table 1 comment
            !a,a(pos),a(neg),b,c,ce,d
            54000.5,2.25,-2.5,NO,3.5,5.5,5
            55000.5,3.25,-3.5,4,4.5,6.5,nan
            """
        test_file = tmp_path / "test.qdp"
    
>       t = Table.read(
            example_qdp, format="ascii.qdp", table_id=1, names=["a", "b", "c", "d"], sep=","
        )

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/table/connect.py[0m:62: in __call__
    out = self.registry.read(cls, *args, **kwargs)
[1m[31mastropy/io/registry/core.py[0m:218: in read
    data = reader(*args, **kwargs)
[1m[31mastropy/io/ascii/connect.py[0m:19: in io_read
    return read(filename, **kwargs)
[1m[31mastropy/io/ascii/ui.py[0m:426: in read
    dat = reader.read(table)
[1m[31mastropy/io/ascii/qdp.py[0m:632: in read
    return _read_table_qdp(
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
[1m[31mastropy/io/ascii/qdp.py[0m:259: in _get_tables_from_qdp_file
    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
[1m[31mastropy/io/ascii/qdp.py[0m:122: in _get_type_from_list_of_lines
    types = [_line_type(line, delimiter=delimiter) for line in lines]
[1m[31mastropy/io/ascii/qdp.py[0m:122: in <listcomp>
    types = [_line_type(line, delimiter=delimiter) for line in lines]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '55000.5,3.25,-3.5,4,4.5,6.5,NAN', delimiter = ','

    def _line_type(line, delimiter=None):
        """Interpret a QDP file line.
    
        Parameters
        ----------
        line : str
            a single line of the file
    
        Returns
        -------
        type : str
            Line type: "comment", "command", or "data"
    
        Examples
        --------
        >>> _line_type("READ SERR 3")
        'command'
        >>> _line_type(" \\n    !some gibberish")
        'comment'
        >>> _line_type("   ")
        'comment'
        >>> _line_type(" 21345.45")
        'data,1'
        >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
        'data,6'
        >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
        'data,6'
        >>> _line_type(" 21345.45 ! a comment to disturb")
        'data,1'
        >>> _line_type("NO NO NO NO NO")
        'new'
        >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
        'new'
        >>> _line_type("N O N NOON OON O")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        >>> _line_type(" some non-comment gibberish")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        """
        _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
        _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
    
        sep = delimiter
        if delimiter is None:
            sep = r"\s+"
        _new_re = rf"NO({sep}NO)+"
        _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
        _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
        _line_type_re = re.compile(_type_re)
        line = line.strip().upper()
        if not line:
            return "comment"
        match = _line_type_re.match(line)
    
        if match is None:
>           raise ValueError(f"Unrecognized QDP line: {line}")
[1m[31mE           ValueError: Unrecognized QDP line: 55000.5,3.25,-3.5,4,4.5,6.5,NAN[0m

[1m[31mastropy/io/ascii/qdp.py[0m:78: ValueError
[31m[1m____________________________ test_read_write_simple ____________________________[0m

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_read_write_simple0')

    def test_read_write_simple(tmp_path):
        test_file = tmp_path / "test.qdp"
        t1 = Table()
        t1.add_column(Column(name="a", data=[1, 2, 3, 4]))
        t1.add_column(
            MaskedColumn(
                data=[4.0, np.nan, 3.0, 1.0], name="b", mask=[False, False, False, True]
            )
        )
        t1.write(test_file, format="ascii.qdp")
        with pytest.warns(UserWarning) as record:
>           t2 = Table.read(test_file, format="ascii.qdp")

[1m[31mastropy/io/ascii/tests/test_qdp.py[0m:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mastropy/table/connect.py[0m:62: in __call__
    out = self.registry.read(cls, *args, **kwargs)
[1m[31mastropy/io/registry/core.py[0m:218: in read
    data = reader(*args, **kwargs)
[1m[31mastropy/io/ascii/connect.py[0m:19: in io_read
    return read(filename, **kwargs)
[1m[31mastropy/io/ascii/ui.py[0m:426: in read
    dat = reader.read(table)
[1m[31mastropy/io/ascii/qdp.py[0m:632: in read
    return _read_table_qdp(
[1m[31mastropy/io/ascii/qdp.py[0m:418: in _read_table_qdp
    tables = _get_tables_from_qdp_file(
[1m[31mastropy/io/ascii/qdp.py[0m:259: in _get_tables_from_qdp_file
    contents, ncol = _get_type_from_list_of_lines(lines, delimiter=delimiter)
[1m[31mastropy/io/ascii/qdp.py[0m:122: in _get_type_from_list_of_lines
    types = [_line_type(line, delimiter=delimiter) for line in lines]
[1m[31mastropy/io/ascii/qdp.py[0m:122: in <listcomp>
    types = [_line_type(line, delimiter=delimiter) for line in lines]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

line = '2 NAN', delimiter = None

    def _line_type(line, delimiter=None):
        """Interpret a QDP file line.
    
        Parameters
        ----------
        line : str
            a single line of the file
    
        Returns
        -------
        type : str
            Line type: "comment", "command", or "data"
    
        Examples
        --------
        >>> _line_type("READ SERR 3")
        'command'
        >>> _line_type(" \\n    !some gibberish")
        'comment'
        >>> _line_type("   ")
        'comment'
        >>> _line_type(" 21345.45")
        'data,1'
        >>> _line_type(" 21345.45 1.53e-3 1e-3 .04 NO nan")
        'data,6'
        >>> _line_type(" 21345.45,1.53e-3,1e-3,.04,NO,nan", delimiter=',')
        'data,6'
        >>> _line_type(" 21345.45 ! a comment to disturb")
        'data,1'
        >>> _line_type("NO NO NO NO NO")
        'new'
        >>> _line_type("NO,NO,NO,NO,NO", delimiter=',')
        'new'
        >>> _line_type("N O N NOON OON O")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        >>> _line_type(" some non-comment gibberish")
        Traceback (most recent call last):
            ...
        ValueError: Unrecognized QDP line...
        """
        _decimal_re = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?"
        _command_re = r"READ [TS]ERR(\s+[0-9]+)+"
    
        sep = delimiter
        if delimiter is None:
            sep = r"\s+"
        _new_re = rf"NO({sep}NO)+"
        _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
        _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
        _line_type_re = re.compile(_type_re)
        line = line.strip().upper()
        if not line:
            return "comment"
        match = _line_type_re.match(line)
    
        if match is None:
>           raise ValueError(f"Unrecognized QDP line: {line}")
[1m[31mE           ValueError: Unrecognized QDP line: 2 NAN[0m

[1m[31mastropy/io/ascii/qdp.py[0m:78: ValueError
==================================== PASSES ====================================
[36m[1m=========================== short test summary info ============================[0m
[32mPASSED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_roundtrip[False][0m
[32mPASSED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_read_write_simple_specify_name[0m
[32mPASSED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_get_lines_from_qdp[0m
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_get_tables_from_qdp_file[0m - ValueError: Unrecognized QDP line: 55045.099887 1.14467592592593E-05    -1....
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_roundtrip[True][0m - ValueError: could not convert string to float: 'no'
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_read_example[0m - ValueError: Unrecognized QDP line: 55000.5   3.25  -3.5   4  4.5  6.5 NAN
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_roundtrip_example[0m - ValueError: Unrecognized QDP line: 55000.5   3.25  -3.5   4  4.5  6.5 NAN
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_roundtrip_example_comma[0m - ValueError: Unrecognized QDP line: 55000.5,3.25,-3.5,4,4.5,6.5,NAN
[31mFAILED[0m astropy/io/ascii/tests/test_qdp.py::[1mtest_read_write_simple[0m - ValueError: Unrecognized QDP line: 2 NAN
[31m========================= [31m[1m6 failed[0m, [32m3 passed[0m[31m in 0.23s[0m[31m ==========================[0m
+ git checkout 7269fa3e33e8d02485a647da91a5a2a60a06af61 astropy/io/ascii/tests/test_qdp.py
Updated 1 path from fe91cbe1a0
