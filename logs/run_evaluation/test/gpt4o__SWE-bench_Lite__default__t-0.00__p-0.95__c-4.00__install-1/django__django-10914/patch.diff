
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..b7d39604e4
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,45 @@
+SECRET_KEY = 'test_secret_key'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'django__django.tests.file_storage',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+MIDDLEWARE = [
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+FILE_UPLOAD_HANDLERS = [
+    'django.core.files.uploadhandler.MemoryFileUploadHandler',
+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
+]
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+APP_CONFIG = 'django__django.apps.DjangoConfig'
diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py
index 434869554c..02030dda95 100644
--- a/tests/file_storage/tests.py
+++ b/tests/file_storage/tests.py
@@ -1,4 +1,59 @@
+SECRET_KEY = 'test_secret_key'
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'django__django.tests.file_storage',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
 import os
+import tempfile
+import django
+
+from django.core.files.uploadedfile import SimpleUploadedFile
+from django.core.files.storage import FileSystemStorage
+from django.test import SimpleTestCase
+
+class FileStorageTests(SimpleTestCase):
+    storage_class = FileSystemStorage
+
+    def setUp(self):
+        self.temp_dir = tempfile.mkdtemp()
+        self.storage = self.storage_class(location=self.temp_dir, base_url='/test_media_url/')
+        # Set up a second temporary directory which is ensured to have a mixed
+        # case name.
+        self.temp_dir2 = tempfile.mkdtemp(suffix='aBc')
+
+    def tearDown(self):
+        shutil.rmtree(self.temp_dir)
+        shutil.rmtree(self.temp_dir2)
+
+    def test_file_upload_permissions(self):
+        # Create a temporary file
+        temp_file = tempfile.NamedTemporaryFile(delete=False)
+        temp_file.write(b'Test content')
+        temp_file.close()
+
+        # Upload the file using FileSystemStorage
+        uploaded_file = SimpleUploadedFile(temp_file.name, b'Test content')
+        self.storage.save('test_file.txt', uploaded_file)
+
+        # Check the file permissions
+        file_path = os.path.join(self.temp_dir, 'test_file.txt')
+        file_permissions = oct(os.stat(file_path).st_mode & 0o777)
+        print(f"File permissions: {file_permissions}")
+
+        # Clean up
+        os.remove(temp_file.name)
+        os.remove(file_path)
 import shutil
 import sys
 import tempfile
@@ -97,27 +152,24 @@ class FileStorageTests(SimpleTestCase):
         self.temp_dir2 = tempfile.mkdtemp(suffix='aBc')
 
     def tearDown(self):
-        shutil.rmtree(self.temp_dir)
-        shutil.rmtree(self.temp_dir2)
-
-    def test_empty_location(self):
-        """
-        Makes sure an exception is raised if the location is empty
-        """
-        storage = self.storage_class(location='')
-        self.assertEqual(storage.base_location, '')
-        self.assertEqual(storage.location, os.getcwd())
-
-    def test_file_access_options(self):
-        """
-        Standard file access options are available, and work as expected.
-        """
-        self.assertFalse(self.storage.exists('storage_test'))
-        f = self.storage.open('storage_test', 'w')
-        f.write('storage contents')
-        f.close()
-        self.assertTrue(self.storage.exists('storage_test'))
-
+        def test_file_upload_permissions(self):
+            # Create a temporary file
+            temp_file = tempfile.NamedTemporaryFile(delete=False)
+            temp_file.write(b'Test content')
+            temp_file.close()
+
+            # Upload the file using FileSystemStorage
+            uploaded_file = SimpleUploadedFile(temp_file.name, b'Test content')
+            self.storage.save('test_file.txt', uploaded_file)
+
+            # Check the file permissions
+            file_path = os.path.join(self.temp_dir, 'test_file.txt')
+            file_permissions = oct(os.stat(file_path).st_mode & 0o777)
+            print(f"File permissions: {file_permissions}")
+
+            # Clean up
+            os.remove(temp_file.name)
+            os.remove(file_path)
         f = self.storage.open('storage_test', 'r')
         self.assertEqual(f.read(), 'storage contents')
         f.close()
