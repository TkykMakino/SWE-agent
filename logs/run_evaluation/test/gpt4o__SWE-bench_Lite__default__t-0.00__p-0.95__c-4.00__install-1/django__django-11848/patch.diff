
diff --git a/django/utils/http.py b/django/utils/http.py
index 572cfb4347..1db8e54b9e 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -1,4 +1,19 @@
 import base64
+from django.utils.http import parse_http_date
+
+# Test dates with two-digit years
+dates = [
+    "Sunday, 06-Nov-94 08:49:37 GMT",  # Should be 1994
+    "Sunday, 06-Nov-70 08:49:37 GMT",  # Should be 1970
+    "Sunday, 06-Nov-69 08:49:37 GMT",  # Should be 2069
+    "Sunday, 06-Nov-00 08:49:37 GMT",  # Should be 2000
+]
+
+for date in dates:
+    try:
+        print(f"{date} -> {parse_http_date(date)}")
+    except ValueError as e:
+        print(f"Error parsing {date}: {e}")
 import calendar
 import datetime
 import re
@@ -168,18 +183,22 @@ def parse_http_date(date):
     # RFC7231 makes it mandatory to support RFC850 dates too. So we roll
     # our own RFC-compliant parsing.
     for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:
+        print(f"Trying regex: {regex.pattern}")
         m = regex.match(date)
         if m is not None:
             break
+            break
     else:
         raise ValueError("%r is not in a valid HTTP date format" % date)
     try:
         year = int(m.group('year'))
         if year < 100:
-            if year < 70:
-                year += 2000
+            current_year = datetime.datetime.now().year
+            current_century = current_year // 100 * 100
+            if year + current_century > current_year + 50:
+                year += current_century - 100
             else:
-                year += 1900
+                year += current_century
         month = MONTHS.index(m.group('mon').lower()) + 1
         day = int(m.group('day'))
         hour = int(m.group('hour'))
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1dd351b7c3
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,34 @@
+from django.utils.http import parse_http_date, RFC1123_DATE, RFC850_DATE, ASCTIME_DATE
+
+# Print the regex patterns used in parse_http_date
+print("RFC1123_DATE:", RFC1123_DATE.pattern)
+print("RFC850_DATE:", RFC850_DATE.pattern)
+print("ASCTIME_DATE:", ASCTIME_DATE.pattern)
+
+# Test dates with two-digit years
+dates = [
+    "Sun, 06 Nov 94 08:49:37 GMT",  # Should be 1994
+    "Sun, 06 Nov 70 08:49:37 GMT",  # Should be 1970
+    "Sun, 06 Nov 69 08:49:37 GMT",  # Should be 2069
+    "Sun, 06 Nov 00 08:49:37 GMT",  # Should be 2000
+]
+
+for date in dates:
+    try:
+        print(f"{date} -> {parse_http_date(date)}")
+    except ValueError as e:
+        print(f"Error parsing {date}: {e}")
+
+# Test dates with two-digit years
+dates = [
+    "Sun, 06 Nov 94 08:49:37 GMT",  # Should be 1994
+    "Sun, 06 Nov 70 08:49:37 GMT",  # Should be 1970
+    "Sun, 06 Nov 69 08:49:37 GMT",  # Should be 2069
+    "Sun, 06 Nov 00 08:49:37 GMT",  # Should be 2000
+]
+
+for date in dates:
+    try:
+        print(f"{date} -> {parse_http_date(date)}")
+    except ValueError as e:
+        print(f"Error parsing {date}: {e}")
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 0000000000..088226c9f2
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,15 @@
+from django.utils.http import parse_http_date
+
+# Test dates with two-digit years
+dates = [
+    "Sunday, 06-Nov-94 08:49:37 GMT",  # Should be 1994
+    "Sunday, 06-Nov-70 08:49:37 GMT",  # Should be 1970
+    "Sunday, 06-Nov-69 08:49:37 GMT",  # Should be 2069
+    "Sunday, 06-Nov-00 08:49:37 GMT",  # Should be 2000
+]
+
+for date in dates:
+    try:
+        print(f"{date} -> {parse_http_date(date)}")
+    except ValueError as e:
+        print(f"Error parsing {date}: {e}")
