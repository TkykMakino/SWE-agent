
diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 837dabfea8..2db73b1689 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -430,7 +430,7 @@ class AdminSite:
                     return HttpResponsePermanentRedirect(path)
         raise Http404
 
-    def _build_app_dict(self, request, label=None):
+    def build_app_dict(self, request, label=None):
         """
         Build the app dictionary. The optional `label` parameter filters models
         of a specific app.
@@ -466,6 +466,7 @@ class AdminSite:
                 'perms': perms,
                 'admin_url': None,
                 'add_url': None,
+                'model': model,  # Add the model class to the context
             }
             if perms.get('change') or perms.get('view'):
                 model_dict['view_only'] = not perms.get('change')
@@ -503,7 +504,7 @@ class AdminSite:
         Return a sorted list of all the installed apps that have been
         registered in this site.
         """
-        app_dict = self._build_app_dict(request)
+        app_dict = self.build_app_dict(request)
 
         # Sort the apps alphabetically.
         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
@@ -534,7 +535,7 @@ class AdminSite:
         return TemplateResponse(request, self.index_template or 'admin/index.html', context)
 
     def app_index(self, request, app_label, extra_context=None):
-        app_dict = self._build_app_dict(request, app_label)
+        app_dict = self.build_app_dict(request, app_label)
         if not app_dict:
             raise Http404('The requested admin page does not exist.')
         # Sort the models alphabetically within each app.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3a7caf6b14
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+import os
+import django
+from django.conf import settings
+
+# Configure settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+django.setup()
+
+from django.contrib.admin.sites import AdminSite
+from django.test import RequestFactory
+from django.contrib.auth.models import User
+from django.db import models
+from django.contrib import admin
+
+# Define a simple model
+class MyModel(models.Model):
+    class Meta:
+        app_label = 'myapp'
+# Register the model with the admin site
+admin.site.register(MyModel)
+
+# Create a request factory and an admin site instance
+request_factory = RequestFactory()
+admin_site = AdminSite()
+
+# Create a mock request
+request = request_factory.get('/admin/')
+request.user = User(username='admin')
+
+# Call the get_app_list method to see the current app_list context
+app_list = admin_site.get_app_list(request)
+print(app_list)
