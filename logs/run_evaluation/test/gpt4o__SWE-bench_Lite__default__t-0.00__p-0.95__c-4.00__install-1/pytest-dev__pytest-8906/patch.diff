
diff --git a/pos_only.py b/pos_only.py
new file mode 100644
index 000000000..cd4011087
--- /dev/null
+++ b/pos_only.py
@@ -0,0 +1,2 @@
+def foo(a, /, b):
+    return a + b
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..7df88e801
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,13 @@
+from pytest import raises, skip
+import sys
+if sys.version_info < (3, 8):
+    skip(msg="Requires Python >= 3.8", allow_module_level=True)
+
+# import must be after the module level skip:
+from pos_only import *
+
+def test_foo():
+    assert foo(10, 20) == 30
+    assert foo(10, b=20) == 30
+    with raises(TypeError):
+        assert foo(a=10, b=20)
diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..011a70b0c 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -1,13 +1,40 @@
 """Exception classes and constants handling test outcomes as well as
 functions creating them."""
 import sys
-from typing import Any
-from typing import Callable
-from typing import cast
-from typing import Optional
-from typing import Type
-from typing import TypeVar
+from typing import Any, NoReturn, Callable, Optional, Type, TypeVar, cast
+from _pytest.outcomes import Skipped, UsageError
 
+def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
+    """Skip an executing test with the given message.
+
+    This function should be called only during testing (setup, call or teardown) or
+    during collection by using the ``allow_module_level`` flag.  This function can
+    be called in doctests as well.
+
+    :param bool allow_module_level:
+        Allows this function to be called at module level, skipping the rest
+        of the module. Defaults to False.
+
+    .. note::
+        It is better to use the :ref:`pytest.mark.skipif ref` marker when
+        possible to declare a test to be skipped under certain conditions
+        like mismatching platforms or dependencies.
+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP
+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)
+        to skip a doctest statically.
+    """
+    __tracebackhide__ = True
+    if not allow_module_level and sys._getframe(1).f_globals.get("__name__") == "__main__":
+        raise UsageError(
+            "Using pytest.skip outside of a test is not allowed. To decorate a test function, "
+            "use the @pytest.mark.skip or @pytest.mark.skipif decorators instead, and to skip a module "
+            "use `pytestmark = pytest.mark.{skip,skipif}`. Alternatively, use `skip(msg, allow_module_level=True)`."
+        )
+    raise Skipped(msg=msg, allow_module_level=allow_module_level)
+
+def skip_module(msg: str) -> "NoReturn":
+    """Skip the entire module with the given message."""
+    skip(msg=msg, allow_module_level=True)
 TYPE_CHECKING = False  # Avoid circular import through compat.
 
 if TYPE_CHECKING:
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index f7a026ae7..a239197ed 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -4,6 +4,26 @@ import platform
 import sys
 import traceback
 from collections.abc import Mapping
+from typing import Generator, Optional, Tuple, Type, NoReturn
+from _pytest.config import Config
+from _pytest.config import hookimpl
+from _pytest.config.argparsing import Parser
+from _pytest.mark.structures import Mark
+from _pytest.nodes import Item
+from _pytest.outcomes import fail, skip, xfail, Skipped, UsageError
+
+def skip_module(msg: str) -> NoReturn:
+    """Skip the entire module with the given message."""
+    skip(msg=msg, allow_module_level=True)
+from _pytest.runner import CallInfo
+from _pytest.store import StoreKey
+
+from _pytest.outcomes import fail, skip, xfail, Skipped, UsageError
+
+def skip_module(msg: str) -> NoReturn:
+    """Skip the entire module with the given message."""
+    skip(msg=msg, allow_module_level=True)
+from collections.abc import Mapping
 from typing import Generator
 from typing import Optional
 from typing import Tuple
