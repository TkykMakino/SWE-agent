
diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py
index 711d8864ad..ad21e6f69b 100644
--- a/django/contrib/staticfiles/handlers.py
+++ b/django/contrib/staticfiles/handlers.py
@@ -78,11 +78,19 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):
         self.application = application
         self.base_url = urlparse(self.get_base_url())
 
+    async def get_response_async(self, request):
+        try:
+            return await self.serve(request)
+        except Http404 as e:
+            return response_for_exception(request, e)
+
     async def __call__(self, scope, receive, send):
         # Only even look at HTTP requests
         if scope['type'] == 'http' and self._should_handle(scope['path']):
             # Serve static content
             # (the one thing super() doesn't do is __call__, apparently)
-            return await super().__call__(scope, receive, send)
+            return await self.get_response_async(scope)
+        # Hand off to the main app
+        return await self.application(scope, receive, send)
         # Hand off to the main app
         return await self.application(scope, receive, send)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..ae2a91e899
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,17 @@
+import asyncio
+from django.core.handlers.asgi import ASGIHandler
+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler
+from django.http import HttpRequest
+
+async def test_asgi_static_files_handler():
+    handler = ASGIStaticFilesHandler(ASGIHandler())
+    scope = {
+        'type': 'http',
+        'path': '/static/testfile.txt',
+    }
+    receive = lambda: None
+    send = lambda message: print(message)
+    await handler(scope, receive, send)
+
+if __name__ == "__main__":
+    asyncio.run(test_asgi_static_files_handler())
