
diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py
index f0b663222a..b51d1739a4 100644
--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -56,7 +56,7 @@ class Command(BaseCommand):
         targets = [(app_label, migration.name)]
 
         # Show begin/end around output only for atomic migrations
-        self.output_transaction = migration.atomic
+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl
 
         # Make a plan that represents just the requested migrations and show SQL
         # for it
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..c52b392751
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,12 @@
+import os
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'
+django.setup()
+TestRunner = get_runner(settings)
+test_runner = TestRunner()
+failures = test_runner.run_tests(["tests"])
+if failures:
+    exit(1)
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..965bafae6b
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,8 @@
+import unittest
+
+class SimpleTest(unittest.TestCase):
+    def test_addition(self):
+        self.assertEqual(1 + 1, 2)
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..6788886ffe
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+SECRET_KEY = 'dummy_secret_key'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.db.migrations',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 0e8fa9fdd1..759ca1f8ca 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -615,7 +615,19 @@ class MigrateTests(MigrationTestBase):
         if connection.ops.start_transaction_sql():
             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)
         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)
-
+    @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations_non_atomic"})
+    def test_sqlmigrate_for_non_atomic_migration_with_no_rollback(self):
+        """
+        Transaction wrappers aren't shown for non-atomic migrations when can_rollback_ddl is False.
+        """
+        with mock.patch('django.db.connection.features.can_rollback_ddl', False):
+            out = io.StringIO()
+            call_command("sqlmigrate", "migrations", "0001", stdout=out)
+            output = out.getvalue().lower()
+            queries = [q.strip() for q in output.splitlines()]
+            if connection.ops.start_transaction_sql():
+                self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)
+            self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)
     @override_settings(
         INSTALLED_APPS=[
             "migrations.migrations_test_apps.migrated_app",
