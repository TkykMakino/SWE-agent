+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   astropy/nddata/ccddata.py
	modified:   astropy/nddata/mixins/ndarithmetic.py
	modified:   astropy/nddata/nddata_withmixins.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	pyproject.toml.orig
	reproduce.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit b16c7d12ccbc7b2d20364b89fb44285bcbfede54
Merge: d0ab1b8264 0aa5eb3aec
Author: Marten van Kerkwijk <mhvk@astro.utoronto.ca>
Date:   Tue Jun 27 12:14:24 2023 -0400

    Merge pull request #14988 from nstarman/cosmo-dont-register-abstract
    
    Skip registering abstract classes with YAML

+ git diff b16c7d12ccbc7b2d20364b89fb44285bcbfede54
diff --git a/astropy/nddata/ccddata.py b/astropy/nddata/ccddata.py
index 37daa58faf..52e5e046dc 100644
--- a/astropy/nddata/ccddata.py
+++ b/astropy/nddata/ccddata.py
@@ -449,10 +449,10 @@ class CCDData(NDDataArray):
         """
         return self.__class__(self, copy=True)
 
-    add = _arithmetic(np.add)(NDDataArray.add)
-    subtract = _arithmetic(np.subtract)(NDDataArray.subtract)
-    multiply = _arithmetic(np.multiply)(NDDataArray.multiply)
-    divide = _arithmetic(np.true_divide)(NDDataArray.divide)
+# add = _arithmetic(np.add)(NDDataArray.add)
+# subtract = _arithmetic(np.subtract)(NDDataArray.subtract)
+# multiply = _arithmetic(np.multiply)(NDDataArray.multiply)
+# divide = _arithmetic(np.true_divide)(NDDataArray.divide)
 
     def _insert_in_metadata_fits_safe(self, key, value):
         """
diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..cc35d5b413 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -482,50 +482,49 @@ class NDArithmeticMixin:
                 operation, operand, result, correlation, **axis_kwarg
             )
 
-    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
-        """
-        Calculate the resulting mask.
-
-        This is implemented as the piecewise ``or`` operation if both have a
-        mask.
+def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
+    """
+    Calculate the resulting mask.
 
-        Parameters
-        ----------
-        operation : callable
-            see :meth:`NDArithmeticMixin._arithmetic` parameter description.
-            By default, the ``operation`` will be ignored.
+    This is implemented as the piecewise ``or`` operation if both have a
+    mask.
 
-        operand : `NDData`-like instance
-            The second operand wrapped in an instance of the same class as
-            self.
+    Parameters
+    ----------
+    operation : callable
+        see :meth:`NDArithmeticMixin._arithmetic` parameter description.
+        By default, the ``operation`` will be ignored.
 
-        handle_mask : callable
-            see :meth:`NDArithmeticMixin.add`
+    operand : `NDData`-like instance
+        The second operand wrapped in an instance of the same class as
+        self.
 
-        kwds :
-            Additional parameters given to ``handle_mask``.
+    handle_mask : callable
+        see :meth:`NDArithmeticMixin.add`
 
-        Returns
-        -------
-        result_mask : any type
-            If only one mask was present this mask is returned.
-            If neither had a mask ``None`` is returned. Otherwise
-            ``handle_mask`` must create (and copy) the returned mask.
-        """
-        # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
-            return None
-        elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
-            return deepcopy(operand.mask)
-        elif operand is None:
-            return deepcopy(self.mask)
-        else:
-            # Now lets calculate the resulting mask (operation enforces copy)
-            return handle_mask(self.mask, operand.mask, **kwds)
+    kwds :
+        Additional parameters given to ``handle_mask``.
 
+    Returns
+    -------
+    result_mask : any type
+        If only one mask was present this mask is returned.
+        If neither had a mask ``None`` is returned. Otherwise
+        ``handle_mask`` must create (and copy) the returned mask.
+    """
+    # If only one mask is present we need not bother about any type checks
+    if (
+        self.mask is None and operand is not None and operand.mask is None
+    ) or handle_mask is None:
+        return None
+    elif self.mask is None and operand is not None:
+        # Make a copy so there is no reference in the result.
+        return deepcopy(operand.mask)
+    elif operand is None or operand.mask is None:
+        return deepcopy(self.mask)
+    else:
+        # Now lets calculate the resulting mask (operation enforces copy)
+        return handle_mask(self.mask, operand.mask, **kwds)
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
         Calculate the resulting wcs.
diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py
index 2bbb52d3ba..5fa6909a69 100644
--- a/astropy/nddata/nddata_withmixins.py
+++ b/astropy/nddata/nddata_withmixins.py
@@ -69,4 +69,4 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):
     are sliced.
     """
 
-    pass
+# pass
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]' --verbose
Using pip 24.0 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
Obtaining file:///testbed
  Installing build dependencies: started
  Running command pip subprocess to install build dependencies
  Collecting setuptools
    Downloading setuptools-75.3.0-py3-none-any.whl.metadata (6.9 kB)
  Collecting setuptools_scm>=6.2
    Using cached setuptools_scm-8.1.0-py3-none-any.whl.metadata (6.6 kB)
  Collecting cython==0.29.34
    Using cached Cython-0.29.34-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata (3.1 kB)
  Collecting oldest-supported-numpy
    Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB)
  Collecting extension-helpers
    Downloading extension_helpers-1.2.0-py3-none-any.whl.metadata (2.2 kB)
  Collecting packaging>=20 (from setuptools_scm>=6.2)
    Using cached packaging-24.1-py3-none-any.whl.metadata (3.2 kB)
  Collecting typing-extensions (from setuptools_scm>=6.2)
    Using cached typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)
  Collecting tomli>=1 (from setuptools_scm>=6.2)
    Downloading tomli-2.0.2-py3-none-any.whl.metadata (10.0 kB)
  Collecting numpy==1.19.3 (from oldest-supported-numpy)
    Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata (2.0 kB)
  Using cached Cython-0.29.34-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (2.0 MB)
  Downloading setuptools-75.3.0-py3-none-any.whl (1.3 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.3/1.3 MB 5.6 MB/s eta 0:00:00
  Using cached setuptools_scm-8.1.0-py3-none-any.whl (43 kB)
  Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB)
  Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl (14.9 MB)
  Downloading extension_helpers-1.2.0-py3-none-any.whl (23 kB)
  Using cached packaging-24.1-py3-none-any.whl (53 kB)
  Downloading tomli-2.0.2-py3-none-any.whl (13 kB)
  Using cached typing_extensions-4.12.2-py3-none-any.whl (37 kB)
  Installing collected packages: typing-extensions, tomli, setuptools, packaging, numpy, cython, setuptools_scm, oldest-supported-numpy, extension-helpers
  ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
  astropy 6.0.dev328+gb16c7d12cc.d20240922 requires numpy>=1.21, but you have numpy 1.19.3 which is incompatible.
  Successfully installed cython-0.29.34 extension-helpers-1.2.0 numpy-1.19.3 oldest-supported-numpy-2023.12.21 packaging-24.1 setuptools-75.3.0 setuptools_scm-8.1.0 tomli-2.0.2 typing-extensions-4.12.2
  WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Running command Checking if build backend supports build_editable
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Running command Getting requirements to build editable
  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
      main()
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
      json_out['return_val'] = hook(**hook_input['kwargs'])
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 132, in get_requires_for_build_editable
      return hook(config_settings)
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 482, in get_requires_for_build_editable
      return self.get_requires_for_build_wheel(config_settings)
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 333, in get_requires_for_build_wheel
      return self._get_build_requires(config_settings, requirements=[])
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 303, in _get_build_requires
      self.run_setup()
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 319, in run_setup
      exec(code, locals())
    File "<string>", line 69, in <module>
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 63, in get_extensions
      for setuppkg in iter_setup_packages(srcdir, packages):
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 159, in iter_setup_packages
      module = import_file(setup_package, name=packagename + ".setup_package")
    File "/tmp/pip-build-env-juvvvhve/overlay/lib/python3.9/site-packages/extension_helpers/_utils.py", line 138, in import_file
      loader.exec_module(mod)
    File "<frozen importlib._bootstrap_external>", line 850, in exec_module
    File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
    File "astropy/wcs/setup_package.py", line 13, in <module>
      from setuptools.dep_util import newer_group
  ModuleNotFoundError: No module named 'setuptools.dep_util'
  error: subprocess-exited-with-error
  
  × Getting requirements to build editable did not run successfully.
  │ exit code: 1
  ╰─> See above for output.
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  full command: /opt/miniconda3/envs/testbed/bin/python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py get_requires_for_build_editable /tmp/tmpvlyy_a7v
  cwd: /testbed
  Getting requirements to build editable: finished with status 'error'
error: subprocess-exited-with-error

× Getting requirements to build editable did not run successfully.
│ exit code: 1
╰─> See above for output.

note: This error originates from a subprocess, and is likely not a problem with pip.
+ git checkout b16c7d12ccbc7b2d20364b89fb44285bcbfede54 astropy/nddata/mixins/tests/test_ndarithmetic.py
Updated 0 paths from 42f255fb91
+ git apply -v -
Checking patch astropy/nddata/mixins/tests/test_ndarithmetic.py...
Applied patch astropy/nddata/mixins/tests/test_ndarithmetic.py cleanly.
+ pytest -rA astropy/nddata/mixins/tests/test_ndarithmetic.py
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 80 from C header, got 96 from PyObject
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.19, pytest-7.4.0, pluggy-1.3.0

Running tests with Astropy version 6.0.dev328+gb16c7d12cc.d20240922.
Running tests in astropy/nddata/mixins/tests/test_ndarithmetic.py.

Date: 2024-11-02T09:57:02

Platform: Linux-6.8.0-47-generic-x86_64-with-glibc2.35

Executable: /opt/miniconda3/envs/testbed/bin/python

Full Python Version: 
3.9.19 (main, May  6 2024, 19:43:03) 
[GCC 11.2.0]

encodings: sys: utf-8, locale: UTF-8, filesystem: utf-8
byteorder: little
float info: dig: 15, mant_dig: 15

Package versions: 
Numpy: 1.25.2
Scipy: not available
Matplotlib: not available
h5py: not available
Pandas: not available
PyERFA: 2.0.0.3
Cython: not available
Scikit-image: not available
asdf-astropy: not available
pyarrow: not available

Using Astropy options: remote_data: none.

CI: undefined
ARCH_ON_CI: undefined
IS_CRON: undefined

rootdir: /testbed
configfile: setup.cfg
plugins: hypothesis-6.82.6, xdist-3.3.1, cov-4.1.0, remotedata-0.4.0, mock-3.11.1, astropy-0.10.0, filter-subpackage-0.1.2, openfiles-0.5.0, astropy-header-0.2.2, doctestplus-1.0.0, arraydiff-0.5.0
collected 180 items

astropy/nddata/mixins/tests/test_ndarithmetic.py [31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m [ 12%]
[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m [ 52%]
[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31m [ 92%]
[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[31m                                                            [100%][0m

=================================== FAILURES ===================================
[31m[1m_____________________ test_arithmetics_data[data10-data20] _____________________[0m

data1 = array(5), data2 = array(10)

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data11-data21] _____________________[0m

data1 = array(5), data2 = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data12-data22] _____________________[0m

data1 = array(5), data2 = array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data13-data23] _____________________[0m

data1 = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
data2 = array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data14-data24] _____________________[0m

data1 = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
data2 = array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., ...2., 2., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data15-data25] _____________________[0m

data1 = array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])
data2 = array([[3., 3., 3., 3., 3.],
       [3., 3., 3., 3., 3.]])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m_____________________ test_arithmetics_data[data16-data26] _____________________[0m

data1 = array([[[  0,   1,   2,   3,   4,   5,   6,   7,   8,   9],
        [ 10,  11,  12,  13,  14,  15,  16,  17,  18,  19]...      [980, 981, 982, 983, 984, 985, 986, 987, 988, 989],
        [990, 991, 992, 993, 994, 995, 996, 997, 998, 999]]])
data2 = array([[[3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
        [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
        [3., 3., 3... 3., 3., 3., 3.],
        [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
        [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.]]])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5), np.array(10)),
            (np.array(5), np.arange(10)),
            (np.array(5), np.arange(10).reshape(2, 5)),
            (np.arange(10), np.ones(10) * 2),
            (np.arange(10), np.ones((10, 10)) * 2),
            (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
            (np.arange(1000).reshape(20, 5, 10), np.ones((20, 5, 10)) * 3),
        ],
    )
    def test_arithmetics_data(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:52: AttributeError
[31m[1m________________________ test_arithmetics_data_invalid _________________________[0m

    def test_arithmetics_data_invalid():
        nd1 = NDDataArithmetic([1, 2, 3])
        nd2 = NDDataArithmetic([1, 2])
        with pytest.raises(ValueError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:83: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data10-data20] ______________[0m

data1 = <Quantity 5. s>, data2 = <Quantity 10. s>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data11-data21] ______________[0m

data1 = <Quantity 5. s>
data2 = <Quantity [0., 1., 2., 3., 4., 5., 6., 7., 8., 9.] h>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data12-data22] ______________[0m

data1 = <Quantity 5. s>
data2 = <Quantity [[0., 1., 2., 3., 4.],
           [5., 6., 7., 8., 9.]] min>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data13-data23] ______________[0m

data1 = <Quantity [0., 1., 2., 3., 4., 5., 6., 7., 8., 9.] m / s>
data2 = <Quantity [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.] km / s>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data14-data24] ______________[0m

data1 = <Quantity [0., 1., 2., 3., 4., 5., 6., 7., 8., 9.] m / s>
data2 = <Quantity [[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
           [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
           [..., 2.],
           [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
           [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]] m / h>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data15-data25] ______________[0m

data1 = <Quantity [[0., 1., 2., 3., 4.],
           [5., 6., 7., 8., 9.]] m / s>
data2 = <Quantity [[3., 3., 3., 3., 3.],
           [3., 3., 3., 3., 3.]] km / h>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data16-data26] ______________[0m

data1 = array([[[  0,   1,   2,   3,   4,   5,   6,   7,   8,   9],
        [ 10,  11,  12,  13,  14,  15,  16,  17,  18,  19]...      [980, 981, 982, 983, 984, 985, 986, 987, 988, 989],
        [990, 991, 992, 993, 994, 995, 996, 997, 998, 999]]])
data2 = <Quantity [[[3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
            [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
          ... 3., 3.],
            [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
            [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.]]]>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m_____________ test_arithmetics_data_unit_identical[data17-data27] ______________[0m

data1 = array(5), data2 = <Quantity 10. s / h>

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.s),
            (np.array(5) * u.s, np.arange(10) * u.h),
            (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
            (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
            (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
            (np.arange(10).reshape(2, 5) * u.m / u.s, np.ones((2, 5)) * 3 * u.km / u.h),
            (
                np.arange(1000).reshape(20, 5, 10),
                np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled,
            ),
            (np.array(5), np.array(10) * u.s / u.h),
        ],
    )
    def test_arithmetics_data_unit_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:112: AttributeError
[31m[1m___________ test_arithmetics_data_unit_not_identical[data10-data20] ____________[0m

data1 = <Quantity 5. s>, data2 = <Quantity 10. m>

    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.m),
            (np.array(5) * u.Mpc, np.array(10) * u.km / u.s),
            (np.array(5) * u.Mpc, np.array(10)),
            (np.array(5), np.array(10) * u.s),
        ],
    )
    def test_arithmetics_data_unit_not_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition should not be possible
        with pytest.raises(UnitsError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:166: AttributeError
[31m[1m___________ test_arithmetics_data_unit_not_identical[data11-data21] ____________[0m

data1 = <Quantity 5. Mpc>, data2 = <Quantity 10. km / s>

    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.m),
            (np.array(5) * u.Mpc, np.array(10) * u.km / u.s),
            (np.array(5) * u.Mpc, np.array(10)),
            (np.array(5), np.array(10) * u.s),
        ],
    )
    def test_arithmetics_data_unit_not_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition should not be possible
        with pytest.raises(UnitsError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:166: AttributeError
[31m[1m___________ test_arithmetics_data_unit_not_identical[data12-data22] ____________[0m

data1 = <Quantity 5. Mpc>, data2 = array(10)

    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.m),
            (np.array(5) * u.Mpc, np.array(10) * u.km / u.s),
            (np.array(5) * u.Mpc, np.array(10)),
            (np.array(5), np.array(10) * u.s),
        ],
    )
    def test_arithmetics_data_unit_not_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition should not be possible
        with pytest.raises(UnitsError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:166: AttributeError
[31m[1m___________ test_arithmetics_data_unit_not_identical[data13-data23] ____________[0m

data1 = array(5), data2 = <Quantity 10. s>

    @pytest.mark.parametrize(
        ("data1", "data2"),
        [
            (np.array(5) * u.s, np.array(10) * u.m),
            (np.array(5) * u.Mpc, np.array(10) * u.km / u.s),
            (np.array(5) * u.Mpc, np.array(10)),
            (np.array(5), np.array(10) * u.s),
        ],
    )
    def test_arithmetics_data_unit_not_identical(data1, data2):
        nd1 = NDDataArithmetic(data1)
        nd2 = NDDataArithmetic(data2)
    
        # Addition should not be possible
        with pytest.raises(UnitsError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:166: AttributeError
[31m[1m_____________________ test_arithmetics_data_wcs[None-None] _____________________[0m

wcs1 = None, wcs2 = None

    @pytest.mark.parametrize(
        ("wcs1", "wcs2"),
        [
            (None, None),
            (None, WCS(naxis=2)),
            (WCS(naxis=2), None),
            nd_testing.create_two_equal_wcs(naxis=2),
            nd_testing.create_two_unequal_wcs(naxis=2),
        ],
    )
    def test_arithmetics_data_wcs(wcs1, wcs2):
        nd1 = NDDataArithmetic(1, wcs=wcs1)
        nd2 = NDDataArithmetic(1, wcs=wcs2)
    
        if wcs1 is None and wcs2 is None:
            ref_wcs = None
        elif wcs1 is None:
            ref_wcs = wcs2
        elif wcs2 is None:
            ref_wcs = wcs1
        else:
            ref_wcs = wcs1
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:219: AttributeError
[31m[1m____________________ test_arithmetics_data_wcs[None-wcs21] _____________________[0m

wcs1 = None
wcs2 = WCS Keywords

Number of WCS axes: 2
CTYPE : ''  ''  
CRVAL : 0.0  0.0  
CRPIX : 0.0  0.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 1.0  1.0  
NAXIS : 0  0

    @pytest.mark.parametrize(
        ("wcs1", "wcs2"),
        [
            (None, None),
            (None, WCS(naxis=2)),
            (WCS(naxis=2), None),
            nd_testing.create_two_equal_wcs(naxis=2),
            nd_testing.create_two_unequal_wcs(naxis=2),
        ],
    )
    def test_arithmetics_data_wcs(wcs1, wcs2):
        nd1 = NDDataArithmetic(1, wcs=wcs1)
        nd2 = NDDataArithmetic(1, wcs=wcs2)
    
        if wcs1 is None and wcs2 is None:
            ref_wcs = None
        elif wcs1 is None:
            ref_wcs = wcs2
        elif wcs2 is None:
            ref_wcs = wcs1
        else:
            ref_wcs = wcs1
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:219: AttributeError
[31m[1m____________________ test_arithmetics_data_wcs[wcs12-None] _____________________[0m

wcs1 = WCS Keywords

Number of WCS axes: 2
CTYPE : ''  ''  
CRVAL : 0.0  0.0  
CRPIX : 0.0  0.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 1.0  1.0  
NAXIS : 0  0
wcs2 = None

    @pytest.mark.parametrize(
        ("wcs1", "wcs2"),
        [
            (None, None),
            (None, WCS(naxis=2)),
            (WCS(naxis=2), None),
            nd_testing.create_two_equal_wcs(naxis=2),
            nd_testing.create_two_unequal_wcs(naxis=2),
        ],
    )
    def test_arithmetics_data_wcs(wcs1, wcs2):
        nd1 = NDDataArithmetic(1, wcs=wcs1)
        nd2 = NDDataArithmetic(1, wcs=wcs2)
    
        if wcs1 is None and wcs2 is None:
            ref_wcs = None
        elif wcs1 is None:
            ref_wcs = wcs2
        elif wcs2 is None:
            ref_wcs = wcs1
        else:
            ref_wcs = wcs1
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:219: AttributeError
[31m[1m____________________ test_arithmetics_data_wcs[wcs13-wcs23] ____________________[0m

wcs1 = WCS Keywords

Number of WCS axes: 2
CTYPE : 'deg'  'deg'  
CRVAL : 10.0  10.0  
CRPIX : 10.0  10.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 1.0  1.0  
NAXIS : 0  0
wcs2 = WCS Keywords

Number of WCS axes: 2
CTYPE : 'deg'  'deg'  
CRVAL : 10.0  10.0  
CRPIX : 10.0  10.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 1.0  1.0  
NAXIS : 0  0

    @pytest.mark.parametrize(
        ("wcs1", "wcs2"),
        [
            (None, None),
            (None, WCS(naxis=2)),
            (WCS(naxis=2), None),
            nd_testing.create_two_equal_wcs(naxis=2),
            nd_testing.create_two_unequal_wcs(naxis=2),
        ],
    )
    def test_arithmetics_data_wcs(wcs1, wcs2):
        nd1 = NDDataArithmetic(1, wcs=wcs1)
        nd2 = NDDataArithmetic(1, wcs=wcs2)
    
        if wcs1 is None and wcs2 is None:
            ref_wcs = None
        elif wcs1 is None:
            ref_wcs = wcs2
        elif wcs2 is None:
            ref_wcs = wcs1
        else:
            ref_wcs = wcs1
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:219: AttributeError
[31m[1m____________________ test_arithmetics_data_wcs[wcs14-wcs24] ____________________[0m

wcs1 = WCS Keywords

Number of WCS axes: 2
CTYPE : 'deg'  'deg'  
CRVAL : 10.0  10.0  
CRPIX : 10.0  10.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 1.0  1.0  
NAXIS : 0  0
wcs2 = WCS Keywords

Number of WCS axes: 2
CTYPE : 'm'  'm'  
CRVAL : 20.0  20.0  
CRPIX : 20.0  20.0  
PC1_1 PC1_2  : 1.0  0.0  
PC2_1 PC2_2  : 0.0  1.0  
CDELT : 2.0  2.0  
NAXIS : 0  0

    @pytest.mark.parametrize(
        ("wcs1", "wcs2"),
        [
            (None, None),
            (None, WCS(naxis=2)),
            (WCS(naxis=2), None),
            nd_testing.create_two_equal_wcs(naxis=2),
            nd_testing.create_two_unequal_wcs(naxis=2),
        ],
    )
    def test_arithmetics_data_wcs(wcs1, wcs2):
        nd1 = NDDataArithmetic(1, wcs=wcs1)
        nd2 = NDDataArithmetic(1, wcs=wcs2)
    
        if wcs1 is None and wcs2 is None:
            ref_wcs = None
        elif wcs1 is None:
            ref_wcs = wcs2
        elif wcs2 is None:
            ref_wcs = wcs1
        else:
            ref_wcs = wcs1
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:219: AttributeError
[31m[1m____________________ test_arithmetics_data_masks[None-None] ____________________[0m

mask1 = None, mask2 = None

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m___________________ test_arithmetics_data_masks[None-False] ____________________[0m

mask1 = None, mask2 = False

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m____________________ test_arithmetics_data_masks[True-None] ____________________[0m

mask1 = True, mask2 = None

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m___________________ test_arithmetics_data_masks[False-False] ___________________[0m

mask1 = False, mask2 = False

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m___________________ test_arithmetics_data_masks[True-False] ____________________[0m

mask1 = True, mask2 = False

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m___________________ test_arithmetics_data_masks[False-True] ____________________[0m

mask1 = False, mask2 = True

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m____________________ test_arithmetics_data_masks[True-True] ____________________[0m

mask1 = True, mask2 = True

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m__________________ test_arithmetics_data_masks[mask17-mask27] __________________[0m

mask1 = array(False), mask2 = array(True)

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m__________________ test_arithmetics_data_masks[mask18-mask28] __________________[0m

mask1 = array(False), mask2 = array([False,  True, False,  True,  True])

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m__________________ test_arithmetics_data_masks[mask19-mask29] __________________[0m

mask1 = array(True)
mask2 = array([[False,  True, False,  True,  True],
       [ True,  True, False,  True,  True]])

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m_________________ test_arithmetics_data_masks[mask110-mask210] _________________[0m

mask1 = array([False,  True, False,  True,  True])
mask2 = array([ True,  True, False, False,  True])

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m_________________ test_arithmetics_data_masks[mask111-mask211] _________________[0m

mask1 = array([False,  True, False,  True,  True])
mask2 = array([[False,  True, False,  True,  True],
       [ True, False, False,  True,  True]])

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m_________________ test_arithmetics_data_masks[mask112-mask212] _________________[0m

mask1 = array([[False,  True, False,  True,  True],
       [ True, False, False,  True,  True]])
mask2 = array([[False,  True, False,  True,  True],
       [ True,  True, False,  True,  True]])

    @pytest.mark.parametrize(
        ("mask1", "mask2"),
        [
            (None, None),
            (None, False),
            (True, None),
            (False, False),
            (True, False),
            (False, True),
            (True, True),
            (np.array(False), np.array(True)),
            (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
            (np.array(True), np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([1, 1, 0, 0, 1], dtype=np.bool_),
            ),
            (
                np.array([0, 1, 0, 1, 1], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
            ),
            (
                np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
                np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_),
            ),
        ],
    )
    def test_arithmetics_data_masks(mask1, mask2):
        nd1 = NDDataArithmetic(1, mask=mask1)
        nd2 = NDDataArithmetic(1, mask=mask2)
    
        if mask1 is None and mask2 is None:
            ref_mask = None
        elif mask1 is None:
            ref_mask = mask2
        elif mask2 is None:
            ref_mask = mask1
        else:
            ref_mask = mask1 | mask2
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:282: AttributeError
[31m[1m_____________________ test_arithmetics_data_masks_invalid ______________________[0m

    def test_arithmetics_data_masks_invalid():
        nd1 = NDDataArithmetic(1, mask=np.array([1, 0], dtype=np.bool_))
        nd2 = NDDataArithmetic(1, mask=np.array([1, 0, 1], dtype=np.bool_))
    
        with pytest.raises(ValueError):
>           nd1.add(nd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:308: AttributeError
[31m[1m___________________ test_arithmetics_stddevuncertainty_basic ___________________[0m

    def test_arithmetics_stddevuncertainty_basic():
        nd1 = NDDataArithmetic([1, 2, 3], uncertainty=StdDevUncertainty([1, 1, 3]))
        nd2 = NDDataArithmetic([2, 2, 2], uncertainty=StdDevUncertainty([2, 2, 2]))
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:325: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert10-data20] _[0m

cor = -1, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert11-data21] _[0m

cor = -0.5, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert12-data22] _[0m

cor = -0.25, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert13-data23] _[0m

cor = 0, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert14-data24] _[0m

cor = 0.25, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert15-data25] _[0m

cor = 0.5, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert16-data26] _[0m

cor = 1, uncert1 = array([1, 1, 3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert17-data27] _[0m

cor = -1, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert18-data28] _[0m

cor = -0.5, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert19-data29] _[0m

cor = -0.25, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert110-data210] _[0m

cor = 0, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert111-data211] _[0m

cor = 0.25, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert112-data212] _[0m

cor = 0.5, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert113-data213] _[0m

cor = 1, uncert1 = array([-1, -1, -3]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert114-data214] _[0m

cor = -1, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert115-data215] _[0m

cor = -0.5, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert116-data216] _[0m

cor = -0.25, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert117-data217] _[0m

cor = 0, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert118-data218] _[0m

cor = 0.25, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert119-data219] _[0m

cor = 0.5, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert120-data220] _[0m

cor = 1, uncert1 = array([1, 1, 3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert121-data221] _[0m

cor = -1, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert122-data222] _[0m

cor = -0.5, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert123-data223] _[0m

cor = -0.25, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert124-data224] _[0m

cor = 0, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert125-data225] _[0m

cor = 0.25, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert126-data226] _[0m

cor = 0.5, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert127-data227] _[0m

cor = 1, uncert1 = array([-1, -1, -3]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_stddevuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1)
        uncert2 = np.array([2, 2, 2])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:416: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert10-data20] _[0m

cor = -1, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert11-data21] _[0m

cor = -0.5, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert12-data22] _[0m

cor = -0.25, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert13-data23] _[0m

cor = 0, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert14-data24] _[0m

cor = 0.25, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert15-data25] _[0m

cor = 0.5, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert16-data26] _[0m

cor = 1, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert17-data27] _[0m

cor = -1, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert18-data28] _[0m

cor = -0.5, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert19-data29] _[0m

cor = -0.25, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert110-data210] _[0m

cor = 0, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert111-data211] _[0m

cor = 0.25, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert112-data212] _[0m

cor = 0.5, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert113-data213] _[0m

cor = 1, uncert1 = array([1, 1, 9]), data2 = array([2, 2, 7])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert114-data214] _[0m

cor = -1, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert115-data215] _[0m

cor = -0.5, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert116-data216] _[0m

cor = -0.25, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert117-data217] _[0m

cor = 0, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert118-data218] _[0m

cor = 0.25, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert119-data219] _[0m

cor = 0.5, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert120-data220] _[0m

cor = 1, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert121-data221] _[0m

cor = -1, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert122-data222] _[0m

cor = -0.5, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert123-data223] _[0m

cor = -0.25, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert124-data224] _[0m

cor = 0, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert125-data225] _[0m

cor = 0.25, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert126-data226] _[0m

cor = 0.5, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert127-data227] _[0m

cor = 1, uncert1 = array([1, 1, 9]), data2 = array([-2, -3, -2])

    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_varianceuncertainty_basic_with_correlation(cor, uncert1, data2):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = np.array(uncert1) ** 2
        uncert2 = np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:515: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert10-data20] _[0m

cor = -1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert11-data21] _[0m

cor = -0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert12-data22] _[0m

cor = -0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert13-data23] _[0m

cor = 0, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert14-data24] _[0m

cor = 0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert15-data25] _[0m

cor = 0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert16-data26] _[0m

cor = 1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert17-data27] _[0m

cor = -1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert18-data28] _[0m

cor = -0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert19-data29] _[0m

cor = -0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert110-data210] _[0m

cor = 0, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert111-data211] _[0m

cor = 0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert112-data212] _[0m

cor = 0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert113-data213] _[0m

cor = 1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([2, 2, 7])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert114-data214] _[0m

cor = -1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert115-data215] _[0m

cor = -0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert116-data216] _[0m

cor = -0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert117-data217] _[0m

cor = 0, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert118-data218] _[0m

cor = 0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert119-data219] _[0m

cor = 0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert120-data220] _[0m

cor = 1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert121-data221] _[0m

cor = -1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert122-data222] _[0m

cor = -0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert123-data223] _[0m

cor = -0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert124-data224] _[0m

cor = 0, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert125-data225] _[0m

cor = 0.25, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert126-data226] _[0m

cor = 0.5, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert127-data227] _[0m

cor = 1, uncert1 = array([1.        , 1.        , 0.11111111])
data2 = array([-2, -3, -2])

    @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
    @pytest.mark.parametrize(
        ("cor", "uncert1", "data2"),
        [
            (-1, [1, 1, 3], [2, 2, 7]),
            (-0.5, [1, 1, 3], [2, 2, 7]),
            (-0.25, [1, 1, 3], [2, 2, 7]),
            (0, [1, 1, 3], [2, 2, 7]),
            (0.25, [1, 1, 3], [2, 2, 7]),
            (0.5, [1, 1, 3], [2, 2, 7]),
            (1, [1, 1, 3], [2, 2, 7]),
            (-1, [-1, -1, -3], [2, 2, 7]),
            (-0.5, [-1, -1, -3], [2, 2, 7]),
            (-0.25, [-1, -1, -3], [2, 2, 7]),
            (0, [-1, -1, -3], [2, 2, 7]),
            (0.25, [-1, -1, -3], [2, 2, 7]),
            (0.5, [-1, -1, -3], [2, 2, 7]),
            (1, [-1, -1, -3], [2, 2, 7]),
            (-1, [1, 1, 3], [-2, -3, -2]),
            (-0.5, [1, 1, 3], [-2, -3, -2]),
            (-0.25, [1, 1, 3], [-2, -3, -2]),
            (0, [1, 1, 3], [-2, -3, -2]),
            (0.25, [1, 1, 3], [-2, -3, -2]),
            (0.5, [1, 1, 3], [-2, -3, -2]),
            (1, [1, 1, 3], [-2, -3, -2]),
            (-1, [-1, -1, -3], [-2, -3, -2]),
            (-0.5, [-1, -1, -3], [-2, -3, -2]),
            (-0.25, [-1, -1, -3], [-2, -3, -2]),
            (0, [-1, -1, -3], [-2, -3, -2]),
            (0.25, [-1, -1, -3], [-2, -3, -2]),
            (0.5, [-1, -1, -3], [-2, -3, -2]),
            (1, [-1, -1, -3], [-2, -3, -2]),
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
        cor, uncert1, data2
    ):
        data1 = np.array([1, 2, 3])
        data2 = np.array(data2)
        uncert1 = 1 / np.array(uncert1) ** 2
        uncert2 = 1 / np.array([2, 2, 2]) ** 2
        nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
>       nd3 = nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:611: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_basic_with_correlation_array ________[0m

    def test_arithmetics_stddevuncertainty_basic_with_correlation_array():
        data1 = np.array([1, 2, 3])
        data2 = np.array([1, 1, 1])
        uncert1 = np.array([1, 1, 1])
        uncert2 = np.array([2, 2, 2])
        cor = np.array([0, 0.25, 0])
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
>       nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:676: AttributeError
[31m[1m________________ test_arithmetics_with_correlation_unsupported _________________[0m

    def test_arithmetics_with_correlation_unsupported():
        data1 = np.array([1, 2, 3])
        data2 = np.array([1, 1, 1])
        uncert1 = np.array([1, 1, 1])
        uncert2 = np.array([2, 2, 2])
        cor = 3
        nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertaintyUncorrelated(uncert1))
        nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertaintyUncorrelated(uncert2))
    
        with pytest.raises(ValueError):
>           nd1.add(nd2, uncertainty_correlation=cor)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:692: AttributeError
[31m[1m________________ test_arithmetics_stddevuncertainty_one_missing ________________[0m

    def test_arithmetics_stddevuncertainty_one_missing():
        nd1 = NDDataArithmetic([1, -2, 3])
        nd1_ref = NDDataArithmetic([1, -2, 3], uncertainty=StdDevUncertainty([0, 0, 0]))
        nd2 = NDDataArithmetic([2, 2, -2], uncertainty=StdDevUncertainty([2, 2, 2]))
    
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:707: AttributeError
[31m[1m_________ test_arithmetics_stddevuncertainty_with_units[uncert10-None] _________[0m

uncert1 = StdDevUncertainty([1., 2., 3.]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_________ test_arithmetics_stddevuncertainty_with_units[uncert11-None] _________[0m

uncert1 = StdDevUncertainty([1., 2., 3.]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_________ test_arithmetics_stddevuncertainty_with_units[None-uncert22] _________[0m

uncert1 = None, uncert2 = StdDevUncertainty([1., 2., 3.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_________ test_arithmetics_stddevuncertainty_with_units[None-uncert23] _________[0m

uncert1 = None, uncert2 = StdDevUncertainty([1., 2., 3.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert14-uncert24] _______[0m

uncert1 = StdDevUncertainty([1, 2, 3]), uncert2 = StdDevUncertainty([2, 3, 4])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert15-uncert25] _______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2, 3, 4])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert16-uncert26] _______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2., 3., 4.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert17-uncert27] _______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2., 3., 4.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert18-uncert28] _______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2, 3, 4])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m_______ test_arithmetics_stddevuncertainty_with_units[uncert19-uncert29] _______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2., 3., 4.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m______ test_arithmetics_stddevuncertainty_with_units[uncert110-uncert210] ______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2., 3., 4.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m______ test_arithmetics_stddevuncertainty_with_units[uncert111-uncert211] ______[0m

uncert1 = StdDevUncertainty([1., 2., 3.])
uncert2 = StdDevUncertainty([2., 3., 4.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = StdDevUncertainty(uncert1)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = StdDevUncertainty(uncert2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:806: AttributeError
[31m[1m________ test_arithmetics_varianceuncertainty_with_units[uncert10-None] ________[0m

uncert1 = VarianceUncertainty([1., 4., 9.]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m________ test_arithmetics_varianceuncertainty_with_units[uncert11-None] ________[0m

uncert1 = VarianceUncertainty([1., 4., 9.]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m________ test_arithmetics_varianceuncertainty_with_units[None-uncert22] ________[0m

uncert1 = None, uncert2 = VarianceUncertainty([1., 4., 9.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m________ test_arithmetics_varianceuncertainty_with_units[None-uncert23] ________[0m

uncert1 = None, uncert2 = VarianceUncertainty([1., 4., 9.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert14-uncert24] ______[0m

uncert1 = VarianceUncertainty([1, 4, 9])
uncert2 = VarianceUncertainty([ 4,  9, 16])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert15-uncert25] ______[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4,  9, 16])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert16-uncert26] ______[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4.,  9., 16.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert17-uncert27] ______[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4.,  9., 16.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert18-uncert28] ______[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4,  9, 16])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m______ test_arithmetics_varianceuncertainty_with_units[uncert19-uncert29] ______[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4.,  9., 16.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m_____ test_arithmetics_varianceuncertainty_with_units[uncert110-uncert210] _____[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4.,  9., 16.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m_____ test_arithmetics_varianceuncertainty_with_units[uncert111-uncert211] _____[0m

uncert1 = VarianceUncertainty([1., 4., 9.])
uncert2 = VarianceUncertainty([ 4.,  9., 16.])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = VarianceUncertainty(uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = VarianceUncertainty(uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:913: AttributeError
[31m[1m____ test_arithmetics_inversevarianceuncertainty_with_units[uncert10-None] _____[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m____ test_arithmetics_inversevarianceuncertainty_with_units[uncert11-None] _____[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111]), uncert2 = None

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m____ test_arithmetics_inversevarianceuncertainty_with_units[None-uncert22] _____[0m

uncert1 = None, uncert2 = InverseVariance([1.        , 0.25      , 0.11111111])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m____ test_arithmetics_inversevarianceuncertainty_with_units[None-uncert23] _____[0m

uncert1 = None, uncert2 = InverseVariance([1.        , 0.25      , 0.11111111])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert14-uncert24] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert15-uncert25] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert16-uncert26] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert17-uncert27] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert18-uncert28] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m__ test_arithmetics_inversevarianceuncertainty_with_units[uncert19-uncert29] ___[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_with_units[uncert110-uncert210] __[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m_ test_arithmetics_inversevarianceuncertainty_with_units[uncert111-uncert211] __[0m

uncert1 = InverseVariance([1.        , 0.25      , 0.11111111])
uncert2 = InverseVariance([0.25      , 0.11111111, 0.0625    ])

    @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
    @pytest.mark.parametrize(
        ("uncert1", "uncert2"),
        [
            (np.array([1, 2, 3]) * u.m, None),
            (np.array([1, 2, 3]) * u.cm, None),
            (None, np.array([1, 2, 3]) * u.m),
            (None, np.array([1, 2, 3]) * u.cm),
            (np.array([1, 2, 3]), np.array([2, 3, 4])),
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
            (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
            (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
        ],
    )
    def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
        # Data has same units
        data1 = np.array([1, 2, 3]) * u.m
        data2 = np.array([-4, 7, 0]) * u.m
        if uncert1 is not None:
            uncert1 = InverseVariance(1 / uncert1**2)
            if isinstance(uncert1, Quantity):
                uncert1_ref = uncert1.to_value(1 / data1.unit**2)
            else:
                uncert1_ref = uncert1
            uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
        else:
            uncert1 = None
            uncert_ref1 = None
    
        if uncert2 is not None:
            uncert2 = InverseVariance(1 / uncert2**2)
            if isinstance(uncert2, Quantity):
                uncert2_ref = uncert2.to_value(1 / data2.unit**2)
            else:
                uncert2_ref = uncert2
            uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
        else:
            uncert2 = None
            uncert_ref2 = None
    
        nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
        nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
    
        nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
        nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
    
        # Let's start the tests
        # Addition
>       nd3 = nd1.add(nd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1020: AttributeError
[31m[1m_____________________ test_arithmetics_handle_switches[ff] _____________________[0m

use_abbreviation = 'ff'

    @pytest.mark.parametrize("use_abbreviation", ["ff", "first_found"])
    def test_arithmetics_handle_switches(use_abbreviation):
        meta1 = {"a": 1}
        meta2 = {"b": 2}
        mask1 = True
        mask2 = False
        uncertainty1 = StdDevUncertainty([1, 2, 3])
        uncertainty2 = StdDevUncertainty([1, 2, 3])
        wcs1, wcs2 = nd_testing.create_two_unequal_wcs(naxis=1)
        data1 = [1, 1, 1]
        data2 = [1, 1, 1]
    
        nd1 = NDDataArithmetic(
            data1, meta=meta1, mask=mask1, wcs=wcs1, uncertainty=uncertainty1
        )
        nd2 = NDDataArithmetic(
            data2, meta=meta2, mask=mask2, wcs=wcs2, uncertainty=uncertainty2
        )
        nd3 = NDDataArithmetic(data1)
    
        # Both have the attributes but option None is chosen
>       nd_ = nd1.add(
            nd2,
            propagate_uncertainties=None,
            handle_meta=None,
            handle_mask=None,
            compare_wcs=None,
        )
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1094: AttributeError
[31m[1m________________ test_arithmetics_handle_switches[first_found] _________________[0m

use_abbreviation = 'first_found'

    @pytest.mark.parametrize("use_abbreviation", ["ff", "first_found"])
    def test_arithmetics_handle_switches(use_abbreviation):
        meta1 = {"a": 1}
        meta2 = {"b": 2}
        mask1 = True
        mask2 = False
        uncertainty1 = StdDevUncertainty([1, 2, 3])
        uncertainty2 = StdDevUncertainty([1, 2, 3])
        wcs1, wcs2 = nd_testing.create_two_unequal_wcs(naxis=1)
        data1 = [1, 1, 1]
        data2 = [1, 1, 1]
    
        nd1 = NDDataArithmetic(
            data1, meta=meta1, mask=mask1, wcs=wcs1, uncertainty=uncertainty1
        )
        nd2 = NDDataArithmetic(
            data2, meta=meta2, mask=mask2, wcs=wcs2, uncertainty=uncertainty2
        )
        nd3 = NDDataArithmetic(data1)
    
        # Both have the attributes but option None is chosen
>       nd_ = nd1.add(
            nd2,
            propagate_uncertainties=None,
            handle_meta=None,
            handle_mask=None,
            compare_wcs=None,
        )
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1094: AttributeError
[31m[1m__________________________ test_arithmetics_meta_func __________________________[0m

    def test_arithmetics_meta_func():
        def meta_fun_func(meta1, meta2, take="first"):
            if take == "first":
                return meta1
            else:
                return meta2
    
        meta1 = {"a": 1}
        meta2 = {"a": 3, "b": 2}
        mask1 = True
        mask2 = False
        uncertainty1 = StdDevUncertainty([1, 2, 3])
        uncertainty2 = StdDevUncertainty([1, 2, 3])
        data1 = [1, 1, 1]
        data2 = [1, 1, 1]
    
        nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1, uncertainty=uncertainty1)
        nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2, uncertainty=uncertainty2)
    
>       nd3 = nd1.add(nd2, handle_meta=meta_fun_func)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1152: AttributeError
[31m[1m__________________________ test_arithmetics_wcs_func ___________________________[0m

    def test_arithmetics_wcs_func():
        def wcs_comp_func(wcs1, wcs2, tolerance=0.1):
            if tolerance < 0.01:
                return False
            return True
    
        meta1 = {"a": 1}
        meta2 = {"a": 3, "b": 2}
        mask1 = True
        mask2 = False
        uncertainty1 = StdDevUncertainty([1, 2, 3])
        uncertainty2 = StdDevUncertainty([1, 2, 3])
        wcs1, wcs2 = nd_testing.create_two_equal_wcs(naxis=1)
        data1 = [1, 1, 1]
        data2 = [1, 1, 1]
    
        nd1 = NDDataArithmetic(
            data1, meta=meta1, mask=mask1, wcs=wcs1, uncertainty=uncertainty1
        )
        nd2 = NDDataArithmetic(
            data2, meta=meta2, mask=mask2, wcs=wcs2, uncertainty=uncertainty2
        )
    
>       nd3 = nd1.add(nd2, compare_wcs=wcs_comp_func)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1187: AttributeError
[31m[1m__________________________ test_arithmetics_mask_func __________________________[0m

    def test_arithmetics_mask_func():
        def mask_sad_func(mask1, mask2, fun=0):
            if fun > 0.5:
                return mask2
            else:
                return mask1
    
        meta1 = {"a": 1}
        meta2 = {"a": 3, "b": 2}
        mask1 = [True, False, True]
        mask2 = [True, False, False]
        uncertainty1 = StdDevUncertainty([1, 2, 3])
        uncertainty2 = StdDevUncertainty([1, 2, 3])
        data1 = [1, 1, 1]
        data2 = [1, 1, 1]
    
        nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1, uncertainty=uncertainty1)
        nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2, uncertainty=uncertainty2)
    
>       nd3 = nd1.add(nd2, handle_mask=mask_sad_func)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1219: AttributeError
[31m[1m________________________ test_two_argument_useage[add] _________________________[0m

meth = 'add'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage(meth):
        ndd1 = NDDataArithmetic(np.ones((3, 3)))
        ndd2 = NDDataArithmetic(np.ones((3, 3)))
    
        # Call add on the class (not the instance) and compare it with already
        # tested usage:
>       ndd3 = getattr(NDDataArithmetic, meth)(ndd1, ndd2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1236: AttributeError
[31m[1m______________________ test_two_argument_useage[subtract] ______________________[0m

meth = 'subtract'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage(meth):
        ndd1 = NDDataArithmetic(np.ones((3, 3)))
        ndd2 = NDDataArithmetic(np.ones((3, 3)))
    
        # Call add on the class (not the instance) and compare it with already
        # tested usage:
>       ndd3 = getattr(NDDataArithmetic, meth)(ndd1, ndd2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'subtract'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1236: AttributeError
[31m[1m_______________________ test_two_argument_useage[divide] _______________________[0m

meth = 'divide'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage(meth):
        ndd1 = NDDataArithmetic(np.ones((3, 3)))
        ndd2 = NDDataArithmetic(np.ones((3, 3)))
    
        # Call add on the class (not the instance) and compare it with already
        # tested usage:
>       ndd3 = getattr(NDDataArithmetic, meth)(ndd1, ndd2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'divide'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1236: AttributeError
[31m[1m______________________ test_two_argument_useage[multiply] ______________________[0m

meth = 'multiply'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage(meth):
        ndd1 = NDDataArithmetic(np.ones((3, 3)))
        ndd2 = NDDataArithmetic(np.ones((3, 3)))
    
        # Call add on the class (not the instance) and compare it with already
        # tested usage:
>       ndd3 = getattr(NDDataArithmetic, meth)(ndd1, ndd2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'multiply'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1236: AttributeError
[31m[1m______________ test_two_argument_useage_non_nddata_first_arg[add] ______________[0m

meth = 'add'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage_non_nddata_first_arg(meth):
        data1 = 50
        data2 = 100
    
        # Call add on the class (not the instance)
>       ndd3 = getattr(NDDataArithmetic, meth)(data1, data2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1252: AttributeError
[31m[1m___________ test_two_argument_useage_non_nddata_first_arg[subtract] ____________[0m

meth = 'subtract'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage_non_nddata_first_arg(meth):
        data1 = 50
        data2 = 100
    
        # Call add on the class (not the instance)
>       ndd3 = getattr(NDDataArithmetic, meth)(data1, data2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'subtract'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1252: AttributeError
[31m[1m____________ test_two_argument_useage_non_nddata_first_arg[divide] _____________[0m

meth = 'divide'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage_non_nddata_first_arg(meth):
        data1 = 50
        data2 = 100
    
        # Call add on the class (not the instance)
>       ndd3 = getattr(NDDataArithmetic, meth)(data1, data2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'divide'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1252: AttributeError
[31m[1m___________ test_two_argument_useage_non_nddata_first_arg[multiply] ____________[0m

meth = 'multiply'

    @pytest.mark.parametrize("meth", ["add", "subtract", "divide", "multiply"])
    def test_two_argument_useage_non_nddata_first_arg(meth):
        data1 = 50
        data2 = 100
    
        # Call add on the class (not the instance)
>       ndd3 = getattr(NDDataArithmetic, meth)(data1, data2)
[1m[31mE       AttributeError: type object 'NDDataRef' has no attribute 'multiply'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1252: AttributeError
[31m[1m____________________ test_arithmetics_unknown_uncertainties ____________________[0m

    def test_arithmetics_unknown_uncertainties():
        # Not giving any uncertainty class means it is saved as UnknownUncertainty
        ndd1 = NDDataArithmetic(
            np.ones((3, 3)), uncertainty=UnknownUncertainty(np.ones((3, 3)))
        )
        ndd2 = NDDataArithmetic(
            np.ones((3, 3)), uncertainty=UnknownUncertainty(np.ones((3, 3)) * 2)
        )
        # There is no way to propagate uncertainties:
        with pytest.raises(IncompatibleUncertaintiesException):
>           ndd1.add(ndd2)
[1m[31mE           AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1277: AttributeError
[31m[1m_______________________________ test_psf_warning _______________________________[0m

    def test_psf_warning():
        """Test that math on objects with a psf warn."""
        ndd1 = NDDataArithmetic(np.ones((3, 3)), psf=np.zeros(3))
        ndd2 = NDDataArithmetic(np.ones((3, 3)), psf=None)
    
        # no warning if both are None
>       ndd2.add(ndd2)
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'add'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1292: AttributeError
[31m[1m________________________ test_nddata_bitmask_arithmetic ________________________[0m

    def test_nddata_bitmask_arithmetic():
        # NDData.mask is usually assumed to be boolean, but could be
        # a bitmask. Ensure bitmask works:
        array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
        mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
    
        nref_nomask = NDDataRef(array)
        nref_masked = NDDataRef(array, mask=mask)
    
        # multiply no mask by constant (no mask * no mask)
>       assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None
[1m[31mE       AttributeError: 'NDDataRef' object has no attribute 'multiply'[0m

[1m[31mastropy/nddata/mixins/tests/test_ndarithmetic.py[0m:1325: AttributeError
==================================== PASSES ====================================
[36m[1m=========================== short test summary info ============================[0m
[32mPASSED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_raise_method_not_supported[0m
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data14-data24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data15-data25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data[data16-data26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_invalid[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data14-data24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data15-data25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data16-data26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_identical[data17-data27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_not_identical[data10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_not_identical[data11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_not_identical[data12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_unit_not_identical[data13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_wcs[None-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_wcs[None-wcs21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_wcs[wcs12-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_wcs[wcs13-wcs23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_wcs[wcs14-wcs24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[None-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[None-False][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[True-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[False-False][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[True-False][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[False-True][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[True-True][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask17-mask27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask18-mask28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask19-mask29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask110-mask210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask111-mask211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks[mask112-mask212][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_data_masks_invalid[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert14-data24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert15-data25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert16-data26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert17-data27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert18-data28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert19-data29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert110-data210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert111-data211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert112-data212][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert113-data213][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert114-data214][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert115-data215][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert116-data216][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert117-data217][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert118-data218][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert119-data219][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert120-data220][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-1-uncert121-data221][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.5-uncert122-data222][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[-0.25-uncert123-data223][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0-uncert124-data224][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.25-uncert125-data225][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[0.5-uncert126-data226][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation[1-uncert127-data227][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert14-data24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert15-data25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert16-data26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert17-data27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert18-data28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert19-data29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert110-data210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert111-data211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert112-data212][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert113-data213][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert114-data214][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert115-data215][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert116-data216][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert117-data217][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert118-data218][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert119-data219][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert120-data220][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-1-uncert121-data221][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.5-uncert122-data222][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[-0.25-uncert123-data223][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0-uncert124-data224][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.25-uncert125-data225][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[0.5-uncert126-data226][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_basic_with_correlation[1-uncert127-data227][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert10-data20][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert11-data21][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert12-data22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert13-data23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert14-data24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert15-data25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert16-data26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert17-data27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert18-data28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert19-data29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert110-data210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert111-data211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert112-data212][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert113-data213][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert114-data214][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert115-data215][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert116-data216][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert117-data217][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert118-data218][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert119-data219][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert120-data220][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-1-uncert121-data221][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.5-uncert122-data222][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[-0.25-uncert123-data223][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0-uncert124-data224][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.25-uncert125-data225][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[0.5-uncert126-data226][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_basic_with_correlation[1-uncert127-data227][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_basic_with_correlation_array[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_with_correlation_unsupported[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_one_missing[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert10-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert11-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[None-uncert22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[None-uncert23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert14-uncert24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert15-uncert25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert16-uncert26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert17-uncert27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert18-uncert28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert19-uncert29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert110-uncert210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_stddevuncertainty_with_units[uncert111-uncert211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert10-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert11-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[None-uncert22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[None-uncert23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert14-uncert24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert15-uncert25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert16-uncert26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert17-uncert27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert18-uncert28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert19-uncert29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert110-uncert210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_varianceuncertainty_with_units[uncert111-uncert211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert10-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert11-None][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[None-uncert22][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[None-uncert23][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert14-uncert24][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert15-uncert25][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert16-uncert26][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert17-uncert27][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert18-uncert28][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert19-uncert29][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert110-uncert210][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_inversevarianceuncertainty_with_units[uncert111-uncert211][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_handle_switches[ff][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_handle_switches[first_found][0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_meta_func[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_wcs_func[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_mask_func[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage[add][0m - AttributeError: type object 'NDDataRef' has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage[subtract][0m - AttributeError: type object 'NDDataRef' has no attribute 'subtract'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage[divide][0m - AttributeError: type object 'NDDataRef' has no attribute 'divide'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage[multiply][0m - AttributeError: type object 'NDDataRef' has no attribute 'multiply'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage_non_nddata_first_arg[add][0m - AttributeError: type object 'NDDataRef' has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage_non_nddata_first_arg[subtract][0m - AttributeError: type object 'NDDataRef' has no attribute 'subtract'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage_non_nddata_first_arg[divide][0m - AttributeError: type object 'NDDataRef' has no attribute 'divide'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_two_argument_useage_non_nddata_first_arg[multiply][0m - AttributeError: type object 'NDDataRef' has no attribute 'multiply'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_arithmetics_unknown_uncertainties[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_psf_warning[0m - AttributeError: 'NDDataRef' object has no attribute 'add'
[31mFAILED[0m astropy/nddata/mixins/tests/test_ndarithmetic.py::[1mtest_nddata_bitmask_arithmetic[0m - AttributeError: 'NDDataRef' object has no attribute 'multiply'
[31m======================== [31m[1m179 failed[0m, [32m1 passed[0m[31m in 5.09s[0m[31m =========================[0m
+ git checkout b16c7d12ccbc7b2d20364b89fb44285bcbfede54 astropy/nddata/mixins/tests/test_ndarithmetic.py
Updated 1 path from 42f255fb91
