+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce.py

nothing added to commit but untracked files present (use "git add" to track)
+ git show
commit 304a197829f98e7425a46d872ada73176137e5ae
Author: Barry Pollard <barry@tunetheweb.com>
Date:   Thu Oct 7 20:03:09 2021 +0100

    Support Group and Groups as table names (#1546)

diff --git a/src/sqlfluff/dialects/dialect_ansi.py b/src/sqlfluff/dialects/dialect_ansi.py
index f237e857a..18555e005 100644
--- a/src/sqlfluff/dialects/dialect_ansi.py
+++ b/src/sqlfluff/dialects/dialect_ansi.py
@@ -439,8 +439,8 @@ ansi_dialect.add(
     FromClauseTerminatorGrammar=OneOf(
         "WHERE",
         "LIMIT",
-        "GROUP",
-        "ORDER",
+        Sequence("GROUP", "BY"),
+        Sequence("ORDER", "BY"),
         "HAVING",
         "QUALIFY",
         "WINDOW",
@@ -448,7 +448,13 @@ ansi_dialect.add(
         Ref("WithNoSchemaBindingClauseSegment"),
     ),
     WhereClauseTerminatorGrammar=OneOf(
-        "LIMIT", "GROUP", "ORDER", "HAVING", "QUALIFY", "WINDOW", "OVERLAPS"
+        "LIMIT",
+        Sequence("GROUP", "BY"),
+        Sequence("ORDER", "BY"),
+        "HAVING",
+        "QUALIFY",
+        "WINDOW",
+        "OVERLAPS",
     ),
     PrimaryKeyGrammar=Sequence("PRIMARY", "KEY"),
     ForeignKeyGrammar=Sequence("FOREIGN", "KEY"),
diff --git a/src/sqlfluff/dialects/dialect_exasol.py b/src/sqlfluff/dialects/dialect_exasol.py
index 2144fd069..c5b34f3eb 100644
--- a/src/sqlfluff/dialects/dialect_exasol.py
+++ b/src/sqlfluff/dialects/dialect_exasol.py
@@ -225,8 +225,8 @@ exasol_dialect.replace(
         "START",
         "PREFERRING",
         "LIMIT",
-        "GROUP",
-        "ORDER",
+        Sequence("GROUP", "BY"),
+        Sequence("ORDER", "BY"),
         "HAVING",
         "QUALIFY",
         Ref("SetOperatorSegment"),
@@ -236,8 +236,8 @@ exasol_dialect.replace(
         "START",
         "PREFERRING",
         "LIMIT",
-        "GROUP",
-        "ORDER",
+        Sequence("GROUP", "BY"),
+        Sequence("ORDER", "BY"),
         "HAVING",
         "QUALIFY",
         Ref("SetOperatorSegment"),
@@ -459,9 +459,9 @@ class ConnectByClauseSegment(BaseSegment):
         ),
         terminator=OneOf(
             "PREFERRING",
-            "GROUP",
+            Sequence("GROUP", "BY"),
             "QUALIFY",
-            "ORDER",
+            Sequence("ORDER", "BY"),
             "LIMIT",
             Ref("SetOperatorSegment"),
         ),
diff --git a/src/sqlfluff/dialects/dialect_tsql.py b/src/sqlfluff/dialects/dialect_tsql.py
index ab6b2d124..2fada2a91 100644
--- a/src/sqlfluff/dialects/dialect_tsql.py
+++ b/src/sqlfluff/dialects/dialect_tsql.py
@@ -102,8 +102,8 @@ tsql_dialect.replace(
     FromClauseTerminatorGrammar=OneOf(
         "WHERE",
         "LIMIT",
-        "GROUP",
-        "ORDER",
+        Sequence("GROUP", "BY"),
+        Sequence("ORDER", "BY"),
         "HAVING",
         "PIVOT",
         "UNPIVOT",
diff --git a/test/fixtures/parser/ansi/select_table_named_group.sql b/test/fixtures/parser/ansi/select_table_named_group.sql
new file mode 100644
index 000000000..b12095621
--- /dev/null
+++ b/test/fixtures/parser/ansi/select_table_named_group.sql
@@ -0,0 +1,2 @@
+select 1 from group;
+select 1 from groups;
diff --git a/test/fixtures/parser/ansi/select_table_named_group.yml b/test/fixtures/parser/ansi/select_table_named_group.yml
new file mode 100644
index 000000000..9fec72a29
--- /dev/null
+++ b/test/fixtures/parser/ansi/select_table_named_group.yml
@@ -0,0 +1,35 @@
+# YML test files are auto-generated from SQL files and should not be edited by
+# hand. To help enforce this, the "hash" field in the file must match a hash
+# computed by SQLFluff when running the tests. Please run
+# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
+# altering SQL files.
+_hash: 58494049fb071ce5281906efd48106c55382e70443878f28a66451a872b1d765
+file:
+- statement:
+    select_statement:
+      select_clause:
+        keyword: select
+        select_clause_element:
+          literal: '1'
+      from_clause:
+        keyword: from
+        from_expression:
+          from_expression_element:
+            table_expression:
+              table_reference:
+                identifier: group
+- statement_terminator: ;
+- statement:
+    select_statement:
+      select_clause:
+        keyword: select
+        select_clause_element:
+          literal: '1'
+      from_clause:
+        keyword: from
+        from_expression:
+          from_expression_element:
+            table_expression:
+              table_reference:
+                identifier: groups
+- statement_terminator: ;
+ git diff 304a197829f98e7425a46d872ada73176137e5ae
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: click>=7.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (8.1.7)
Requirement already satisfied: colorama>=0.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (0.4.6)
Requirement already satisfied: configparser in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (7.1.0)
Requirement already satisfied: oyaml in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (1.0)
Requirement already satisfied: Jinja2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (3.1.4)
Requirement already satisfied: diff-cover>=2.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (9.2.0)
Requirement already satisfied: pathspec in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (0.12.1)
Requirement already satisfied: appdirs in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (1.4.4)
Requirement already satisfied: cached-property in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (2.0.1)
Requirement already satisfied: typing_extensions in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (4.12.2)
Requirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (8.3.3)
Requirement already satisfied: toml in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (0.10.2)
Requirement already satisfied: tblib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sqlfluff==0.6.8) (3.0.0)
Requirement already satisfied: Pygments<3.0.0,>=2.9.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from diff-cover>=2.5.0->sqlfluff==0.6.8) (2.18.0)
Requirement already satisfied: chardet>=3.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from diff-cover>=2.5.0->sqlfluff==0.6.8) (5.2.0)
Requirement already satisfied: pluggy<2,>=0.13.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from diff-cover>=2.5.0->sqlfluff==0.6.8) (1.5.0)
Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Jinja2->sqlfluff==0.6.8) (3.0.2)
Requirement already satisfied: pyyaml in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from oyaml->sqlfluff==0.6.8) (6.0.2)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->sqlfluff==0.6.8) (2.0.0)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->sqlfluff==0.6.8) (24.1)
Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->sqlfluff==0.6.8) (1.2.2)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->sqlfluff==0.6.8) (2.0.2)
Installing collected packages: sqlfluff
  Attempting uninstall: sqlfluff
    Found existing installation: sqlfluff 0.6.8
    Uninstalling sqlfluff-0.6.8:
      Successfully uninstalled sqlfluff-0.6.8
  DEPRECATION: Legacy editable install of sqlfluff==0.6.8 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sqlfluff
Successfully installed sqlfluff
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 304a197829f98e7425a46d872ada73176137e5ae test/dialects/ansi_test.py
Updated 0 paths from c2e0eb73a
+ git apply -v -
Checking patch test/dialects/ansi_test.py...
Applied patch test/dialects/ansi_test.py cleanly.
+ pytest -rA test/dialects/ansi_test.py
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-8.3.3, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: cov-6.0.0, hypothesis-6.115.6, sugar-1.0.0
collected 59 items

test/dialects/ansi_test.py ............................................. [ 76%]
..........FF.F                                                           [100%]

=================================== FAILURES ===================================
_ test__dialect__ansi_multiple_semicolons[select id from tbl;;-Could not parse: ;] _

raw = 'select id from tbl;;', expected_message = 'Could not parse: ;'

    @pytest.mark.parametrize(
        "raw,expected_message",
        [
            (";;", "Line 1, Position 1: Found unparsable section: ';;'"),
            ("select id from tbl;", ""),
            ("select id from tbl;;", "Could not parse: ;"),
            ("select id from tbl;;;;;;", "Could not parse: ;;;;;"),
            ("select id from tbl;select id2 from tbl2;", ""),
            (
                "select id from tbl;;select id2 from tbl2;",
                "Could not parse: ;select id2 from tbl2;",
            ),
        ],
    )
    def test__dialect__ansi_multiple_semicolons(raw: str, expected_message: str) -> None:
        """Multiple semicolons should be properly handled."""
        lnt = Linter()
>       parsed = lnt.parse_string(raw)

test/dialects/ansi_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/sqlfluff/core/linter/linter.py:607: in parse_string
    return self.parse_rendered(rendered, recurse=recurse)
src/sqlfluff/core/linter/linter.py:313: in parse_rendered
    parsed, pvs = cls._parse_tokens(
src/sqlfluff/core/linter/linter.py:190: in _parse_tokens
    parsed: Optional[BaseSegment] = parser.parse(
src/sqlfluff/core/parser/parser.py:32: in parse
    parsed = root_segment.parse(parse_context=ctx)
src/sqlfluff/core/parser/segments/base.py:821: in parse
    check_still_complete(segments, m.matched_segments, m.unmatched_segments)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

segments_in = (<CodeSegment: ([L:  1, P:  1]) 'select'>, <WhitespaceSegment: ([L:  1, P:  7]) ' '>, <CodeSegment: ([L:  1, P:  8]) '...Segment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'from'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, ...)
matched_segments = ()
unmatched_segments = (<SymbolSegment: ([L:  1, P: 20]) ';'>,)

    def check_still_complete(
        segments_in: Tuple["BaseSegment", ...],
        matched_segments: Tuple["BaseSegment", ...],
        unmatched_segments: Tuple["BaseSegment", ...],
    ) -> bool:
        """Check that the segments in are the same as the segments out."""
        initial_str = join_segments_raw(segments_in)
        current_str = join_segments_raw(matched_segments + unmatched_segments)
        if initial_str != current_str:  # pragma: no cover
>           raise RuntimeError(
                "Dropped elements in sequence matching! {!r} != {!r}".format(
                    initial_str, current_str
                )
            )
E           RuntimeError: Dropped elements in sequence matching! 'select id from tbl;;' != ';'

src/sqlfluff/core/parser/helpers.py:30: RuntimeError
_ test__dialect__ansi_multiple_semicolons[select id from tbl;;;;;;-Could not parse: ;;;;;] _

raw = 'select id from tbl;;;;;;', expected_message = 'Could not parse: ;;;;;'

    @pytest.mark.parametrize(
        "raw,expected_message",
        [
            (";;", "Line 1, Position 1: Found unparsable section: ';;'"),
            ("select id from tbl;", ""),
            ("select id from tbl;;", "Could not parse: ;"),
            ("select id from tbl;;;;;;", "Could not parse: ;;;;;"),
            ("select id from tbl;select id2 from tbl2;", ""),
            (
                "select id from tbl;;select id2 from tbl2;",
                "Could not parse: ;select id2 from tbl2;",
            ),
        ],
    )
    def test__dialect__ansi_multiple_semicolons(raw: str, expected_message: str) -> None:
        """Multiple semicolons should be properly handled."""
        lnt = Linter()
>       parsed = lnt.parse_string(raw)

test/dialects/ansi_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/sqlfluff/core/linter/linter.py:607: in parse_string
    return self.parse_rendered(rendered, recurse=recurse)
src/sqlfluff/core/linter/linter.py:313: in parse_rendered
    parsed, pvs = cls._parse_tokens(
src/sqlfluff/core/linter/linter.py:190: in _parse_tokens
    parsed: Optional[BaseSegment] = parser.parse(
src/sqlfluff/core/parser/parser.py:32: in parse
    parsed = root_segment.parse(parse_context=ctx)
src/sqlfluff/core/parser/segments/base.py:821: in parse
    check_still_complete(segments, m.matched_segments, m.unmatched_segments)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

segments_in = (<CodeSegment: ([L:  1, P:  1]) 'select'>, <WhitespaceSegment: ([L:  1, P:  7]) ' '>, <CodeSegment: ([L:  1, P:  8]) '...Segment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'from'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, ...)
matched_segments = ()
unmatched_segments = (<SymbolSegment: ([L:  1, P: 20]) ';'>, <CodeSegment: ([L:  1, P: 21]) ';'>, <CodeSegment: ([L:  1, P: 22]) ';'>, <CodeSegment: ([L:  1, P: 23]) ';'>, <CodeSegment: ([L:  1, P: 24]) ';'>)

    def check_still_complete(
        segments_in: Tuple["BaseSegment", ...],
        matched_segments: Tuple["BaseSegment", ...],
        unmatched_segments: Tuple["BaseSegment", ...],
    ) -> bool:
        """Check that the segments in are the same as the segments out."""
        initial_str = join_segments_raw(segments_in)
        current_str = join_segments_raw(matched_segments + unmatched_segments)
        if initial_str != current_str:  # pragma: no cover
>           raise RuntimeError(
                "Dropped elements in sequence matching! {!r} != {!r}".format(
                    initial_str, current_str
                )
            )
E           RuntimeError: Dropped elements in sequence matching! 'select id from tbl;;;;;;' != ';;;;;'

src/sqlfluff/core/parser/helpers.py:30: RuntimeError
_ test__dialect__ansi_multiple_semicolons[select id from tbl;;select id2 from tbl2;-Could not parse: ;select id2 from tbl2;] _

raw = 'select id from tbl;;select id2 from tbl2;'
expected_message = 'Could not parse: ;select id2 from tbl2;'

    @pytest.mark.parametrize(
        "raw,expected_message",
        [
            (";;", "Line 1, Position 1: Found unparsable section: ';;'"),
            ("select id from tbl;", ""),
            ("select id from tbl;;", "Could not parse: ;"),
            ("select id from tbl;;;;;;", "Could not parse: ;;;;;"),
            ("select id from tbl;select id2 from tbl2;", ""),
            (
                "select id from tbl;;select id2 from tbl2;",
                "Could not parse: ;select id2 from tbl2;",
            ),
        ],
    )
    def test__dialect__ansi_multiple_semicolons(raw: str, expected_message: str) -> None:
        """Multiple semicolons should be properly handled."""
        lnt = Linter()
>       parsed = lnt.parse_string(raw)

test/dialects/ansi_test.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/sqlfluff/core/linter/linter.py:607: in parse_string
    return self.parse_rendered(rendered, recurse=recurse)
src/sqlfluff/core/linter/linter.py:313: in parse_rendered
    parsed, pvs = cls._parse_tokens(
src/sqlfluff/core/linter/linter.py:190: in _parse_tokens
    parsed: Optional[BaseSegment] = parser.parse(
src/sqlfluff/core/parser/parser.py:32: in parse
    parsed = root_segment.parse(parse_context=ctx)
src/sqlfluff/core/parser/segments/base.py:821: in parse
    check_still_complete(segments, m.matched_segments, m.unmatched_segments)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

segments_in = (<CodeSegment: ([L:  1, P:  1]) 'select'>, <WhitespaceSegment: ([L:  1, P:  7]) ' '>, <CodeSegment: ([L:  1, P:  8]) '...Segment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'from'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, ...)
matched_segments = ()
unmatched_segments = (<SymbolSegment: ([L:  1, P: 20]) ';'>, <CodeSegment: ([L:  1, P: 21]) 'select'>, <WhitespaceSegment: ([L:  1, P: 27])...gment: ([L:  1, P: 28]) 'id2'>, <WhitespaceSegment: ([L:  1, P: 31]) ' '>, <CodeSegment: ([L:  1, P: 32]) 'from'>, ...)

    def check_still_complete(
        segments_in: Tuple["BaseSegment", ...],
        matched_segments: Tuple["BaseSegment", ...],
        unmatched_segments: Tuple["BaseSegment", ...],
    ) -> bool:
        """Check that the segments in are the same as the segments out."""
        initial_str = join_segments_raw(segments_in)
        current_str = join_segments_raw(matched_segments + unmatched_segments)
        if initial_str != current_str:  # pragma: no cover
>           raise RuntimeError(
                "Dropped elements in sequence matching! {!r} != {!r}".format(
                    initial_str, current_str
                )
            )
E           RuntimeError: Dropped elements in sequence matching! 'select id from tbl;;select id2 from tbl2;' != ';select id2 from tbl2;'

src/sqlfluff/core/parser/helpers.py:30: RuntimeError
=============================== warnings summary ===============================
src/sqlfluff/__init__.py:9
  /testbed/src/sqlfluff/__init__.py:9: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    import pkg_resources

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
___________________ test__dialect__ansi__file_lex[a b-res0] ____________________
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.lexer:lexer.py:335 Elements to Segments.
INFO     sqlfluff.lexer:lexer.py:338 Source-only slices: []
DEBUG    sqlfluff.lexer:lexer.py:351   0, TemplateElement(raw='a', template_slice=slice(0, 1, None), matcher=<RegexLexer: code>), slice(0, 1, None), 'a'
DEBUG    sqlfluff.lexer:lexer.py:351   1, TemplateElement(raw=' ', template_slice=slice(1, 2, None), matcher=<RegexLexer: whitespace>), slice(1, 2, None), ' '
DEBUG    sqlfluff.lexer:lexer.py:351   2, TemplateElement(raw='b', template_slice=slice(2, 3, None), matcher=<RegexLexer: code>), slice(2, 3, None), 'b'
___________________ test__dialect__ansi__file_lex[b.c-res1] ____________________
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.lexer:lexer.py:335 Elements to Segments.
INFO     sqlfluff.lexer:lexer.py:338 Source-only slices: []
DEBUG    sqlfluff.lexer:lexer.py:351   0, TemplateElement(raw='b', template_slice=slice(0, 1, None), matcher=<RegexLexer: code>), slice(0, 1, None), 'b'
DEBUG    sqlfluff.lexer:lexer.py:351   1, TemplateElement(raw='.', template_slice=slice(1, 2, None), matcher=<StringLexer: dot>), slice(1, 2, None), '.'
DEBUG    sqlfluff.lexer:lexer.py:351   2, TemplateElement(raw='c', template_slice=slice(2, 3, None), matcher=<RegexLexer: code>), slice(2, 3, None), 'c'
___________ test__dialect__ansi__file_lex[abc \n \t def  ;blah-res2] ___________
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.lexer:lexer.py:335 Elements to Segments.
INFO     sqlfluff.lexer:lexer.py:338 Source-only slices: []
DEBUG    sqlfluff.lexer:lexer.py:351   0, TemplateElement(raw='abc', template_slice=slice(0, 3, None), matcher=<RegexLexer: code>), slice(0, 3, None), 'abc'
DEBUG    sqlfluff.lexer:lexer.py:351   1, TemplateElement(raw=' ', template_slice=slice(3, 4, None), matcher=<RegexLexer: whitespace>), slice(3, 4, None), ' '
DEBUG    sqlfluff.lexer:lexer.py:351   2, TemplateElement(raw='\n', template_slice=slice(4, 5, None), matcher=<RegexLexer: newline>), slice(4, 5, None), '\n'
DEBUG    sqlfluff.lexer:lexer.py:351   3, TemplateElement(raw=' \t ', template_slice=slice(5, 8, None), matcher=<RegexLexer: whitespace>), slice(5, 8, None), ' \t '
DEBUG    sqlfluff.lexer:lexer.py:351   4, TemplateElement(raw='def', template_slice=slice(8, 11, None), matcher=<RegexLexer: code>), slice(8, 11, None), 'def'
DEBUG    sqlfluff.lexer:lexer.py:351   5, TemplateElement(raw='  ', template_slice=slice(11, 13, None), matcher=<RegexLexer: whitespace>), slice(11, 13, None), '  '
DEBUG    sqlfluff.lexer:lexer.py:351   6, TemplateElement(raw=';', template_slice=slice(13, 14, None), matcher=<StringLexer: semicolon>), slice(13, 14, None), ';'
DEBUG    sqlfluff.lexer:lexer.py:351   7, TemplateElement(raw='blah', template_slice=slice(14, 18, None), matcher=<RegexLexer: code>), slice(14, 18, None), 'blah'
___ test__dialect__ansi_specific_segment_parses[SelectKeywordSegment-select] ___
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'select'>,)
Raw/Parser route...
<MatchResult 1/1: 'select'>
<KeywordSegment: ([L:  1, P:  1]) 'select'>
<KeywordSegment: ([L:  1, P:  1]) 'select'>
<class 'sqlfluff.core.parser.segments.raw.KeywordSegment'>
<class 'str'>
_ test__dialect__ansi_specific_segment_parses[NakedIdentifierSegment-online_sales] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'online_sales'>,)
Raw/Parser route...
<MatchResult 1/1: 'online_sales'>
<CodeSegment: ([L:  1, P:  1]) 'online_sales'>
<CodeSegment: ([L:  1, P:  1]) 'online_sales'>
<class 'sqlfluff.core.parser.segments.raw.CodeSegment'>
<class 'str'>
_ test__dialect__ansi_specific_segment_parses[BareFunctionSegment-current_timestamp] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'current_timestamp'>,)
Raw/Parser route...
<MatchResult 1/1: 'current_timestamp'>
<CodeSegment: ([L:  1, P:  1]) 'current_timestamp'>
<CodeSegment: ([L:  1, P:  1]) 'current_timestamp'>
<class 'sqlfluff.core.parser.segments.raw.CodeSegment'>
<class 'str'>
_ test__dialect__ansi_specific_segment_parses[FunctionSegment-current_timestamp()] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'current_timestamp'>, <CodeSegment: ([L:  1, P: 18]) '('>, <CodeSegment: ([L:  1, P: 19]) ')'>)
Base route...
<FunctionSegment: ([L:  1, P:  1])>
<FunctionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.FunctionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: FunctionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |function:
[L:  1, P:  1]      |    raw:                                                      'current_timestamp'
[L:  1, P: 18]      |    raw:                                                      '('
[L:  1, P: 19]      |    raw:                                                      ')'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'current_timestamp'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 18]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 19]) ')'>...
__ test__dialect__ansi_specific_segment_parses[NumericLiteralSegment-1000.0] ___
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '1000.0'>,)
Raw/Parser route...
<MatchResult 1/1: '1000.0'>
<CodeSegment: ([L:  1, P:  1]) '1000.0'>
<CodeSegment: ([L:  1, P:  1]) '1000.0'>
<class 'sqlfluff.core.parser.segments.raw.CodeSegment'>
<class 'str'>
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-online_sales / 1000.0] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'online_sales'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) '/'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) '1000.0'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'online_sales'
[L:  1, P: 13]      |    whitespace:                                               ' '
[L:  1, P: 14]      |    raw:                                                      '/'
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    raw:                                                      '1000.0'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'online_sales'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 13]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 14]) '/'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 16]) '1000.0'>...
_ test__dialect__ansi_specific_segment_parses[IntervalExpressionSegment-INTERVAL 1 YEAR] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'INTERVAL'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) '1'>, <WhitespaceSegment: ([L:  1, P: 11]) ' '>, <CodeSegment: ([L:  1, P: 12]) 'YEAR'>)
Base route...
<IntervalExpressionSegment: ([L:  1, P:  1])>
<IntervalExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.IntervalExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 IntervalExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 IntervalExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: IntervalExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |interval_expression:
[L:  1, P:  1]      |    raw:                                                      'INTERVAL'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    raw:                                                      '1'
[L:  1, P: 11]      |    whitespace:                                               ' '
[L:  1, P: 12]      |    raw:                                                      'YEAR'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'INTERVAL'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 11]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 12]) 'YEAR'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN 'nothing' ELSE 'test' END] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'CASE'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'WHEN'>, <WhitespaceSegment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'id'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) '='>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) '1'>, <WhitespaceSegment: ([L:  1, P: 17]) ' '>, <CodeSegment: ([L:  1, P: 18]) 'THEN'>, <WhitespaceSegment: ([L:  1, P: 22]) ' '>, <CodeSegment: ([L:  1, P: 23]) "'nothing'">, <WhitespaceSegment: ([L:  1, P: 32]) ' '>, <CodeSegment: ([L:  1, P: 33]) 'ELSE'>, <WhitespaceSegment: ([L:  1, P: 37]) ' '>, <CodeSegment: ([L:  1, P: 38]) "'test'">, <WhitespaceSegment: ([L:  1, P: 44]) ' '>, <CodeSegment: ([L:  1, P: 45]) 'END'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'CASE'
[L:  1, P:  5]      |    whitespace:                                               ' '
[L:  1, P:  6]      |    raw:                                                      'WHEN'
[L:  1, P: 10]      |    whitespace:                                               ' '
[L:  1, P: 11]      |    raw:                                                      'id'
[L:  1, P: 13]      |    whitespace:                                               ' '
[L:  1, P: 14]      |    raw:                                                      '='
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    raw:                                                      '1'
[L:  1, P: 17]      |    whitespace:                                               ' '
[L:  1, P: 18]      |    raw:                                                      'THEN'
[L:  1, P: 22]      |    whitespace:                                               ' '
[L:  1, P: 23]      |    raw:                                                      "'nothing'"
[L:  1, P: 32]      |    whitespace:                                               ' '
[L:  1, P: 33]      |    raw:                                                      'ELSE'
[L:  1, P: 37]      |    whitespace:                                               ' '
[L:  1, P: 38]      |    raw:                                                      "'test'"
[L:  1, P: 44]      |    whitespace:                                               ' '
[L:  1, P: 45]      |    raw:                                                      'END'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'CASE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  5]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'WHEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 10]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 11]) 'id'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 13]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 14]) '='>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 16]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 17]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 18]) 'THEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 22]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 23]) "'nothing'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 32]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 33]) 'ELSE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 37]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 38]) "'test'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 44]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 45]) 'END'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN CASE WHEN true THEN 'something' ELSE 'nothing' END ELSE 'test' END] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'CASE'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'WHEN'>, <WhitespaceSegment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'id'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) '='>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) '1'>, <WhitespaceSegment: ([L:  1, P: 17]) ' '>, <CodeSegment: ([L:  1, P: 18]) 'THEN'>, <WhitespaceSegment: ([L:  1, P: 22]) ' '>, <CodeSegment: ([L:  1, P: 23]) 'CASE'>, <WhitespaceSegment: ([L:  1, P: 27]) ' '>, <CodeSegment: ([L:  1, P: 28]) 'WHEN'>, <WhitespaceSegment: ([L:  1, P: 32]) ' '>, <CodeSegment: ([L:  1, P: 33]) 'true'>, <WhitespaceSegment: ([L:  1, P: 37]) ' '>, <CodeSegment: ([L:  1, P: 38]) 'THEN'>, <WhitespaceSegment: ([L:  1, P: 42]) ' '>, <CodeSegment: ([L:  1, P: 43]) "'something'">, <WhitespaceSegment: ([L:  1, P: 54]) ' '>, <CodeSegment: ([L:  1, P: 55]) 'ELSE'>, <WhitespaceSegment: ([L:  1, P: 59]) ' '>, <CodeSegment: ([L:  1, P: 60]) "'nothing'">, <WhitespaceSegment: ([L:  1, P: 69]) ' '>, <CodeSegment: ([L:  1, P: 70]) 'END'>, <WhitespaceSegment: ([L:  1, P: 73]) ' '>, <CodeSegment: ([L:  1, P: 74]) 'ELSE'>, <WhitespaceSegment: ([L:  1, P: 78]) ' '>, <CodeSegment: ([L:  1, P: 79]) "'test'">, <WhitespaceSegment: ([L:  1, P: 85]) ' '>, <CodeSegment: ([L:  1, P: 86]) 'END'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'CASE'
[L:  1, P:  5]      |    whitespace:                                               ' '
[L:  1, P:  6]      |    raw:                                                      'WHEN'
[L:  1, P: 10]      |    whitespace:                                               ' '
[L:  1, P: 11]      |    raw:                                                      'id'
[L:  1, P: 13]      |    whitespace:                                               ' '
[L:  1, P: 14]      |    raw:                                                      '='
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    raw:                                                      '1'
[L:  1, P: 17]      |    whitespace:                                               ' '
[L:  1, P: 18]      |    raw:                                                      'THEN'
[L:  1, P: 22]      |    whitespace:                                               ' '
[L:  1, P: 23]      |    raw:                                                      'CASE'
[L:  1, P: 27]      |    whitespace:                                               ' '
[L:  1, P: 28]      |    raw:                                                      'WHEN'
[L:  1, P: 32]      |    whitespace:                                               ' '
[L:  1, P: 33]      |    raw:                                                      'true'
[L:  1, P: 37]      |    whitespace:                                               ' '
[L:  1, P: 38]      |    raw:                                                      'THEN'
[L:  1, P: 42]      |    whitespace:                                               ' '
[L:  1, P: 43]      |    raw:                                                      "'something'"
[L:  1, P: 54]      |    whitespace:                                               ' '
[L:  1, P: 55]      |    raw:                                                      'ELSE'
[L:  1, P: 59]      |    whitespace:                                               ' '
[L:  1, P: 60]      |    raw:                                                      "'nothing'"
[L:  1, P: 69]      |    whitespace:                                               ' '
[L:  1, P: 70]      |    raw:                                                      'END'
[L:  1, P: 73]      |    whitespace:                                               ' '
[L:  1, P: 74]      |    raw:                                                      'ELSE'
[L:  1, P: 78]      |    whitespace:                                               ' '
[L:  1, P: 79]      |    raw:                                                      "'test'"
[L:  1, P: 85]      |    whitespace:                                               ' '
[L:  1, P: 86]      |    raw:                                                      'END'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'CASE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  5]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'WHEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 10]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 11]) 'id'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 13]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 14]) '='>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 16]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 17]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 18]) 'THEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 22]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 23]) 'CASE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 27]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 28]) 'WHEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 32]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 33]) 'true'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 37]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 38]) 'THEN'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 42]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 43]) "'something'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 54]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 55]) 'ELSE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 59]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 60]) "'nothing'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 69]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 70]) 'END'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 73]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 74]) 'ELSE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 78]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 79]) "'test'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 85]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 86]) 'END'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-CAST(ROUND(online_sales / 1000.0) AS varchar)] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'CAST'>, <CodeSegment: ([L:  1, P:  5]) '('>, <CodeSegment: ([L:  1, P:  6]) 'ROUND'>, <CodeSegment: ([L:  1, P: 11]) '('>, <CodeSegment: ([L:  1, P: 12]) 'online_sales'>, <WhitespaceSegment: ([L:  1, P: 24]) ' '>, <CodeSegment: ([L:  1, P: 25]) '/'>, <WhitespaceSegment: ([L:  1, P: 26]) ' '>, <CodeSegment: ([L:  1, P: 27]) '1000.0'>, <CodeSegment: ([L:  1, P: 33]) ')'>, <WhitespaceSegment: ([L:  1, P: 34]) ' '>, <CodeSegment: ([L:  1, P: 35]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 37]) ' '>, <CodeSegment: ([L:  1, P: 38]) 'varchar'>, <CodeSegment: ([L:  1, P: 45]) ')'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'CAST'
[L:  1, P:  5]      |    raw:                                                      '('
[L:  1, P:  6]      |    raw:                                                      'ROUND'
[L:  1, P: 11]      |    raw:                                                      '('
[L:  1, P: 12]      |    raw:                                                      'online_sales'
[L:  1, P: 24]      |    whitespace:                                               ' '
[L:  1, P: 25]      |    raw:                                                      '/'
[L:  1, P: 26]      |    whitespace:                                               ' '
[L:  1, P: 27]      |    raw:                                                      '1000.0'
[L:  1, P: 33]      |    raw:                                                      ')'
[L:  1, P: 34]      |    whitespace:                                               ' '
[L:  1, P: 35]      |    raw:                                                      'AS'
[L:  1, P: 37]      |    whitespace:                                               ' '
[L:  1, P: 38]      |    raw:                                                      'varchar'
[L:  1, P: 45]      |    raw:                                                      ')'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'CAST'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  5]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'ROUND'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 11]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 12]) 'online_sales'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 24]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 25]) '/'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 26]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 27]) '1000.0'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 33]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 34]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 35]) 'AS'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 37]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 38]) 'varchar'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 45]) ')'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-name NOT LIKE '%y'] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'name'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'NOT'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'LIKE'>, <WhitespaceSegment: ([L:  1, P: 14]) ' '>, <CodeSegment: ([L:  1, P: 15]) "'%y'">)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'name'
[L:  1, P:  5]      |    whitespace:                                               ' '
[L:  1, P:  6]      |    raw:                                                      'NOT'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    raw:                                                      'LIKE'
[L:  1, P: 14]      |    whitespace:                                               ' '
[L:  1, P: 15]      |    raw:                                                      "'%y'"

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'name'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  5]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'NOT'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'LIKE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 14]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 15]) "'%y'">...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-MIN (test.id) AS min_test_id] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'MIN'>, <WhitespaceSegment: ([L:  1, P:  4]) ' '>, <CodeSegment: ([L:  1, P:  5]) '('>, <CodeSegment: ([L:  1, P:  6]) 'test'>, <CodeSegment: ([L:  1, P: 10]) '.'>, <CodeSegment: ([L:  1, P: 11]) 'id'>, <CodeSegment: ([L:  1, P: 13]) ')'>, <WhitespaceSegment: ([L:  1, P: 14]) ' '>, <CodeSegment: ([L:  1, P: 15]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 17]) ' '>, <CodeSegment: ([L:  1, P: 18]) 'min_test_id'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'(test.id) AS min_tes...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'(test.id) AS min_tes...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match IN	    	[ls=8, seg='test.id) AS min_test...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')')], sb=['TEST', '.', 'ID', ')', '', 'AS', '', 'MIN_TEST_ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SC	    	[bsm=(3, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........FunctionSegment                           	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	+   	[match=<MatchResult 1/5: '(test.id)'>, seg="'(test.id) AS min_tes...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......PostFunctionGrammar                         	OneOf.match PRN     	    	[ns=0, ps=2, ms=0, pruned=[<Ref: OverClauseSegment>, <Ref: FilterClauseGrammar>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......PostFunctionGrammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......FunctionSegment                             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=11, seg='MIN (test.id) AS min...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 2, '('), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 4, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 4, '.'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 6, ')')], sb=['MIN', '', '(', 'TEST', '.', 'ID', ')', '', 'AS', '', 'MIN_TEST_ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	+   	[match=<MatchResult 1/10: ' '>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'(test.id) AS min_tes...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............FunctionSegment                      	Brack._look_ahead_match IN	    	[ls=8, seg='test.id) AS min_test...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............FunctionSegment                      	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')')], sb=['TEST', '.', 'ID', ')', '', 'AS', '', 'MIN_TEST_ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............FunctionSegment                      	Brack._look_ahead_match SC	    	[bsm=(3, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Brack.match OUT     	+   	[match=<MatchResult 1/5: '(test.id)'>, seg="'(test.id) AS min_tes...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............PostFunctionGrammar                   	OneOf.match PRN     	    	[ns=0, ps=2, ms=0, pruned=[<Ref: OverClauseSegment>, <Ref: FilterClauseGrammar>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............PostFunctionGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=11, seg='MIN (test.id) AS min...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 2, '('), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 4, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 4, '.'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 6, ')')], sb=['MIN', '', '(', 'TEST', '.', 'ID', ')', '', 'AS', '', 'MIN_TEST_ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '.'>, seg="'.id) AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	+   	[match=<MatchResult 1/10: ' '>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'MIN'>, seg="'MIN'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' (test.id) AS min_te...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'MIN'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Brack._look_ahead_match IN	    	[ls=8, seg='test.id) AS min_test...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')')], sb=['TEST', '.', 'ID', ')', '', 'AS', '', 'MIN_TEST_ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Brack._look_ahead_match SC	    	[bsm=(3, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Delimited: [<Ref: ExpressionSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Delim._look_ahead_match IN	    	[ls=3, seg='test.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Delim._look_ahead_match SI	    	[mq=[], sb=['TEST', '.', 'ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Delim._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................Expression_A_Grammar           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................Expression_C_Grammar          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:22]	......................Expression_D_Grammar        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................Expression_D_Grammar       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:24]	........................FunctionSegment           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:30]	..............................DateAddFunctionNameSegment	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:29]	.............................DateAddFunctionNameSegment	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................DateAddFunctionNameSegment	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................FunctionSegment       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................FunctionSegment        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:30]	..............................FunctionNameSegment 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:32]	................................SingleIdentifierGrammar	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:33]	.................................SingleIdentifierGrammar	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:33]	.................................SingleIdentifierGrammar	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:32]	................................SingleIdentifierGrammar	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:32]	................................FunctionNameSegment	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:32]	................................FunctionNameSegment	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:31]	...............................FunctionNameSegment	Seque.match OUT     	+   	[match=<MatchResult 2/3: 'test.'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:30]	..............................FunctionNameSegment 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:32]	................................SingleIdentifierGrammar	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:33]	.................................SingleIdentifierGrammar	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:32]	................................SingleIdentifierGrammar	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:32]	................................FunctionNameSegment	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:31]	...............................FunctionNameSegment	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:30]	..............................FunctionNameSegment 	AnyNu.match OUT     	+   	[match=<MatchResult 2/3: 'test.'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:30]	..............................FunctionNameSegment 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:31]	...............................FunctionNameSegment	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:30]	..............................FunctionNameSegment 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:29]	.............................FunctionNameSegment  	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................FunctionNameSegment   	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................FunctionSegment       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................FunctionSegment        	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................FunctionSegment         	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................FunctionSegment          	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:24]	........................FunctionSegment           	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................FunctionSegment            	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................Expression_D_Grammar       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:23]	.......................LiteralGrammar             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:24]	........................LiteralGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:24]	........................LiteralGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:23]	.......................LiteralGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................Expression_D_Grammar       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Delim._look_ahead_match IN	    	[ls=3, seg='test.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.')], sb=['TEST', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................ColumnReferenceSegment 	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................ColumnReferenceSegment 	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................ColumnReferenceSegment 	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................ColumnReferenceSegment 	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................ComparisonOperatorGrammar	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................BinaryOperatorGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................ComparisonOperatorGrammar	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................BinaryOperatorGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................SingleIdentifierGrammar  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................SingleIdentifierGrammar 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................SingleIdentifierGrammar  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Delim._look_ahead_match IN	    	[ls=1, seg='id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Delim._look_ahead_match SI	    	[mq=[], sb=['ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:28]	............................ComparisonOperatorGrammar	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:27]	...........................ComparisonOperatorGrammar	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:27]	...........................BinaryOperatorGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:26]	..........................BinaryOperatorGrammar   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................ColumnReferenceSegment  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................ColumnReferenceSegment   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................SingleIdentifierGrammar  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:26]	..........................SingleIdentifierGrammar 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:25]	.........................SingleIdentifierGrammar  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:25]	.........................ColumnReferenceSegment   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:24]	........................ColumnReferenceSegment    	Delim.match OUT     	++  	[match=<MatchResult 3/3: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................ColumnReferenceSegment     	Colum.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:23]	.......................Expression_D_Grammar       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:22]	......................Expression_D_Grammar        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:21]	.....................Expression_D_Grammar         	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................Expression_C_Grammar         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................Expression_C_Grammar          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................Expression_A_Grammar          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................Expression_A_Grammar           	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................Expression_A_Grammar            	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................ExpressionSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................ExpressionSegment                	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DatatypeSegment                   	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	+   	[match=<MatchResult 1/5: '(test.id)'>, seg="'(test.id) AS min_tes...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'MIN (test.id)'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'AS'>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'min_test_id'>, seg="'min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'min_test_id'>, seg="'min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'min_test_id'>, seg="'min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'min_test_id'>, seg="'min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'min_test_id'>, seg="'min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'AS min_test_id'>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'AS min_test_id'>, seg="'AS min_test_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'AS min_test_id'>, seg="'AS min_test_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'MIN (test.id) AS min_test_id'>, seg="'MIN (test.id) AS min...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: 'MIN (test.id) AS min_test_id'>, seg="'MIN (test.id) AS min...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    function:
[L:  1, P:  1]      |        function_name:
[L:  1, P:  1]      |            function_name_identifier:                         'MIN'
[L:  1, P:  4]      |        whitespace:                                           ' '
[L:  1, P:  5]      |        bracketed:
[L:  1, P:  5]      |            start_bracket:                                    '('
[L:  1, P:  6]      |            [META] indent:
[L:  1, P:  6]      |            ephemeral:
[L:  1, P:  6]      |                raw:                                          'test'
[L:  1, P: 10]      |                raw:                                          '.'
[L:  1, P: 11]      |                raw:                                          'id'
[L:  1, P: 13]      |            [META] dedent:
[L:  1, P: 13]      |            end_bracket:                                      ')'
[L:  1, P: 14]      |    whitespace:                                               ' '
[L:  1, P: 15]      |    alias_expression:
[L:  1, P: 15]      |        keyword:                                              'AS'
[L:  1, P: 17]      |        whitespace:                                           ' '
[L:  1, P: 18]      |        identifier:                                           'min_test_id'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: FunctionSegment: 'MIN (test.id)'
#
###
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: FunctionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |function:
[L:  1, P:  1]      |    function_name:
[L:  1, P:  1]      |        function_name_identifier:                             'MIN'
[L:  1, P:  4]      |    whitespace:                                               ' '
[L:  1, P:  5]      |    bracketed:
[L:  1, P:  5]      |        start_bracket:                                        '('
[L:  1, P:  6]      |        [META] indent:
[L:  1, P:  6]      |        ephemeral:
[L:  1, P:  6]      |            raw:                                              'test'
[L:  1, P: 10]      |            raw:                                              '.'
[L:  1, P: 11]      |            raw:                                              'id'
[L:  1, P: 13]      |        [META] dedent:
[L:  1, P: 13]      |        end_bracket:                                          ')'

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <FunctionNameSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  4]) ' '>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: BracketedSegment: '(test.id)'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: BracketedSegment
#
###
Initial Structure:
[L:  1, P:  5]      |bracketed:
[L:  1, P:  5]      |    start_bracket:                                            '('
[L:  1, P:  6]      |    [META] indent:
[L:  1, P:  6]      |    ephemeral:
[L:  1, P:  6]      |        raw:                                                  'test'
[L:  1, P: 10]      |        raw:                                                  '.'
[L:  1, P: 11]      |        raw:                                                  'id'
[L:  1, P: 13]      |    [META] dedent:
[L:  1, P: 13]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P:  5]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Indent: ([L:  1, P:  6]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 3. Expanding: EphemeralSegment: 'test.id'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match PRN     	    	[ns=5, ps=3, ms=0, pruned=[<Ref: OrderByClauseSegment>, <Sequence: [<Ref: SeparatorKeywordSegment>, <Ref: LiteralGrammar>]>, <Sequence: [<OneOf: [<Ref: IgnoreKeywordSegment>, <R..., <Ref: NullsKeywordSegment>]>], opts=[<Ref: ExpressionSegment>, <Sequence: [<Ref: ExpressionSegment>, <Ref: AsKeywordSegment>, <Ref: DatatypeSegment>]>, <Sequence: [<OneOf: [<Ref: DatetimeUnitSegment>, <Re..., <Ref: FromKeywordSegment>, <Ref: ExpressionSegment>]>, <Sequence: [<Ref: DistinctKeywordSegment [opt]>, <OneOf: [<Ref: StarSegment>, <Delimited:...]>, <Sequence: [<OneOf: [<Ref: QuotedLiteralSegment>, <R..., <Ref: InKeywordSegment>, <OneOf: [<Ref: QuotedLiteralSe...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'test'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 2/3: 'test.'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	+   	[match=<MatchResult 2/3: 'test.'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionNameSegment                   	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=3, seg='test.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.')], sb=['TEST', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=1, seg='id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[], sb=['ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Delim.match OUT     	++  	[match=<MatchResult 3/3: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......ColumnReferenceSegment                     	Colum.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.FunctionContentsGrammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:0 ]	EphemeralSegment                                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test.id'>, seg="'test.id'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 4: EphemeralSegment
#
###
Initial Structure:
[L:  1, P:  6]      |ephemeral:
[L:  1, P:  6]      |    expression:
[L:  1, P:  6]      |        column_reference:
[L:  1, P:  6]      |            identifier:                                       'test'
[L:  1, P: 10]      |            dot:                                              '.'
[L:  1, P: 11]      |            identifier:                                       'id'

INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <ExpressionSegment: ([L:  1, P:  6])>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Dedent: ([L:  1, P: 13]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P: 13]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 14]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 15])>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 1 year)] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'DATE_ADD'>, <CodeSegment: ([L:  1, P:  9]) '('>, <CodeSegment: ([L:  1, P: 10]) 'CURRENT_DATE'>, <CodeSegment: ([L:  1, P: 22]) '('>, <CodeSegment: ([L:  1, P: 23]) "'America/New_York'">, <CodeSegment: ([L:  1, P: 41]) ')'>, <CodeSegment: ([L:  1, P: 42]) ','>, <WhitespaceSegment: ([L:  1, P: 43]) ' '>, <CodeSegment: ([L:  1, P: 44]) 'INTERVAL'>, <WhitespaceSegment: ([L:  1, P: 52]) ' '>, <CodeSegment: ([L:  1, P: 53]) '1'>, <WhitespaceSegment: ([L:  1, P: 54]) ' '>, <CodeSegment: ([L:  1, P: 55]) 'year'>, <CodeSegment: ([L:  1, P: 59]) ')'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'DATE_ADD'
[L:  1, P:  9]      |    raw:                                                      '('
[L:  1, P: 10]      |    raw:                                                      'CURRENT_DATE'
[L:  1, P: 22]      |    raw:                                                      '('
[L:  1, P: 23]      |    raw:                                                      "'America/New_York'"
[L:  1, P: 41]      |    raw:                                                      ')'
[L:  1, P: 42]      |    comma:                                                    ','
[L:  1, P: 43]      |    whitespace:                                               ' '
[L:  1, P: 44]      |    raw:                                                      'INTERVAL'
[L:  1, P: 52]      |    whitespace:                                               ' '
[L:  1, P: 53]      |    raw:                                                      '1'
[L:  1, P: 54]      |    whitespace:                                               ' '
[L:  1, P: 55]      |    raw:                                                      'year'
[L:  1, P: 59]      |    raw:                                                      ')'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'DATE_ADD'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  9]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'CURRENT_DATE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 22]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 23]) "'America/New_York'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 41]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 42]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 43]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 44]) 'INTERVAL'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 52]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 53]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 54]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 55]) 'year'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 59]) ')'>...
__ test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[1]] __
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'my_array'>, <CodeSegment: ([L:  1, P:  9]) '['>, <CodeSegment: ([L:  1, P: 10]) '1'>, <CodeSegment: ([L:  1, P: 11]) ']'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'my_array'
[L:  1, P:  9]      |    raw:                                                      '['
[L:  1, P: 10]      |    raw:                                                      '1'
[L:  1, P: 11]      |    raw:                                                      ']'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'my_array'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  9]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 11]) ']'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[OFFSET(1)]] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'my_array'>, <CodeSegment: ([L:  1, P:  9]) '['>, <CodeSegment: ([L:  1, P: 10]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 16]) '('>, <CodeSegment: ([L:  1, P: 17]) '1'>, <CodeSegment: ([L:  1, P: 18]) ')'>, <CodeSegment: ([L:  1, P: 19]) ']'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'my_array'
[L:  1, P:  9]      |    raw:                                                      '['
[L:  1, P: 10]      |    raw:                                                      'OFFSET'
[L:  1, P: 16]      |    raw:                                                      '('
[L:  1, P: 17]      |    raw:                                                      '1'
[L:  1, P: 18]      |    raw:                                                      ')'
[L:  1, P: 19]      |    raw:                                                      ']'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'my_array'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  9]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'OFFSET'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 16]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 17]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 18]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 19]) ']'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[5:8]] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'my_array'>, <CodeSegment: ([L:  1, P:  9]) '['>, <CodeSegment: ([L:  1, P: 10]) '5'>, <CodeSegment: ([L:  1, P: 11]) ':'>, <CodeSegment: ([L:  1, P: 12]) '8'>, <CodeSegment: ([L:  1, P: 13]) ']'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'my_array'
[L:  1, P:  9]      |    raw:                                                      '['
[L:  1, P: 10]      |    raw:                                                      '5'
[L:  1, P: 11]      |    raw:                                                      ':'
[L:  1, P: 12]      |    raw:                                                      '8'
[L:  1, P: 13]      |    raw:                                                      ']'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'my_array'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  9]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) '5'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 11]) ':'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 12]) '8'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 13]) ']'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-4 + my_array[OFFSET(1)]] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '4'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) '+'>, <WhitespaceSegment: ([L:  1, P:  4]) ' '>, <CodeSegment: ([L:  1, P:  5]) 'my_array'>, <CodeSegment: ([L:  1, P: 13]) '['>, <CodeSegment: ([L:  1, P: 14]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 20]) '('>, <CodeSegment: ([L:  1, P: 21]) '1'>, <CodeSegment: ([L:  1, P: 22]) ')'>, <CodeSegment: ([L:  1, P: 23]) ']'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      '4'
[L:  1, P:  2]      |    whitespace:                                               ' '
[L:  1, P:  3]      |    raw:                                                      '+'
[L:  1, P:  4]      |    whitespace:                                               ' '
[L:  1, P:  5]      |    raw:                                                      'my_array'
[L:  1, P: 13]      |    raw:                                                      '['
[L:  1, P: 14]      |    raw:                                                      'OFFSET'
[L:  1, P: 20]      |    raw:                                                      '('
[L:  1, P: 21]      |    raw:                                                      '1'
[L:  1, P: 22]      |    raw:                                                      ')'
[L:  1, P: 23]      |    raw:                                                      ']'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) '4'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  2]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  3]) '+'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  4]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  5]) 'my_array'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 13]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 14]) 'OFFSET'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 20]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 21]) '1'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 22]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 23]) ']'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-bits[OFFSET(0)] + 7] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'bits'>, <CodeSegment: ([L:  1, P:  5]) '['>, <CodeSegment: ([L:  1, P:  6]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 12]) '('>, <CodeSegment: ([L:  1, P: 13]) '0'>, <CodeSegment: ([L:  1, P: 14]) ')'>, <CodeSegment: ([L:  1, P: 15]) ']'>, <WhitespaceSegment: ([L:  1, P: 16]) ' '>, <CodeSegment: ([L:  1, P: 17]) '+'>, <WhitespaceSegment: ([L:  1, P: 18]) ' '>, <CodeSegment: ([L:  1, P: 19]) '7'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'bits'
[L:  1, P:  5]      |    raw:                                                      '['
[L:  1, P:  6]      |    raw:                                                      'OFFSET'
[L:  1, P: 12]      |    raw:                                                      '('
[L:  1, P: 13]      |    raw:                                                      '0'
[L:  1, P: 14]      |    raw:                                                      ')'
[L:  1, P: 15]      |    raw:                                                      ']'
[L:  1, P: 16]      |    whitespace:                                               ' '
[L:  1, P: 17]      |    raw:                                                      '+'
[L:  1, P: 18]      |    whitespace:                                               ' '
[L:  1, P: 19]      |    raw:                                                      '7'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'bits'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  5]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'OFFSET'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 12]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 13]) '0'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 14]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 15]) ']'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 16]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 17]) '+'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 18]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 19]) '7'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)]) / audience_size AS relative_abundance] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '('>, <CodeSegment: ([L:  1, P:  2]) 'count_18_24'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) '*'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) 'bits'>, <CodeSegment: ([L:  1, P: 20]) '['>, <CodeSegment: ([L:  1, P: 21]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 27]) '('>, <CodeSegment: ([L:  1, P: 28]) '0'>, <CodeSegment: ([L:  1, P: 29]) ')'>, <CodeSegment: ([L:  1, P: 30]) ']'>, <CodeSegment: ([L:  1, P: 31]) ')'>, <WhitespaceSegment: ([L:  1, P: 32]) ' '>, <CodeSegment: ([L:  1, P: 33]) '/'>, <WhitespaceSegment: ([L:  1, P: 34]) ' '>, <CodeSegment: ([L:  1, P: 35]) 'audience_size'>, <WhitespaceSegment: ([L:  1, P: 48]) ' '>, <CodeSegment: ([L:  1, P: 49]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 51]) ' '>, <CodeSegment: ([L:  1, P: 52]) 'relative_abundance'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=21, seg='(count_18_24 * bits[...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 0, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 6, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 8, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 11, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 12, ')')], sb=['(', 'COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/21: '('>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/21: '('>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=2, ms=1, pruned=[<Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=20, seg='count_18_24 * bits[O...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 5, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 7, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 7, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 10, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 11, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 11, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 11, ')')], sb=['COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(5, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=14, seg='OFFSET(0)]) / audien...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 1, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 1, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 4, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')')], sb=['OFFSET', '(', '0', ')', ']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(1, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=12, seg='0)]) / audience_size...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')')], sb=['0', ')', ']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(1, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=10, seg=']) / audience_size A...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 0, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')')], sb=[']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(0, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=9, seg=') / audience_size AS...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')')], sb=[')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(0, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=21, seg='(count_18_24 * bits[...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 0, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 6, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 8, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 11, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 12, ')')], sb=['(', 'COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/21: '('>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/21: '('>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * bits[OFFSET(0)])'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DateAddFunctionNameSegment      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................DateAddFunctionNameSegment       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionNameSegment               	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionSegment                        	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=5, seg='audience_size AS rel...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[], sb=['AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	+   	[match=<MatchResult 1/4: ' '>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArrayLiteralSegment                  	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ArrayLiteralSegment                   	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DatatypeSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DatatypeSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................DatatypeSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DatatypeSegment                   	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............DatatypeSegment                       	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............Expression_D_Grammar                  	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............Expression_D_Grammar                 	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............Expression_D_Grammar                 	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............Expression_D_Grammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Accessor_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Accessor_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_C_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 5/9: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 5/9: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'AS'>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: '(count_18_24 * ...ative_abundance'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '(count_18_24 * ...ative_abundance'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        bracketed:
[L:  1, P:  1]      |            start_bracket:                                    '('
[L:  1, P:  2]      |            [META] indent:
[L:  1, P:  2]      |            ephemeral:
[L:  1, P:  2]      |                raw:                                          'count_18_24'
[L:  1, P: 13]      |                whitespace:                                   ' '
[L:  1, P: 14]      |                raw:                                          '*'
[L:  1, P: 15]      |                whitespace:                                   ' '
[L:  1, P: 16]      |                raw:                                          'bits'
[L:  1, P: 20]      |                start_square_bracket:                         '['
[L:  1, P: 21]      |                raw:                                          'OFFSET'
[L:  1, P: 27]      |                bracketed:
[L:  1, P: 27]      |                    start_bracket:                            '('
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                    end_bracket:                              ')'
[L:  1, P: 30]      |                end_square_bracket:                           ']'
[L:  1, P: 31]      |            [META] dedent:
[L:  1, P: 31]      |            end_bracket:                                      ')'
[L:  1, P: 32]      |        whitespace:                                           ' '
[L:  1, P: 33]      |        binary_operator:                                      '/'
[L:  1, P: 34]      |        whitespace:                                           ' '
[L:  1, P: 35]      |        column_reference:
[L:  1, P: 35]      |            identifier:                                       'audience_size'
[L:  1, P: 48]      |    whitespace:                                               ' '
[L:  1, P: 49]      |    alias_expression:
[L:  1, P: 49]      |        keyword:                                              'AS'
[L:  1, P: 51]      |        whitespace:                                           ' '
[L:  1, P: 52]      |        identifier:                                           'relative_abundance'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: ExpressionSegment: '(count_18_24 * bits[OFFSET(0)]) / audien...'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    bracketed:
[L:  1, P:  1]      |        start_bracket:                                        '('
[L:  1, P:  2]      |        [META] indent:
[L:  1, P:  2]      |        ephemeral:
[L:  1, P:  2]      |            raw:                                              'count_18_24'
[L:  1, P: 13]      |            whitespace:                                       ' '
[L:  1, P: 14]      |            raw:                                              '*'
[L:  1, P: 15]      |            whitespace:                                       ' '
[L:  1, P: 16]      |            raw:                                              'bits'
[L:  1, P: 20]      |            start_square_bracket:                             '['
[L:  1, P: 21]      |            raw:                                              'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |                end_bracket:                                  ')'
[L:  1, P: 30]      |            end_square_bracket:                               ']'
[L:  1, P: 31]      |        [META] dedent:
[L:  1, P: 31]      |        end_bracket:                                          ')'
[L:  1, P: 32]      |    whitespace:                                               ' '
[L:  1, P: 33]      |    binary_operator:                                          '/'
[L:  1, P: 34]      |    whitespace:                                               ' '
[L:  1, P: 35]      |    column_reference:
[L:  1, P: 35]      |        identifier:                                           'audience_size'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: BracketedSegment: '(count_18_24 * bits[OFFSET(0)])'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: BracketedSegment
#
###
Initial Structure:
[L:  1, P:  1]      |bracketed:
[L:  1, P:  1]      |    start_bracket:                                            '('
[L:  1, P:  2]      |    [META] indent:
[L:  1, P:  2]      |    ephemeral:
[L:  1, P:  2]      |        raw:                                                  'count_18_24'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        raw:                                                  '*'
[L:  1, P: 15]      |        whitespace:                                           ' '
[L:  1, P: 16]      |        raw:                                                  'bits'
[L:  1, P: 20]      |        start_square_bracket:                                 '['
[L:  1, P: 21]      |        raw:                                                  'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |            end_bracket:                                      ')'
[L:  1, P: 30]      |        end_square_bracket:                                   ']'
[L:  1, P: 31]      |    [META] dedent:
[L:  1, P: 31]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P:  1]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Indent: ([L:  1, P:  2]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 3. Expanding: EphemeralSegment: 'count_18_24 * bits[OFFSET(0)]'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	EphemeralSegment                                  	OneOf.match PRN     	    	[ns=2, ps=1, ms=0, pruned=[<Ref: SelectableGrammar>], opts=[<Ref: ExpressionSegment>, <Delimited: [<Ref: ColumnReferenceSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionNameSegment                   	Funct.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=9, seg='count_18_24 * bits[O...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 5, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 8, ']')], sb=['COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(0)', ']']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	+   	[match=<MatchResult 1/8: ' '>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Delim.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......ColumnReferenceSegment                     	Colum.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ArrayLiteralSegment                       	Array.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' * bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........DatatypeSegment                        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Datat.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArithmeticBinaryOperatorGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '*'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=5, seg='bits[OFFSET(0)]']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 1, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 4, ']')], sb=['BITS', '[', 'OFFSET', '(0)', ']']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: StartSquareBracketSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/4: '['>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '['>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'bits'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=0, ms=1, pruned=[], opts=[<Ref: ArrayAccessorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match IN	    	[ls=3, seg='OFFSET(0)]']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']')], sb=['OFFSET', '(0)', ']']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match SC	    	[bsm=(2, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ArrayAccessorSegment                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArrayAccessorSegment                   	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack.match OUT     	++  	[match=<MatchResult 5/5: '[OFFSET(0)]'>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ArrayAccessorSegment                     	Array.match OUT     	++  	[match=<MatchResult 1/1: '[OFFSET(0)]'>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Accessor_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: '[OFFSET(0)]'>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: '[OFFSET(0)]'>, seg="'[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: '[OFFSET(0)]'>, seg="'[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 2/2: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)]'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	++  	[match=<MatchResult 2/2: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Seque.match OUT     	++  	[match=<MatchResult 4/4: '* bits[OFFSET(0)]'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 4/4: '* bits[OFFSET(0)]'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 4/4: '* bits[OFFSET(0)]'>, seg="'* bits[OFFSET(0)]'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	++  	[match=<MatchResult 6/6: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	++  	[match=<MatchResult 6/6: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.EphemeralSegment                                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	EphemeralSegment                                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * bits[OFFSET(0)]'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 4: EphemeralSegment
#
###
Initial Structure:
[L:  1, P:  2]      |ephemeral:
[L:  1, P:  2]      |    expression:
[L:  1, P:  2]      |        column_reference:
[L:  1, P:  2]      |            identifier:                                       'count_18_24'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        binary_operator:                                      '*'
[L:  1, P: 15]      |        whitespace:                                           ' '
[L:  1, P: 16]      |        column_reference:
[L:  1, P: 16]      |            identifier:                                       'bits'
[L:  1, P: 20]      |        array_accessor:
[L:  1, P: 20]      |            start_square_bracket:                             '['
[L:  1, P: 21]      |            [META] indent:
[L:  1, P: 21]      |            ephemeral:
[L:  1, P: 21]      |                raw:                                          'OFFSET'
[L:  1, P: 27]      |                bracketed:
[L:  1, P: 27]      |                    start_bracket:                            '('
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                    end_bracket:                              ')'
[L:  1, P: 30]      |            [META] dedent:
[L:  1, P: 30]      |            end_square_bracket:                               ']'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 4. Expanding: ExpressionSegment: 'count_18_24 * bits[OFFSET(0)]'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 5: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  2]      |expression:
[L:  1, P:  2]      |    column_reference:
[L:  1, P:  2]      |        identifier:                                           'count_18_24'
[L:  1, P: 13]      |    whitespace:                                               ' '
[L:  1, P: 14]      |    binary_operator:                                          '*'
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    column_reference:
[L:  1, P: 16]      |        identifier:                                           'bits'
[L:  1, P: 20]      |    array_accessor:
[L:  1, P: 20]      |        start_square_bracket:                                 '['
[L:  1, P: 21]      |        [META] indent:
[L:  1, P: 21]      |        ephemeral:
[L:  1, P: 21]      |            raw:                                              'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |                end_bracket:                                  ')'
[L:  1, P: 30]      |        [META] dedent:
[L:  1, P: 30]      |        end_square_bracket:                                   ']'

INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P:  2])>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 13]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <SymbolSegment: ([L:  1, P: 14]) '*'>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P: 16])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 5. Expanding: ArrayAccessorSegment: '[OFFSET(0)]'
#
###
DEBUG    sqlfluff.parser:base.py:777 ArrayAccessorSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ArrayAccessorSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 6: ArrayAccessorSegment
#
###
Initial Structure:
[L:  1, P: 20]      |array_accessor:
[L:  1, P: 20]      |    start_square_bracket:                                     '['
[L:  1, P: 21]      |    [META] indent:
[L:  1, P: 21]      |    ephemeral:
[L:  1, P: 21]      |        raw:                                                  'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |            end_bracket:                                      ')'
[L:  1, P: 30]      |    [META] dedent:
[L:  1, P: 30]      |    end_square_bracket:                                       ']'

INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <SymbolSegment: ([L:  1, P: 20]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <Indent: ([L:  1, P: 21]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 6. Expanding: EphemeralSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match IN	    	[ls=2, seg='OFFSET(0)']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match SI	    	[mq=[], sb=['OFFSET', '(0)']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:1 ]	.EphemeralSegment                                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NumericLiteralSegment>, <Ref: ExpressionSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..EphemeralSegment                                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:9 ]	.........FunctionSegment                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:15]	...............DateAddFunctionNameSegment         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:14]	..............DateAddFunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............DateAddFunctionNameSegment           	DateA.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:14]	..............FunctionNameSegment                 	Seque.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionNameSegment                  	Funct.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	AnyNu.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:14]	..............FunctionSegment                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:13]	.............FunctionSegment                      	Brack.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	Brack.match OUT     	++  	[match=<MatchResult 1/1: '(0)'>, seg="'(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:11]	...........FunctionSegment                        	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:10]	..........FunctionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:9 ]	.........FunctionSegment                          	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........FunctionSegment                           	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:6 ]	......Expression_D_Grammar                        	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:6 ]	......Expression_C_Grammar                        	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:3 ]	...Expression_A_Grammar                           	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:3 ]	...ExpressionSegment                              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..ExpressionSegment                               	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..EphemeralSegment                                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:1 ]	.EphemeralSegment                                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:0 ]	EphemeralSegment                                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 7: EphemeralSegment
#
###
Initial Structure:
[L:  1, P: 21]      |ephemeral:
[L:  1, P: 21]      |    expression:
[L:  1, P: 21]      |        function:
[L:  1, P: 21]      |            function_name:
[L:  1, P: 21]      |                function_name_identifier:                     'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                [META] indent:
[L:  1, P: 28]      |                ephemeral:
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                [META] dedent:
[L:  1, P: 29]      |                end_bracket:                                  ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 7. Expanding: ExpressionSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 8: ExpressionSegment
#
###
Initial Structure:
[L:  1, P: 21]      |expression:
[L:  1, P: 21]      |    function:
[L:  1, P: 21]      |        function_name:
[L:  1, P: 21]      |            function_name_identifier:                         'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            [META] indent:
[L:  1, P: 28]      |            ephemeral:
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |            [META] dedent:
[L:  1, P: 29]      |            end_bracket:                                      ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 8. Expanding: FunctionSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 9: FunctionSegment
#
###
Initial Structure:
[L:  1, P: 21]      |function:
[L:  1, P: 21]      |    function_name:
[L:  1, P: 21]      |        function_name_identifier:                             'OFFSET'
[L:  1, P: 27]      |    bracketed:
[L:  1, P: 27]      |        start_bracket:                                        '('
[L:  1, P: 28]      |        [META] indent:
[L:  1, P: 28]      |        ephemeral:
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |        [META] dedent:
[L:  1, P: 29]      |        end_bracket:                                          ')'

INFO     sqlfluff.parser:base.py:251 [PD:9] Skipping expansion of <FunctionNameSegment: ([L:  1, P: 21])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 9. Expanding: BracketedSegment: '(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 10: BracketedSegment
#
###
Initial Structure:
[L:  1, P: 27]      |bracketed:
[L:  1, P: 27]      |    start_bracket:                                            '('
[L:  1, P: 28]      |    [META] indent:
[L:  1, P: 28]      |    ephemeral:
[L:  1, P: 28]      |        raw:                                                  '0'
[L:  1, P: 29]      |    [META] dedent:
[L:  1, P: 29]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <SymbolSegment: ([L:  1, P: 27]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <Indent: ([L:  1, P: 28]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 10. Expanding: EphemeralSegment: '0'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:0 ]	FunctionContentsGrammar                           	AnyNu.match PRN     	    	[ns=5, ps=3, ms=0, pruned=[<Ref: OrderByClauseSegment>, <Sequence: [<Ref: SeparatorKeywordSegment>, <Ref: LiteralGrammar>]>, <Sequence: [<OneOf: [<Ref: IgnoreKeywordSegment>, <R..., <Ref: NullsKeywordSegment>]>], opts=[<Ref: ExpressionSegment>, <Sequence: [<Ref: ExpressionSegment>, <Ref: AsKeywordSegment>, <Ref: DatatypeSegment>]>, <Sequence: [<OneOf: [<Ref: DatetimeUnitSegment>, <Re..., <Ref: FromKeywordSegment>, <Ref: ExpressionSegment>]>, <Sequence: [<Ref: DistinctKeywordSegment [opt]>, <OneOf: [<Ref: StarSegment>, <Delimited:...]>, <Sequence: [<OneOf: [<Ref: QuotedLiteralSegment>, <R..., <Ref: InKeywordSegment>, <OneOf: [<Ref: QuotedLiteralSe...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionNameSegment                   	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:1 ]	.FunctionContentsGrammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:0 ]	FunctionContentsGrammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:0 ]	EphemeralSegment                                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 11: EphemeralSegment
#
###
Initial Structure:
[L:  1, P: 28]      |ephemeral:
[L:  1, P: 28]      |    expression:
[L:  1, P: 28]      |        literal:                                              '0'

INFO     sqlfluff.parser:base.py:251 [PD:11] Skipping expansion of <ExpressionSegment: ([L:  1, P: 28])>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <Dedent: ([L:  1, P: 29]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <SymbolSegment: ([L:  1, P: 29]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <Dedent: ([L:  1, P: 30]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <SymbolSegment: ([L:  1, P: 30]) ']'>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Dedent: ([L:  1, P: 31]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P: 31]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 32]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <SymbolSegment: ([L:  1, P: 33]) '/'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 34]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P: 35])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 48]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 49])>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-count_18_24 * bits[OFFSET(0)] + count_25_34] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'count_18_24'>, <WhitespaceSegment: ([L:  1, P: 12]) ' '>, <CodeSegment: ([L:  1, P: 13]) '*'>, <WhitespaceSegment: ([L:  1, P: 14]) ' '>, <CodeSegment: ([L:  1, P: 15]) 'bits'>, <CodeSegment: ([L:  1, P: 19]) '['>, <CodeSegment: ([L:  1, P: 20]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 26]) '('>, <CodeSegment: ([L:  1, P: 27]) '0'>, <CodeSegment: ([L:  1, P: 28]) ')'>, <CodeSegment: ([L:  1, P: 29]) ']'>, <WhitespaceSegment: ([L:  1, P: 30]) ' '>, <CodeSegment: ([L:  1, P: 31]) '+'>, <WhitespaceSegment: ([L:  1, P: 32]) ' '>, <CodeSegment: ([L:  1, P: 33]) 'count_25_34'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'count_18_24'
[L:  1, P: 12]      |    whitespace:                                               ' '
[L:  1, P: 13]      |    raw:                                                      '*'
[L:  1, P: 14]      |    whitespace:                                               ' '
[L:  1, P: 15]      |    raw:                                                      'bits'
[L:  1, P: 19]      |    raw:                                                      '['
[L:  1, P: 20]      |    raw:                                                      'OFFSET'
[L:  1, P: 26]      |    raw:                                                      '('
[L:  1, P: 27]      |    raw:                                                      '0'
[L:  1, P: 28]      |    raw:                                                      ')'
[L:  1, P: 29]      |    raw:                                                      ']'
[L:  1, P: 30]      |    whitespace:                                               ' '
[L:  1, P: 31]      |    raw:                                                      '+'
[L:  1, P: 32]      |    whitespace:                                               ' '
[L:  1, P: 33]      |    raw:                                                      'count_25_34'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'count_18_24'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 12]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 13]) '*'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 14]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 15]) 'bits'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 19]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 20]) 'OFFSET'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 26]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 27]) '0'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 28]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 29]) ']'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 30]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 31]) '+'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 32]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 33]) 'count_25_34'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)] + count_25_34) / audience_size AS relative_abundance] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '('>, <CodeSegment: ([L:  1, P:  2]) 'count_18_24'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) '*'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) 'bits'>, <CodeSegment: ([L:  1, P: 20]) '['>, <CodeSegment: ([L:  1, P: 21]) 'OFFSET'>, <CodeSegment: ([L:  1, P: 27]) '('>, <CodeSegment: ([L:  1, P: 28]) '0'>, <CodeSegment: ([L:  1, P: 29]) ')'>, <CodeSegment: ([L:  1, P: 30]) ']'>, <WhitespaceSegment: ([L:  1, P: 31]) ' '>, <CodeSegment: ([L:  1, P: 32]) '+'>, <WhitespaceSegment: ([L:  1, P: 33]) ' '>, <CodeSegment: ([L:  1, P: 34]) 'count_25_34'>, <CodeSegment: ([L:  1, P: 45]) ')'>, <WhitespaceSegment: ([L:  1, P: 46]) ' '>, <CodeSegment: ([L:  1, P: 47]) '/'>, <WhitespaceSegment: ([L:  1, P: 48]) ' '>, <CodeSegment: ([L:  1, P: 49]) 'audience_size'>, <WhitespaceSegment: ([L:  1, P: 62]) ' '>, <CodeSegment: ([L:  1, P: 63]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 65]) ' '>, <CodeSegment: ([L:  1, P: 66]) 'relative_abundance'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=25, seg='(count_18_24 * bits[...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 0, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 6, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 8, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 11, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 16, ')')], sb=['(', 'COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/25: '('>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/25: '('>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=2, ms=1, pruned=[<Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=24, seg='count_18_24 * bits[O...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 5, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 7, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 7, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 10, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 15, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 15, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 15, ')')], sb=['COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(5, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=18, seg='OFFSET(0)] + count_2...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 1, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 1, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 4, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')')], sb=['OFFSET', '(', '0', ')', ']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(1, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=16, seg='0)] + count_25_34) /...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 1, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 7, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 7, ')')], sb=['0', ')', ']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(1, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=14, seg='] + count_25_34) / a...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 0, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')')], sb=[']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(0, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match IN	    	[ls=13, seg=' + count_25_34) / au...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 4, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 4, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 4, ')')], sb=['', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack._look_ahead_match SC	    	[bsm=(4, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Brack.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=25, seg='(count_18_24 * bits[...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 0, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 6, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 8, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 11, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 16, ')')], sb=['(', 'COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(', '0', ')', ']', '', '+', '', 'COUNT_25_34', ')', '', '/', '', 'AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=8, ms=2, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>], opts=[<Ref: StartBracketSegment>, <Ref: BinaryOperatorGrammar>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/25: '('>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/25: '('>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/25: ''>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: '(count_18_24 * ... + count_25_34)'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '/'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DateAddFunctionNameSegment      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................DateAddFunctionNameSegment       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionNameSegment               	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionSegment                        	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=5, seg='audience_size AS rel...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[], sb=['AUDIENCE_SIZE', '', 'AS', '', 'RELATIVE_ABUNDANCE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	+   	[match=<MatchResult 1/4: ' '>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'audience_size'>, seg="'audience_size'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArrayLiteralSegment                  	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ArrayLiteralSegment                   	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DatatypeSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DatatypeSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS relative_abundan...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................DatatypeSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DatatypeSegment                   	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............DatatypeSegment                       	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............Expression_D_Grammar                  	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............Expression_D_Grammar                 	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............Expression_D_Grammar                 	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............Expression_D_Grammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........Expression_D_Grammar                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Accessor_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Accessor_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_C_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'audience_size'>, seg="'audience_size AS rel...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	+   	[match=<MatchResult 3/7: '/ audience_size'>, seg="'/ audience_size AS r...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 5/9: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 5/9: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: '(count_18_24 * .../ audience_size'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'AS'>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'relative_abundance'>, seg="'relative_abundance'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'AS relative_abundance'>, seg="'AS relative_abundanc...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: '(count_18_24 * ...ative_abundance'>, seg="'(count_18_24 * bits[...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '(count_18_24 * ...ative_abundance'>, seg="'(count_18_24 * bits[...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        bracketed:
[L:  1, P:  1]      |            start_bracket:                                    '('
[L:  1, P:  2]      |            [META] indent:
[L:  1, P:  2]      |            ephemeral:
[L:  1, P:  2]      |                raw:                                          'count_18_24'
[L:  1, P: 13]      |                whitespace:                                   ' '
[L:  1, P: 14]      |                raw:                                          '*'
[L:  1, P: 15]      |                whitespace:                                   ' '
[L:  1, P: 16]      |                raw:                                          'bits'
[L:  1, P: 20]      |                start_square_bracket:                         '['
[L:  1, P: 21]      |                raw:                                          'OFFSET'
[L:  1, P: 27]      |                bracketed:
[L:  1, P: 27]      |                    start_bracket:                            '('
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                    end_bracket:                              ')'
[L:  1, P: 30]      |                end_square_bracket:                           ']'
[L:  1, P: 31]      |                whitespace:                                   ' '
[L:  1, P: 32]      |                raw:                                          '+'
[L:  1, P: 33]      |                whitespace:                                   ' '
[L:  1, P: 34]      |                raw:                                          'count_25_34'
[L:  1, P: 45]      |            [META] dedent:
[L:  1, P: 45]      |            end_bracket:                                      ')'
[L:  1, P: 46]      |        whitespace:                                           ' '
[L:  1, P: 47]      |        binary_operator:                                      '/'
[L:  1, P: 48]      |        whitespace:                                           ' '
[L:  1, P: 49]      |        column_reference:
[L:  1, P: 49]      |            identifier:                                       'audience_size'
[L:  1, P: 62]      |    whitespace:                                               ' '
[L:  1, P: 63]      |    alias_expression:
[L:  1, P: 63]      |        keyword:                                              'AS'
[L:  1, P: 65]      |        whitespace:                                           ' '
[L:  1, P: 66]      |        identifier:                                           'relative_abundance'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: ExpressionSegment: '(count_18_24 * bits[OFFSET(0)] + count_2...'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    bracketed:
[L:  1, P:  1]      |        start_bracket:                                        '('
[L:  1, P:  2]      |        [META] indent:
[L:  1, P:  2]      |        ephemeral:
[L:  1, P:  2]      |            raw:                                              'count_18_24'
[L:  1, P: 13]      |            whitespace:                                       ' '
[L:  1, P: 14]      |            raw:                                              '*'
[L:  1, P: 15]      |            whitespace:                                       ' '
[L:  1, P: 16]      |            raw:                                              'bits'
[L:  1, P: 20]      |            start_square_bracket:                             '['
[L:  1, P: 21]      |            raw:                                              'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |                end_bracket:                                  ')'
[L:  1, P: 30]      |            end_square_bracket:                               ']'
[L:  1, P: 31]      |            whitespace:                                       ' '
[L:  1, P: 32]      |            raw:                                              '+'
[L:  1, P: 33]      |            whitespace:                                       ' '
[L:  1, P: 34]      |            raw:                                              'count_25_34'
[L:  1, P: 45]      |        [META] dedent:
[L:  1, P: 45]      |        end_bracket:                                          ')'
[L:  1, P: 46]      |    whitespace:                                               ' '
[L:  1, P: 47]      |    binary_operator:                                          '/'
[L:  1, P: 48]      |    whitespace:                                               ' '
[L:  1, P: 49]      |    column_reference:
[L:  1, P: 49]      |        identifier:                                           'audience_size'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: BracketedSegment: '(count_18_24 * bits[OFFSET(0)] + count_2...'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: BracketedSegment
#
###
Initial Structure:
[L:  1, P:  1]      |bracketed:
[L:  1, P:  1]      |    start_bracket:                                            '('
[L:  1, P:  2]      |    [META] indent:
[L:  1, P:  2]      |    ephemeral:
[L:  1, P:  2]      |        raw:                                                  'count_18_24'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        raw:                                                  '*'
[L:  1, P: 15]      |        whitespace:                                           ' '
[L:  1, P: 16]      |        raw:                                                  'bits'
[L:  1, P: 20]      |        start_square_bracket:                                 '['
[L:  1, P: 21]      |        raw:                                                  'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |            end_bracket:                                      ')'
[L:  1, P: 30]      |        end_square_bracket:                                   ']'
[L:  1, P: 31]      |        whitespace:                                           ' '
[L:  1, P: 32]      |        raw:                                                  '+'
[L:  1, P: 33]      |        whitespace:                                           ' '
[L:  1, P: 34]      |        raw:                                                  'count_25_34'
[L:  1, P: 45]      |    [META] dedent:
[L:  1, P: 45]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P:  1]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Indent: ([L:  1, P:  2]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 3. Expanding: EphemeralSegment: 'count_18_24 * bits[OFFSET(0)] + count_25...'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	EphemeralSegment                                  	OneOf.match PRN     	    	[ns=2, ps=1, ms=0, pruned=[<Ref: SelectableGrammar>], opts=[<Ref: ExpressionSegment>, <Delimited: [<Ref: ColumnReferenceSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionNameSegment                   	Funct.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=13, seg='count_18_24 * bits[O...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 5, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 8, ']')], sb=['COUNT_18_24', '', '*', '', 'BITS', '[', 'OFFSET', '(0)', ']', '', '+', '', 'COUNT_25_34']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	+   	[match=<MatchResult 1/12: ' '>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24'>, seg="'count_18_24'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Delim.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......ColumnReferenceSegment                     	Colum.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ArrayLiteralSegment                       	Array.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="' * bits[OFFSET(0)] +...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........DatatypeSegment                        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	Seque.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Datat.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'count_18_24'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArithmeticBinaryOperatorGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match OUT     	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/11: '*'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=9, seg='bits[OFFSET(0)] + co...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786e9a0>, 1, '['), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 4, ']')], sb=['BITS', '[', 'OFFSET', '(0)', ']', '', '+', '', 'COUNT_25_34']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: StartSquareBracketSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/8: '['>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '['>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'bits'>, seg="'bits'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'bits'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=0, ms=1, pruned=[], opts=[<Ref: ArrayAccessorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match IN	    	[ls=7, seg='OFFSET(0)] + count_2...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>, 2, ']')], sb=['OFFSET', '(0)', ']', '', '+', '', 'COUNT_25_34']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack._look_ahead_match SC	    	[bsm=(2, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786eac0>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ArrayAccessorSegment                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ArrayAccessorSegment                   	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ArrayAccessorSegment                    	Brack.match OUT     	+   	[match=<MatchResult 5/9: '[OFFSET(0)]'>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ArrayAccessorSegment                     	Array.match OUT     	+   	[match=<MatchResult 1/5: '[OFFSET(0)]'>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Accessor_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/5: '[OFFSET(0)]'>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: '[OFFSET(0)]'>, seg="'[OFFSET(0)] + count_...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: '[OFFSET(0)]'>, seg="'[OFFSET(0)] + count_...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 2/6: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 2/6: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)] + co...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 2/6: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 2/6: 'bits[OFFSET(0)]'>, seg="'bits[OFFSET(0)] + co...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Seque.match OUT     	+   	[match=<MatchResult 4/8: '* bits[OFFSET(0)]'>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 4/8: '* bits[OFFSET(0)]'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: PlusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ArithmeticBinaryOperatorGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArithmeticBinaryOperatorGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '+'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............FunctionSegment                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=1, seg='count_25_34']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['COUNT_25_34']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_25_34'>, seg="'count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: '+ count_25_34'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '+ count_25_34'>, seg="'+ count_25_34'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 8/8: '* bits[OFFSET(0)] + count_25_34'>, seg="'* bits[OFFSET(0)] + ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	++  	[match=<MatchResult 10/10: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	++  	[match=<MatchResult 10/10: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.EphemeralSegment                                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	EphemeralSegment                                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'count_18_24 * b...] + count_25_34'>, seg="'count_18_24 * bits[O...'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 4: EphemeralSegment
#
###
Initial Structure:
[L:  1, P:  2]      |ephemeral:
[L:  1, P:  2]      |    expression:
[L:  1, P:  2]      |        column_reference:
[L:  1, P:  2]      |            identifier:                                       'count_18_24'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        binary_operator:                                      '*'
[L:  1, P: 15]      |        whitespace:                                           ' '
[L:  1, P: 16]      |        column_reference:
[L:  1, P: 16]      |            identifier:                                       'bits'
[L:  1, P: 20]      |        array_accessor:
[L:  1, P: 20]      |            start_square_bracket:                             '['
[L:  1, P: 21]      |            [META] indent:
[L:  1, P: 21]      |            ephemeral:
[L:  1, P: 21]      |                raw:                                          'OFFSET'
[L:  1, P: 27]      |                bracketed:
[L:  1, P: 27]      |                    start_bracket:                            '('
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                    end_bracket:                              ')'
[L:  1, P: 30]      |            [META] dedent:
[L:  1, P: 30]      |            end_square_bracket:                               ']'
[L:  1, P: 31]      |        whitespace:                                           ' '
[L:  1, P: 32]      |        binary_operator:                                      '+'
[L:  1, P: 33]      |        whitespace:                                           ' '
[L:  1, P: 34]      |        column_reference:
[L:  1, P: 34]      |            identifier:                                       'count_25_34'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 4. Expanding: ExpressionSegment: 'count_18_24 * bits[OFFSET(0)] + count_25...'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 5: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  2]      |expression:
[L:  1, P:  2]      |    column_reference:
[L:  1, P:  2]      |        identifier:                                           'count_18_24'
[L:  1, P: 13]      |    whitespace:                                               ' '
[L:  1, P: 14]      |    binary_operator:                                          '*'
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    column_reference:
[L:  1, P: 16]      |        identifier:                                           'bits'
[L:  1, P: 20]      |    array_accessor:
[L:  1, P: 20]      |        start_square_bracket:                                 '['
[L:  1, P: 21]      |        [META] indent:
[L:  1, P: 21]      |        ephemeral:
[L:  1, P: 21]      |            raw:                                              'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |                end_bracket:                                  ')'
[L:  1, P: 30]      |        [META] dedent:
[L:  1, P: 30]      |        end_square_bracket:                                   ']'
[L:  1, P: 31]      |    whitespace:                                               ' '
[L:  1, P: 32]      |    binary_operator:                                          '+'
[L:  1, P: 33]      |    whitespace:                                               ' '
[L:  1, P: 34]      |    column_reference:
[L:  1, P: 34]      |        identifier:                                           'count_25_34'

INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P:  2])>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 13]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <SymbolSegment: ([L:  1, P: 14]) '*'>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P: 16])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 5. Expanding: ArrayAccessorSegment: '[OFFSET(0)]'
#
###
DEBUG    sqlfluff.parser:base.py:777 ArrayAccessorSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ArrayAccessorSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 6: ArrayAccessorSegment
#
###
Initial Structure:
[L:  1, P: 20]      |array_accessor:
[L:  1, P: 20]      |    start_square_bracket:                                     '['
[L:  1, P: 21]      |    [META] indent:
[L:  1, P: 21]      |    ephemeral:
[L:  1, P: 21]      |        raw:                                                  'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |            end_bracket:                                      ')'
[L:  1, P: 30]      |    [META] dedent:
[L:  1, P: 30]      |    end_square_bracket:                                       ']'

INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <SymbolSegment: ([L:  1, P: 20]) '['>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <Indent: ([L:  1, P: 21]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 6. Expanding: EphemeralSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match IN	    	[ls=2, seg='OFFSET(0)']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match SI	    	[mq=[], sb=['OFFSET', '(0)']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:1 ]	.EphemeralSegment                                 	Delim._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:1 ]	.EphemeralSegment                                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NumericLiteralSegment>, <Ref: ExpressionSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..EphemeralSegment                                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:9 ]	.........FunctionSegment                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:15]	...............DateAddFunctionNameSegment         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:14]	..............DateAddFunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............DateAddFunctionNameSegment           	DateA.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:15]	...............FunctionNameSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:14]	..............FunctionNameSegment                 	Seque.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionNameSegment                  	Funct.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:13]	.............FunctionSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	AnyNu.match OUT     	+   	[match=<MatchResult 1/2: 'OFFSET'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:14]	..............FunctionSegment                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:13]	.............FunctionSegment                      	Brack.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:12]	............FunctionSegment                       	Brack.match OUT     	++  	[match=<MatchResult 1/1: '(0)'>, seg="'(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:11]	...........FunctionSegment                        	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:10]	..........FunctionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:9 ]	.........FunctionSegment                          	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........FunctionSegment                           	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:6 ]	......Expression_D_Grammar                        	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:6 ]	......Expression_C_Grammar                        	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:3 ]	...Expression_A_Grammar                           	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:3 ]	...ExpressionSegment                              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..ExpressionSegment                               	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:6  MD:2 ]	..EphemeralSegment                                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:1 ]	.EphemeralSegment                                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:6  MD:0 ]	EphemeralSegment                                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'OFFSET(0)'>, seg="'OFFSET(0)'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 7: EphemeralSegment
#
###
Initial Structure:
[L:  1, P: 21]      |ephemeral:
[L:  1, P: 21]      |    expression:
[L:  1, P: 21]      |        function:
[L:  1, P: 21]      |            function_name:
[L:  1, P: 21]      |                function_name_identifier:                     'OFFSET'
[L:  1, P: 27]      |            bracketed:
[L:  1, P: 27]      |                start_bracket:                                '('
[L:  1, P: 28]      |                [META] indent:
[L:  1, P: 28]      |                ephemeral:
[L:  1, P: 28]      |                    raw:                                      '0'
[L:  1, P: 29]      |                [META] dedent:
[L:  1, P: 29]      |                end_bracket:                                  ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 7. Expanding: ExpressionSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 8: ExpressionSegment
#
###
Initial Structure:
[L:  1, P: 21]      |expression:
[L:  1, P: 21]      |    function:
[L:  1, P: 21]      |        function_name:
[L:  1, P: 21]      |            function_name_identifier:                         'OFFSET'
[L:  1, P: 27]      |        bracketed:
[L:  1, P: 27]      |            start_bracket:                                    '('
[L:  1, P: 28]      |            [META] indent:
[L:  1, P: 28]      |            ephemeral:
[L:  1, P: 28]      |                raw:                                          '0'
[L:  1, P: 29]      |            [META] dedent:
[L:  1, P: 29]      |            end_bracket:                                      ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 8. Expanding: FunctionSegment: 'OFFSET(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 9: FunctionSegment
#
###
Initial Structure:
[L:  1, P: 21]      |function:
[L:  1, P: 21]      |    function_name:
[L:  1, P: 21]      |        function_name_identifier:                             'OFFSET'
[L:  1, P: 27]      |    bracketed:
[L:  1, P: 27]      |        start_bracket:                                        '('
[L:  1, P: 28]      |        [META] indent:
[L:  1, P: 28]      |        ephemeral:
[L:  1, P: 28]      |            raw:                                              '0'
[L:  1, P: 29]      |        [META] dedent:
[L:  1, P: 29]      |        end_bracket:                                          ')'

INFO     sqlfluff.parser:base.py:251 [PD:9] Skipping expansion of <FunctionNameSegment: ([L:  1, P: 21])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 9. Expanding: BracketedSegment: '(0)'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 10: BracketedSegment
#
###
Initial Structure:
[L:  1, P: 27]      |bracketed:
[L:  1, P: 27]      |    start_bracket:                                            '('
[L:  1, P: 28]      |    [META] indent:
[L:  1, P: 28]      |    ephemeral:
[L:  1, P: 28]      |        raw:                                                  '0'
[L:  1, P: 29]      |    [META] dedent:
[L:  1, P: 29]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <SymbolSegment: ([L:  1, P: 27]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <Indent: ([L:  1, P: 28]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 10. Expanding: EphemeralSegment: '0'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:0 ]	FunctionContentsGrammar                           	AnyNu.match PRN     	    	[ns=5, ps=3, ms=0, pruned=[<Ref: OrderByClauseSegment>, <Sequence: [<Ref: SeparatorKeywordSegment>, <Ref: LiteralGrammar>]>, <Sequence: [<OneOf: [<Ref: IgnoreKeywordSegment>, <R..., <Ref: NullsKeywordSegment>]>], opts=[<Ref: ExpressionSegment>, <Sequence: [<Ref: ExpressionSegment>, <Ref: AsKeywordSegment>, <Ref: DatatypeSegment>]>, <Sequence: [<OneOf: [<Ref: DatetimeUnitSegment>, <Re..., <Ref: FromKeywordSegment>, <Ref: ExpressionSegment>]>, <Sequence: [<Ref: DistinctKeywordSegment [opt]>, <OneOf: [<Ref: StarSegment>, <Delimited:...]>, <Sequence: [<OneOf: [<Ref: QuotedLiteralSegment>, <R..., <Ref: InKeywordSegment>, <OneOf: [<Ref: QuotedLiteralSe...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionNameSegment                   	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:1 ]	.FunctionContentsGrammar                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:10 MD:0 ]	FunctionContentsGrammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:10 MD:0 ]	EphemeralSegment                                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0'>, seg="'0'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 11: EphemeralSegment
#
###
Initial Structure:
[L:  1, P: 28]      |ephemeral:
[L:  1, P: 28]      |    expression:
[L:  1, P: 28]      |        literal:                                              '0'

INFO     sqlfluff.parser:base.py:251 [PD:11] Skipping expansion of <ExpressionSegment: ([L:  1, P: 28])>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <Dedent: ([L:  1, P: 29]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:10] Skipping expansion of <SymbolSegment: ([L:  1, P: 29]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <Dedent: ([L:  1, P: 30]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:6] Skipping expansion of <SymbolSegment: ([L:  1, P: 30]) ']'>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 31]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <SymbolSegment: ([L:  1, P: 32]) '+'>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 33]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:5] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P: 34])>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Dedent: ([L:  1, P: 45]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P: 45]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 46]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <SymbolSegment: ([L:  1, P: 47]) '/'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 48]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <ColumnReferenceSegment: ([L:  1, P: 49])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 62]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 63])>...
_ test__dialect__ansi_specific_segment_parses[SelectStatementSegment-SELECT t.val/t.id FROM test WHERE id*1.0/id > 0.8] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'SELECT'>, <WhitespaceSegment: ([L:  1, P:  7]) ' '>, <CodeSegment: ([L:  1, P:  8]) 't'>, <CodeSegment: ([L:  1, P:  9]) '.'>, <CodeSegment: ([L:  1, P: 10]) 'val'>, <CodeSegment: ([L:  1, P: 13]) '/'>, <CodeSegment: ([L:  1, P: 14]) 't'>, <CodeSegment: ([L:  1, P: 15]) '.'>, <CodeSegment: ([L:  1, P: 16]) 'id'>, <WhitespaceSegment: ([L:  1, P: 18]) ' '>, <CodeSegment: ([L:  1, P: 19]) 'FROM'>, <WhitespaceSegment: ([L:  1, P: 23]) ' '>, <CodeSegment: ([L:  1, P: 24]) 'test'>, <WhitespaceSegment: ([L:  1, P: 28]) ' '>, <CodeSegment: ([L:  1, P: 29]) 'WHERE'>, <WhitespaceSegment: ([L:  1, P: 34]) ' '>, <CodeSegment: ([L:  1, P: 35]) 'id'>, <CodeSegment: ([L:  1, P: 37]) '*'>, <CodeSegment: ([L:  1, P: 38]) '1.0'>, <CodeSegment: ([L:  1, P: 41]) '/'>, <CodeSegment: ([L:  1, P: 42]) 'id'>, <WhitespaceSegment: ([L:  1, P: 44]) ' '>, <CodeSegment: ([L:  1, P: 45]) '>'>, <WhitespaceSegment: ([L:  1, P: 46]) ' '>, <CodeSegment: ([L:  1, P: 47]) '0.8'>)
Base route...
<SelectStatementSegment: ([L:  1, P:  1])>
<SelectStatementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectStatementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....SelectClauseSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/25: 'SELECT'>, seg="'SELECT t.val/t.id FR...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........WildcardIdentifierSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/23: 't'>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/23: 't'>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........WildcardIdentifierSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/23: 't'>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........WildcardIdentifierSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/22: '.'>, seg="'.val/t.id FROM test ...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........WildcardIdentifierSegment                	Seque.match OUT     	+   	[match=<MatchResult 2/23: 't.'>, seg="'t.val/t.id FROM test...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........WildcardIdentifierSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/21: 'val'>, seg="'val/t.id FROM test W...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'val/t.id FROM test W...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/21: 'val'>, seg="'val/t.id FROM test W...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........WildcardIdentifierSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/21: 'val'>, seg="'val/t.id FROM test W...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........WildcardIdentifierSegment               	Ref.match OUT       	    	[match=<MatchResult 0/20: ''>, seg="'/t.id FROM test WHER...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........WildcardIdentifierSegment                	Seque.match OUT     	    	[match=<MatchResult 0/21: ''>, seg="'val/t.id FROM test W...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........WildcardIdentifierSegment                 	AnyNu.match OUT     	+   	[match=<MatchResult 2/23: 't.'>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........WildcardIdentifierSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/21: ''>, seg="'val/t.id FROM test W...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Wildc.match OUT     	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......WildcardExpressionSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardExpressionSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....WildcardExpressionSegment                     	Wildc.match OUT     	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....SelectClauseSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/23: ''>, seg="'t.val/t.id FROM test...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...SelectClauseSegment                            	Seque.match OUT     	+   	[match=<MatchResult 1/25: 'SELECT'>, seg="'SELECT t.val/t.id FR...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...SelectClauseSegment                            	Start._look_ahead_match IN	    	[ls=24, seg=' t.val/t.id FROM tes...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...SelectClauseSegment                            	Start._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: FromKeywordSegment>, <Ref: WhereKeywordSegment>, <Ref: OrderKeywordSegment>, <Ref: LimitKeywor...]>, 9, 'FROM'), (<OneOf: [<Ref: FromKeywordSegment>, <Ref: WhereKeywordSegment>, <Ref: OrderKeywordSegment>, <Ref: LimitKeywor...]>, 13, 'WHERE')], sb=['', 'T', '.', 'VAL', '/', 'T', '.', 'ID', '', 'FROM', '', 'TEST', '', 'WHERE', '', 'ID', '*', '1.0', '/', 'ID', '', '>', '', '0.8']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...SelectClauseSegment                            	OneOf.match PRN     	    	[ns=0, ps=5, ms=1, pruned=[<Ref: FromKeywordSegment>, <Ref: OrderKeywordSegment>, <Ref: LimitKeywordSegment>, <Ref: OverlapsKeywordSegment>, <Ref: SetOperatorSegment>], opts=[<Ref: WhereKeywordSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....SelectClauseSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...SelectClauseSegment                            	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...SelectClauseSegment                            	OneOf.match PRN     	    	[ns=0, ps=5, ms=1, pruned=[<Ref: WhereKeywordSegment>, <Ref: OrderKeywordSegment>, <Ref: LimitKeywordSegment>, <Ref: OverlapsKeywordSegment>, <Ref: SetOperatorSegment>], opts=[<Ref: FromKeywordSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....SelectClauseSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/15: 'FROM'>, seg="'FROM test WHERE id*1...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...SelectClauseSegment                            	OneOf.match OUT     	+   	[match=<MatchResult 1/15: 'FROM'>, seg="'FROM test WHERE id*1...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...SelectClauseSegment                            	Start._look_ahead_match SC	    	[bsm=(9, 1, <OneOf: [<Ref: FromKeywordSegment>, <Ref: WhereKeywordSegment>, <Ref: OrderKeywordSegment>, <Ref: LimitKeywor...]>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..SelectClauseSegment                             	Start.match OUT     	+   	[match=<MatchResult 9/25: 'SELECT t.val/t.id'>, seg="'SELECT t.val/t.id FR...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseSegment                              	Selec.match OUT     	+   	[match=<MatchResult 1/17: 'SELECT t.val/t.id'>, seg="'SELECT t.val/t.id FR...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectStatementSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/17: 'SELECT t.val/t.id'>, seg="'SELECT t.val/t.id FR...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FromClauseSegment                              	Ref.match OUT       	+   	[match=<MatchResult 1/15: 'FROM'>, seg="'FROM test WHERE id*1...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FromClauseSegment                              	Start._look_ahead_match IN	    	[ls=14, seg=' test WHERE id*1.0/i...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FromClauseSegment                              	Start._look_ahead_match SI	    	[mq=[(<Ref: FromClauseTerminatorGrammar>, 3, 'WHERE')], sb=['', 'TEST', '', 'WHERE', '', 'ID', '*', '1.0', '/', 'ID', '', '>', '', '0.8']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...FromClauseTerminatorGrammar                    	OneOf.match PRN     	    	[ns=0, ps=8, ms=1, pruned=[<Ref: LimitKeywordSegment>, <Sequence: [<Ref: GroupKeywordSegment>, <Ref: ByKeywordSegment>]>, <Sequence: [<Ref: OrderKeywordSegment>, <Ref: ByKeywordSegment>]>, <Ref: HavingKeywordSegment>, <Ref: QualifyKeywordSegment>, <Ref: WindowKeywordSegment>, <Ref: SetOperatorSegment>, <Ref: WithNoSchemaBindingClauseSegment>], opts=[<Ref: WhereKeywordSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....FromClauseTerminatorGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...FromClauseTerminatorGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FromClauseSegment                              	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FromClauseSegment                              	Start._look_ahead_match SC	    	[bsm=(3, 1, <Ref: FromClauseTerminatorGrammar>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..FromClauseSegment                               	Start.match OUT     	+   	[match=<MatchResult 3/15: 'FROM test'>, seg="'FROM test WHERE id*1...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.FromClauseSegment                                	FromC.match OUT     	+   	[match=<MatchResult 1/13: 'FROM test'>, seg="'FROM test WHERE id*1...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectStatementSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'FROM test'>, seg="'FROM test WHERE id*1...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WhereClauseSegment                             	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WhereClauseSegment                             	Start._look_ahead_match IN	    	[ls=10, seg=' id*1.0/id > 0.8']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WhereClauseSegment                             	Start._look_ahead_match SI	    	[mq=[], sb=['', 'ID', '*', '1.0', '/', 'ID', '', '>', '', '0.8']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WhereClauseSegment                             	Start._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WhereClauseSegment                              	Start.match OUT     	++  	[match=<MatchResult 11/11: 'WHERE id*1.0/id > 0.8'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WhereClauseSegment                               	Where.match OUT     	++  	[match=<MatchResult 1/1: 'WHERE id*1.0/id > 0.8'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectStatementSegment                           	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'WHERE id*1.0/id > 0.8'>, seg="'WHERE id*1.0/id > 0....'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectStatementSegment                            	Seque.match OUT     	++  	[match=<MatchResult 6/6: 'SELECT t.val/t....id*1.0/id > 0.8'>, seg="'SELECT t.val/t.id FR...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectStatementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectStatementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_statement:
[L:  1, P:  1]      |    select_clause:
[L:  1, P:  1]      |        keyword:                                              'SELECT'
[L:  1, P:  7]      |        whitespace:                                           ' '
[L:  1, P:  8]      |        raw:                                                  't'
[L:  1, P:  9]      |        raw:                                                  '.'
[L:  1, P: 10]      |        raw:                                                  'val'
[L:  1, P: 13]      |        raw:                                                  '/'
[L:  1, P: 14]      |        raw:                                                  't'
[L:  1, P: 15]      |        raw:                                                  '.'
[L:  1, P: 16]      |        raw:                                                  'id'
[L:  1, P: 18]      |    whitespace:                                               ' '
[L:  1, P: 19]      |    [META] dedent:
[L:  1, P: 19]      |    from_clause:
[L:  1, P: 19]      |        keyword:                                              'FROM'
[L:  1, P: 23]      |        whitespace:                                           ' '
[L:  1, P: 24]      |        raw:                                                  'test'
[L:  1, P: 28]      |    whitespace:                                               ' '
[L:  1, P: 29]      |    where_clause:
[L:  1, P: 29]      |        keyword:                                              'WHERE'
[L:  1, P: 34]      |        whitespace:                                           ' '
[L:  1, P: 35]      |        raw:                                                  'id'
[L:  1, P: 37]      |        raw:                                                  '*'
[L:  1, P: 38]      |        raw:                                                  '1.0'
[L:  1, P: 41]      |        raw:                                                  '/'
[L:  1, P: 42]      |        raw:                                                  'id'
[L:  1, P: 44]      |        whitespace:                                           ' '
[L:  1, P: 45]      |        raw:                                                  '>'
[L:  1, P: 46]      |        whitespace:                                           ' '
[L:  1, P: 47]      |        raw:                                                  '0.8'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: SelectClauseSegment: 'SELECT t.val/t.id'
#
###
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:1 ]	.SelectClauseSegmentGrammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'SELECT'>, seg="'SELECT t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:2 ]	..SelectClauseModifierSegment                     	OneOf.match PRN     	    	[ns=0, ps=2, ms=0, pruned=[<Ref: DistinctKeywordSegment>, <Ref: AllKeywordSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:2 ]	..SelectClauseModifierSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:1 ]	.SelectClauseModifierSegment                      	Selec.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:1 ]	.SelectClauseSegmentGrammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..SelectClauseSegmentGrammar                      	Delim._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..SelectClauseSegmentGrammar                      	Delim._look_ahead_match SI	    	[mq=[], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..SelectClauseSegmentGrammar                      	Delim._look_ahead_match SC	    	[bsm=None]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:4 ]	....SelectClauseElementSegment                    	Greed._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:4 ]	....SelectClauseElementSegment                    	Greed._look_ahead_match SI	    	[mq=[], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:4 ]	....SelectClauseElementSegment                    	Greed._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:3 ]	...SelectClauseElementSegment                     	Greed.match OUT     	++  	[match=<MatchResult 7/7: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..SelectClauseElementSegment                      	Selec.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..SelectClauseSegmentGrammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:1 ]	.SelectClauseSegmentGrammar                       	Delim.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:0 ]	SelectClauseSegmentGrammar                        	Seque.match OUT     	++  	[match=<MatchResult 4/4: 'SELECT t.val/t.id'>, seg="'SELECT t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:0 ]	SelectClauseSegment                               	Ref.match OUT       	++  	[match=<MatchResult 4/4: 'SELECT t.val/t.id'>, seg="'SELECT t.val/t.id'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: SelectClauseSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause:
[L:  1, P:  1]      |    keyword:                                                  'SELECT'
[L:  1, P:  7]      |    [META] indent:
[L:  1, P:  7]      |    whitespace:                                               ' '
[L:  1, P:  8]      |    select_clause_element:
[L:  1, P:  8]      |        raw:                                                  't'
[L:  1, P:  9]      |        raw:                                                  '.'
[L:  1, P: 10]      |        raw:                                                  'val'
[L:  1, P: 13]      |        raw:                                                  '/'
[L:  1, P: 14]      |        raw:                                                  't'
[L:  1, P: 15]      |        raw:                                                  '.'
[L:  1, P: 16]      |        raw:                                                  'id'

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <KeywordSegment: ([L:  1, P:  1]) 'SELECT'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <Indent: ([L:  1, P:  7]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  7]) ' '>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: SelectClauseElementSegment: 't.val/t.id'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.')], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=5, seg='val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.')], sb=['VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........ArithmeticBinaryOperatorGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.')], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=5, seg='val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.')], sb=['VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ArithmeticBinaryOperatorGrammar     	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_C_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............FunctionSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:18]	..................DateAddFunctionNameSegment      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:17]	.................DateAddFunctionNameSegment       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................DateAddFunctionNameSegment        	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................FunctionSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............FunctionSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	+   	[match=<MatchResult 2/3: 't.'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................FunctionNameSegment             	AnyNu.match OUT     	+   	[match=<MatchResult 2/3: 't.'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................FunctionNameSegment             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:18]	..................FunctionNameSegment             	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	++  	[match=<MatchResult 3/3: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................FunctionNameSegment               	Funct.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................FunctionSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............FunctionSegment                    	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............FunctionSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............FunctionSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........FunctionSegment                        	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........LiteralGrammar                         	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:11]	...........LiteralGrammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=3, seg='t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.')], sb=['T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............ColumnReferenceSegment              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............ColumnReferenceSegment              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=1, seg='id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[], sb=['ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:12]	............ColumnReferenceSegment                	Delim.match OUT     	++  	[match=<MatchResult 3/3: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........ColumnReferenceSegment                 	Colum.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:9 ]	.........Expression_C_Grammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:8 ]	........Expression_C_Grammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	++  	[match=<MatchResult 3/3: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	++  	[match=<MatchResult 3/3: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:2  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:2  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  8]      |select_clause_element:
[L:  1, P:  8]      |    expression:
[L:  1, P:  8]      |        column_reference:
[L:  1, P:  8]      |            identifier:                                       't'
[L:  1, P:  9]      |            dot:                                              '.'
[L:  1, P: 10]      |            identifier:                                       'val'
[L:  1, P: 13]      |        binary_operator:                                      '/'
[L:  1, P: 14]      |        column_reference:
[L:  1, P: 14]      |            identifier:                                       't'
[L:  1, P: 15]      |            dot:                                              '.'
[L:  1, P: 16]      |            identifier:                                       'id'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <ExpressionSegment: ([L:  1, P:  8])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 18]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <Dedent: ([L:  1, P: 19]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: FromClauseSegment: 'FROM test'
#
###
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:1 ]	.FromClauseSegment                                	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'FROM'>, seg="'FROM test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..FromClauseSegment                               	Delim._look_ahead_match IN	    	[ls=1, seg='test']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..FromClauseSegment                               	Delim._look_ahead_match SI	    	[mq=[], sb=['TEST']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..FromClauseSegment                               	Delim._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....FromExpressionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Ref: MLTableExpressionSegment>], opts=[<Ref: FromExpressionElementSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:7 ]	.......FromExpressionElementSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......FromExpressionElementSegment               	Optio.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Bracketed: [<Ref: TableExpressionSegment>]>], opts=[<Ref: TableExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........TableExpressionSegment                   	OneOf.match PRN     	    	[ns=3, ps=1, ms=0, pruned=[<Bracketed: [<Ref: SelectableGrammar>]>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: TableReferenceSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........TableExpressionSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................FunctionNameSegment               	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........TableExpressionSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............TableReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=1, seg='test']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............TableReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['TEST']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............TableReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............TableReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............TableReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............TableReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............TableReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........TableReferenceSegment                  	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........TableReferenceSegment                   	Table.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........TableExpressionSegment                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........TableExpressionSegment                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........TableExpressionSegment                    	Table.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........FromExpressionElementSegment              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......FromExpressionElementSegment               	Optio.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:6 ]	......FromExpressionElementSegment                	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:5 ]	.....FromExpressionElementSegment                 	FromE.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:5 ]	.....FromExpressionSegment                        	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....FromExpressionSegment                         	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:3 ]	...FromExpressionSegment                          	Condi.match OUT     	++  	[match=<MatchResult 1/1: ''>, seg="''"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:3 ]	...FromExpressionSegment                          	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..FromExpressionSegment                           	FromE.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..FromClauseSegment                               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:1 ]	.FromClauseSegment                                	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'test'>, seg="'test'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:0 ]	FromClauseSegment                                 	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'FROM test'>, seg="'FROM test'"]
DEBUG    sqlfluff.parser:base.py:859 FromClauseSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: FromClauseSegment
#
###
Initial Structure:
[L:  1, P: 19]      |from_clause:
[L:  1, P: 19]      |    keyword:                                                  'FROM'
[L:  1, P: 23]      |    whitespace:                                               ' '
[L:  1, P: 24]      |    from_expression:
[L:  1, P: 24]      |        [META] indent:
[L:  1, P: 24]      |        from_expression_element:
[L:  1, P: 24]      |            table_expression:
[L:  1, P: 24]      |                table_reference:
[L:  1, P: 24]      |                    identifier:                               'test'
[L:  1, P: 28]      |        [META] dedent:

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <KeywordSegment: ([L:  1, P: 19]) 'FROM'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 23]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <FromExpressionSegment: ([L:  1, P: 24])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 28]) ' '>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: WhereClauseSegment: 'WHERE id*1.0/id > 0.8'
#
###
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:1 ]	.WhereClauseSegment                               	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'WHERE'>, seg="'WHERE id*1.0/id > 0....'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:1 ]	.WhereClauseSegment                               	Optio.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Bracketed: [<Ref: ExpressionSegment>]>], opts=[<Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........FunctionSegment                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DateAddFunctionNameSegment         	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DateAddFunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............DateAddFunctionNameSegment           	DateA.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............FunctionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............FunctionNameSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............FunctionNameSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............FunctionNameSegment                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............FunctionNameSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionNameSegment                 	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............FunctionNameSegment                  	Funct.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............FunctionSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	AnyNu.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........FunctionSegment                          	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........FunctionSegment                           	Funct.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........LiteralGrammar                            	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........LiteralGrammar                            	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match IN	    	[ls=9, seg='id*1.0/id > 0.8']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match SI	    	[mq=[], sb=['ID', '*', '1.0', '/', 'ID', '', '>', '', '0.8']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ArithmeticBinaryOperatorGrammar       	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ArithmeticBinaryOperatorGrammar      	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ArithmeticBinaryOperatorGrammar       	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........ColumnReferenceSegment                   	Delim.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........ColumnReferenceSegment                    	Colum.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArrayLiteralSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........ArrayLiteralSegment                      	Array.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........DatatypeSegment                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............SingleIdentifierGrammar            	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............SingleIdentifierGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............DatatypeSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........DatatypeSegment                        	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........DatatypeSegment                         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........DatatypeSegment                          	Datat.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:6 ]	......Expression_D_Grammar                        	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:6 ]	......Expression_C_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'id'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MultiplySegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ArithmeticBinaryOperatorGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/8: '*'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match IN	    	[ls=7, seg='1.0/id > 0.8']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match SI	    	[mq=[], sb=['1.0', '/', 'ID', '', '>', '', '0.8']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ArithmeticBinaryOperatorGrammar     	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ArithmeticBinaryOperatorGrammar    	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ArithmeticBinaryOperatorGrammar     	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'1.0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'1.0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'1.0'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'1.0'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........ColumnReferenceSegment                 	Delim.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	Colum.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ArrayLiteralSegment                   	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ArrayLiteralSegment                    	Array.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........Expression_D_Grammar                    	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DatatypeSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........DatatypeSegment                        	Datat.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........Expression_D_Grammar                    	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Accessor_Grammar                         	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Accessor_Grammar                         	AnyNu.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	AnyNu.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_C_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/7: '1.0'>, seg="'1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	+   	[match=<MatchResult 2/8: '*1.0'>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 2/8: '*1.0'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ArithmeticBinaryOperatorGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '/'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................FunctionNameSegment               	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match IN	    	[ls=5, seg='id > 0.8']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match SI	    	[mq=[], sb=['ID', '', '>', '', '0.8']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ArithmeticBinaryOperatorGrammar     	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>], opts=[<Ref: BitwiseRShiftSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................BitwiseRShiftSegment             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................BitwiseRShiftSegment              	Seque.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............BitwiseRShiftSegment               	Bitwi.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ArithmeticBinaryOperatorGrammar    	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ArithmeticBinaryOperatorGrammar     	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=6, ms=1, pruned=[<Ref: EqualsSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: GreaterThanSegment>, <Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	+   	[match=<MatchResult 1/4: ' '>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........ColumnReferenceSegment                 	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........ColumnReferenceSegment                  	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............ArrayLiteralSegment                   	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ArrayLiteralSegment                    	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........Expression_D_Grammar                    	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DatatypeSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............DatatypeSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........DatatypeSegment                        	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........Expression_D_Grammar                   	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:12]	............Expression_D_Grammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........Expression_D_Grammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........Expression_D_Grammar                    	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Accessor_Grammar                         	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Accessor_Grammar                         	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_C_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'id'>, seg="'id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	+   	[match=<MatchResult 2/6: '/id'>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 2/6: '/id'>, seg="'/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>], opts=[<Ref: BitwiseRShiftSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............BitwiseRShiftSegment                 	Ref.match OUT       	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:13]	.............BitwiseRShiftSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="' 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............BitwiseRShiftSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........BitwiseRShiftSegment                   	Bitwi.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ArithmeticBinaryOperatorGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ArithmeticBinaryOperatorGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=6, ms=1, pruned=[<Ref: EqualsSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: GreaterThanSegment>, <Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '>'>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:10]	..........LiteralGrammar                          	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:8 ]	........Expression_C_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: '0.8'>, seg="'0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	++  	[match=<MatchResult 3/3: '> 0.8'>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '> 0.8'>, seg="'> 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match OUT     	++  	[match=<MatchResult 8/8: '*1.0/id > 0.8'>, seg="'*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:3 ]	...Expression_A_Grammar                           	Seque.match OUT     	++  	[match=<MatchResult 9/9: 'id*1.0/id > 0.8'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:3 ]	...ExpressionSegment                              	Ref.match OUT       	++  	[match=<MatchResult 9/9: 'id*1.0/id > 0.8'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..ExpressionSegment                               	Expre.match OUT     	++  	[match=<MatchResult 1/1: 'id*1.0/id > 0.8'>, seg="'id*1.0/id > 0.8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:1  MD:2 ]	..WhereClauseSegment                              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id*1.0/id > 0.8'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:1 ]	.WhereClauseSegment                               	Optio.match OUT     	++  	[match=<MatchResult 1/1: 'id*1.0/id > 0.8'>, seg="'id*1.0/id > 0.8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:1  MD:0 ]	WhereClauseSegment                                	Seque.match OUT     	++  	[match=<MatchResult 5/5: 'WHERE id*1.0/id > 0.8'>, seg="'WHERE id*1.0/id > 0....'"]
DEBUG    sqlfluff.parser:base.py:859 WhereClauseSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: WhereClauseSegment
#
###
Initial Structure:
[L:  1, P: 29]      |where_clause:
[L:  1, P: 29]      |    keyword:                                                  'WHERE'
[L:  1, P: 34]      |    [META] indent:
[L:  1, P: 34]      |    whitespace:                                               ' '
[L:  1, P: 35]      |    expression:
[L:  1, P: 35]      |        column_reference:
[L:  1, P: 35]      |            identifier:                                       'id'
[L:  1, P: 37]      |        binary_operator:                                      '*'
[L:  1, P: 38]      |        literal:                                              '1.0'
[L:  1, P: 41]      |        binary_operator:                                      '/'
[L:  1, P: 42]      |        column_reference:
[L:  1, P: 42]      |            identifier:                                       'id'
[L:  1, P: 44]      |        whitespace:                                           ' '
[L:  1, P: 45]      |        comparison_operator:                                  '>'
[L:  1, P: 46]      |        whitespace:                                           ' '
[L:  1, P: 47]      |        literal:                                              '0.8'
[L:  1, P: 50]      |    [META] dedent:

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <KeywordSegment: ([L:  1, P: 29]) 'WHERE'>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <Indent: ([L:  1, P: 34]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 34]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <ExpressionSegment: ([L:  1, P: 35])>...
INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <Dedent: ([L:  1, P: 50]) ''>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-t.val/t.id] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 't'>, <CodeSegment: ([L:  1, P:  2]) '.'>, <CodeSegment: ([L:  1, P:  3]) 'val'>, <CodeSegment: ([L:  1, P:  6]) '/'>, <CodeSegment: ([L:  1, P:  7]) 't'>, <CodeSegment: ([L:  1, P:  8]) '.'>, <CodeSegment: ([L:  1, P:  9]) 'id'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.')], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=5, seg='val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.')], sb=['VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......ColumnReferenceSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ArithmeticBinaryOperatorGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=7, seg='t.val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 5, '.')], sb=['T', '.', 'VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=5, seg='val/t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 3, '.')], sb=['VAL', '/', 'T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ArithmeticBinaryOperatorGrammar     	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'val'>, seg="'val'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 't'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	+   	[match=<MatchResult 2/7: 't.'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'val'>, seg="'val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 't.val'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: MinusSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: DivideSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ArithmeticBinaryOperatorGrammar       	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArithmeticBinaryOperatorGrammar        	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/4: '/'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................DateAddFunctionNameSegment      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................DateAddFunctionNameSegment       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/3: 't'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	+   	[match=<MatchResult 2/3: 't.'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:21]	.....................SingleIdentifierGrammar      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:20]	....................SingleIdentifierGrammar       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................FunctionNameSegment           	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................FunctionNameSegment            	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	AnyNu.match OUT     	+   	[match=<MatchResult 2/3: 't.'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	++  	[match=<MatchResult 3/3: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionNameSegment               	Funct.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................FunctionSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionSegment                    	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionSegment                        	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............LiteralGrammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........LiteralGrammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=3, seg='t.id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[(<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.'), (<OneOf: [<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: Dot...]>, 1, '.')], sb=['T', '.', 'ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ColumnReferenceSegment              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=0, ps=0, ms=2, pruned=[], opts=[<Ref: DotSegment>, <Sequence: [<Ref: DotSegment>, <Ref: DotSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ColumnReferenceSegment             	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ColumnReferenceSegment              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '.'>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't'>, seg="'t'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match IN	    	[ls=1, seg='id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Delim._look_ahead_match SI	    	[mq=[], sb=['ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................ComparisonOperatorGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............BinaryOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............BinaryOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ColumnReferenceSegment              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ColumnReferenceSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............SingleIdentifierGrammar             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............SingleIdentifierGrammar              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'id'>, seg="'id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim.match OUT     	++  	[match=<MatchResult 3/3: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Colum.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_C_Grammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_C_Grammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.id'>, seg="'t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	++  	[match=<MatchResult 2/2: '/t.id'>, seg="'/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	++  	[match=<MatchResult 3/3: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	++  	[match=<MatchResult 3/3: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 't.val/t.id'>, seg="'t.val/t.id'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        column_reference:
[L:  1, P:  1]      |            identifier:                                       't'
[L:  1, P:  2]      |            dot:                                              '.'
[L:  1, P:  3]      |            identifier:                                       'val'
[L:  1, P:  6]      |        binary_operator:                                      '/'
[L:  1, P:  7]      |        column_reference:
[L:  1, P:  7]      |            identifier:                                       't'
[L:  1, P:  8]      |            dot:                                              '.'
[L:  1, P:  9]      |            identifier:                                       'id'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS INT64)] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'CAST'>, <CodeSegment: ([L:  1, P:  5]) '('>, <CodeSegment: ([L:  1, P:  6]) 'num'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 12]) ' '>, <CodeSegment: ([L:  1, P: 13]) 'INT64'>, <CodeSegment: ([L:  1, P: 18]) ')'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/8: 'CAST'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match IN	    	[ls=6, seg='num AS INT64)']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 5, ')')], sb=['NUM', '', 'AS', '', 'INT64', ')']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SC	    	[bsm=(5, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num AS INT64'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........FunctionSegment                           	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'num AS INT64'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	++  	[match=<MatchResult 1/1: '(num AS INT64)'>, seg="'(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS INT64)'>, seg="'CAST(num AS INT64)'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    function:
[L:  1, P:  1]      |        function_name:
[L:  1, P:  1]      |            function_name_identifier:                         'CAST'
[L:  1, P:  5]      |        bracketed:
[L:  1, P:  5]      |            start_bracket:                                    '('
[L:  1, P:  6]      |            [META] indent:
[L:  1, P:  6]      |            ephemeral:
[L:  1, P:  6]      |                raw:                                          'num'
[L:  1, P:  9]      |                whitespace:                                   ' '
[L:  1, P: 10]      |                raw:                                          'AS'
[L:  1, P: 12]      |                whitespace:                                   ' '
[L:  1, P: 13]      |                raw:                                          'INT64'
[L:  1, P: 18]      |            [META] dedent:
[L:  1, P: 18]      |            end_bracket:                                      ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: FunctionSegment: 'CAST(num AS INT64)'
#
###
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: FunctionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |function:
[L:  1, P:  1]      |    function_name:
[L:  1, P:  1]      |        function_name_identifier:                             'CAST'
[L:  1, P:  5]      |    bracketed:
[L:  1, P:  5]      |        start_bracket:                                        '('
[L:  1, P:  6]      |        [META] indent:
[L:  1, P:  6]      |        ephemeral:
[L:  1, P:  6]      |            raw:                                              'num'
[L:  1, P:  9]      |            whitespace:                                       ' '
[L:  1, P: 10]      |            raw:                                              'AS'
[L:  1, P: 12]      |            whitespace:                                       ' '
[L:  1, P: 13]      |            raw:                                              'INT64'
[L:  1, P: 18]      |        [META] dedent:
[L:  1, P: 18]      |        end_bracket:                                          ')'

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <FunctionNameSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: BracketedSegment: '(num AS INT64)'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: BracketedSegment
#
###
Initial Structure:
[L:  1, P:  5]      |bracketed:
[L:  1, P:  5]      |    start_bracket:                                            '('
[L:  1, P:  6]      |    [META] indent:
[L:  1, P:  6]      |    ephemeral:
[L:  1, P:  6]      |        raw:                                                  'num'
[L:  1, P:  9]      |        whitespace:                                           ' '
[L:  1, P: 10]      |        raw:                                                  'AS'
[L:  1, P: 12]      |        whitespace:                                           ' '
[L:  1, P: 13]      |        raw:                                                  'INT64'
[L:  1, P: 18]      |    [META] dedent:
[L:  1, P: 18]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P:  5]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Indent: ([L:  1, P:  6]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 3. Expanding: EphemeralSegment: 'num AS INT64'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match PRN     	    	[ns=5, ps=3, ms=0, pruned=[<Ref: OrderByClauseSegment>, <Sequence: [<Ref: SeparatorKeywordSegment>, <Ref: LiteralGrammar>]>, <Sequence: [<OneOf: [<Ref: IgnoreKeywordSegment>, <R..., <Ref: NullsKeywordSegment>]>], opts=[<Ref: ExpressionSegment>, <Sequence: [<Ref: ExpressionSegment>, <Ref: AsKeywordSegment>, <Ref: DatatypeSegment>]>, <Sequence: [<OneOf: [<Ref: DatetimeUnitSegment>, <Re..., <Ref: FromKeywordSegment>, <Ref: ExpressionSegment>]>, <Sequence: [<Ref: DistinctKeywordSegment [opt]>, <OneOf: [<Ref: StarSegment>, <Delimited:...]>, <Sequence: [<OneOf: [<Ref: QuotedLiteralSegment>, <R..., <Ref: InKeywordSegment>, <OneOf: [<Ref: QuotedLiteralSe...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionNameSegment                   	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=5, seg='num AS INT64']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[], sb=['NUM', '', 'AS', '', 'INT64']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	+   	[match=<MatchResult 1/4: ' '>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......ColumnReferenceSegment                     	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ArrayLiteralSegment                       	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........DatatypeSegment                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.FunctionContentsGrammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DateAddFunctionNameSegment         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	DateA.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionNameSegment                  	Funct.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........FunctionSegment                           	Funct.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........LiteralGrammar                            	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........LiteralGrammar                            	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match IN	    	[ls=5, seg='num AS INT64']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match SI	    	[mq=[], sb=['NUM', '', 'AS', '', 'INT64']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	+   	[match=<MatchResult 1/4: ' '>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Colum.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ArrayLiteralSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Array.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............SingleIdentifierGrammar            	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............SingleIdentifierGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DatatypeSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_C_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:3 ]	...ExpressionSegment                              	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'num'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'AS'>, seg="'AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...DatatypeSegment                                	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....DatatypeSegment                              	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........SingleIdentifierGrammar                   	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........SingleIdentifierGrammar                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......DatatypeSegment                            	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......DatatypeSegment                            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......DatatypeSegment                             	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....DatatypeSegment                              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....DatatypeSegment                               	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...DatatypeSegment                                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..DatatypeSegment                                 	Datat.match OUT     	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'INT64'>, seg="'INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:1 ]	.FunctionContentsGrammar                          	Seque.match OUT     	++  	[match=<MatchResult 5/5: 'num AS INT64'>, seg="'num AS INT64'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 5/5: 'num AS INT64'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:0 ]	EphemeralSegment                                  	Ref.match OUT       	++  	[match=<MatchResult 5/5: 'num AS INT64'>, seg="'num AS INT64'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 4: EphemeralSegment
#
###
Initial Structure:
[L:  1, P:  6]      |ephemeral:
[L:  1, P:  6]      |    expression:
[L:  1, P:  6]      |        column_reference:
[L:  1, P:  6]      |            identifier:                                       'num'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    keyword:                                                  'AS'
[L:  1, P: 12]      |    whitespace:                                               ' '
[L:  1, P: 13]      |    data_type:
[L:  1, P: 13]      |        data_type_identifier:                                 'INT64'

INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <ExpressionSegment: ([L:  1, P:  6])>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <KeywordSegment: ([L:  1, P: 10]) 'AS'>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 12]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <DatatypeSegment: ([L:  1, P: 13])>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Dedent: ([L:  1, P: 18]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P: 18]) ')'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS numeric(8,4))] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'CAST'>, <CodeSegment: ([L:  1, P:  5]) '('>, <CodeSegment: ([L:  1, P:  6]) 'num'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 12]) ' '>, <CodeSegment: ([L:  1, P: 13]) 'numeric'>, <CodeSegment: ([L:  1, P: 20]) '('>, <CodeSegment: ([L:  1, P: 21]) '8'>, <CodeSegment: ([L:  1, P: 22]) ','>, <CodeSegment: ([L:  1, P: 23]) '4'>, <CodeSegment: ([L:  1, P: 24]) ')'>, <CodeSegment: ([L:  1, P: 25]) ')'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="'(num AS numeric(8,4)...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/12: ''>, seg="'(num AS numeric(8,4)...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/13: ''>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/13: 'CAST'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match IN	    	[ls=11, seg='num AS numeric(8,4))']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 5, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>, 5, '('), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 9, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 10, ')')], sb=['NUM', '', 'AS', '', 'NUMERIC', '(', '8', ',', '4', ')', ')']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SC	    	[bsm=(5, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea00>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match IN	    	[ls=5, seg='8,4))']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 3, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 4, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 4, ')')], sb=['8', ',', '4', ')', ')']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SC	    	[bsm=(3, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match IN	    	[ls=1, seg=')']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SI	    	[mq=[(<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')'), (<sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>, 0, ')')], sb=[')']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack._look_ahead_match SC	    	[bsm=(0, 1, <sqlfluff.core.parser.parsers.StringParser object at 0x7df2b786ea30>)]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num AS numeric(8,4)'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........FunctionSegment                           	Brack.match OUT     	++  	[match=<MatchResult 1/1: 'num AS numeric(8,4)'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	++  	[match=<MatchResult 1/1: '(num AS numeric(8,4))'>, seg="'(num AS numeric(8,4)...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'CAST(num AS numeric(8,4))'>, seg="'CAST(num AS numeric(...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    function:
[L:  1, P:  1]      |        function_name:
[L:  1, P:  1]      |            function_name_identifier:                         'CAST'
[L:  1, P:  5]      |        bracketed:
[L:  1, P:  5]      |            start_bracket:                                    '('
[L:  1, P:  6]      |            [META] indent:
[L:  1, P:  6]      |            ephemeral:
[L:  1, P:  6]      |                raw:                                          'num'
[L:  1, P:  9]      |                whitespace:                                   ' '
[L:  1, P: 10]      |                raw:                                          'AS'
[L:  1, P: 12]      |                whitespace:                                   ' '
[L:  1, P: 13]      |                raw:                                          'numeric'
[L:  1, P: 20]      |                bracketed:
[L:  1, P: 20]      |                    start_bracket:                            '('
[L:  1, P: 21]      |                    raw:                                      '8'
[L:  1, P: 22]      |                    comma:                                    ','
[L:  1, P: 23]      |                    raw:                                      '4'
[L:  1, P: 24]      |                    end_bracket:                              ')'
[L:  1, P: 25]      |            [META] dedent:
[L:  1, P: 25]      |            end_bracket:                                      ')'

INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 1. Expanding: FunctionSegment: 'CAST(num AS numeric(8,4))'
#
###
DEBUG    sqlfluff.parser:base.py:777 FunctionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 FunctionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 2: FunctionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |function:
[L:  1, P:  1]      |    function_name:
[L:  1, P:  1]      |        function_name_identifier:                             'CAST'
[L:  1, P:  5]      |    bracketed:
[L:  1, P:  5]      |        start_bracket:                                        '('
[L:  1, P:  6]      |        [META] indent:
[L:  1, P:  6]      |        ephemeral:
[L:  1, P:  6]      |            raw:                                              'num'
[L:  1, P:  9]      |            whitespace:                                       ' '
[L:  1, P: 10]      |            raw:                                              'AS'
[L:  1, P: 12]      |            whitespace:                                       ' '
[L:  1, P: 13]      |            raw:                                              'numeric'
[L:  1, P: 20]      |            bracketed:
[L:  1, P: 20]      |                start_bracket:                                '('
[L:  1, P: 21]      |                raw:                                          '8'
[L:  1, P: 22]      |                comma:                                        ','
[L:  1, P: 23]      |                raw:                                          '4'
[L:  1, P: 24]      |                end_bracket:                                  ')'
[L:  1, P: 25]      |        [META] dedent:
[L:  1, P: 25]      |        end_bracket:                                          ')'

INFO     sqlfluff.parser:base.py:251 [PD:2] Skipping expansion of <FunctionNameSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 2. Expanding: BracketedSegment: '(num AS numeric(8,4))'
#
###
DEBUG    sqlfluff.parser:base.py:777 BracketedSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 BracketedSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 3: BracketedSegment
#
###
Initial Structure:
[L:  1, P:  5]      |bracketed:
[L:  1, P:  5]      |    start_bracket:                                            '('
[L:  1, P:  6]      |    [META] indent:
[L:  1, P:  6]      |    ephemeral:
[L:  1, P:  6]      |        raw:                                                  'num'
[L:  1, P:  9]      |        whitespace:                                           ' '
[L:  1, P: 10]      |        raw:                                                  'AS'
[L:  1, P: 12]      |        whitespace:                                           ' '
[L:  1, P: 13]      |        raw:                                                  'numeric'
[L:  1, P: 20]      |        bracketed:
[L:  1, P: 20]      |            start_bracket:                                    '('
[L:  1, P: 21]      |            raw:                                              '8'
[L:  1, P: 22]      |            comma:                                            ','
[L:  1, P: 23]      |            raw:                                              '4'
[L:  1, P: 24]      |            end_bracket:                                      ')'
[L:  1, P: 25]      |    [META] dedent:
[L:  1, P: 25]      |    end_bracket:                                              ')'

INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P:  5]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Indent: ([L:  1, P:  6]) ''>...
INFO     sqlfluff.parser:base.py:275 
###
#
# Parse Depth 3. Expanding: EphemeralSegment: 'num AS numeric(8,4)'
#
###
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match PRN     	    	[ns=5, ps=3, ms=0, pruned=[<Ref: OrderByClauseSegment>, <Sequence: [<Ref: SeparatorKeywordSegment>, <Ref: LiteralGrammar>]>, <Sequence: [<OneOf: [<Ref: IgnoreKeywordSegment>, <R..., <Ref: NullsKeywordSegment>]>], opts=[<Ref: ExpressionSegment>, <Sequence: [<Ref: ExpressionSegment>, <Ref: AsKeywordSegment>, <Ref: DatatypeSegment>]>, <Sequence: [<OneOf: [<Ref: DatetimeUnitSegment>, <Re..., <Ref: FromKeywordSegment>, <Ref: ExpressionSegment>]>, <Sequence: [<Ref: DistinctKeywordSegment [opt]>, <OneOf: [<Ref: StarSegment>, <Delimited:...]>, <Sequence: [<OneOf: [<Ref: QuotedLiteralSegment>, <R..., <Ref: InKeywordSegment>, <OneOf: [<Ref: QuotedLiteralSe...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DateAddFunctionNameSegment            	DateA.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	AnyNu.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionNameSegment                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............FunctionNameSegment                  	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionNameSegment                   	Funct.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............FunctionSegment                       	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	AnyNu.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........FunctionSegment                           	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......FunctionSegment                            	Funct.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........LiteralGrammar                            	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......LiteralGrammar                             	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match IN	    	[ls=6, seg='num AS numeric(8,4)']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim._look_ahead_match SI	    	[mq=[], sb=['NUM', '', 'AS', '', 'NUMERIC', '(8,4)']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	NonCo.match OUT     	+   	[match=<MatchResult 1/5: ' '>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Delim.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......ColumnReferenceSegment                     	Colum.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ArrayLiteralSegment                       	Array.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............SingleIdentifierGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............SingleIdentifierGrammar             	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........DatatypeSegment                        	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........DatatypeSegment                          	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Datat.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Accessor_Grammar                            	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_D_Grammar                         	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_C_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:4 ]	....Expression_A_Grammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ComparisonOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........BinaryOperatorGrammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Seque.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:2 ]	..Expression_A_Grammar                            	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.ExpressionSegment                                	Expre.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:1 ]	.FunctionContentsGrammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DateAddFunctionNameSegment         	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DateAddFunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............DateAddFunctionNameSegment           	DateA.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................FunctionNameSegment               	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............FunctionNameSegment                	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............FunctionNameSegment                 	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionNameSegment                  	Funct.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............FunctionSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	AnyNu.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............FunctionSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........FunctionSegment                         	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........FunctionSegment                          	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........FunctionSegment                           	Funct.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........LiteralGrammar                            	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........LiteralGrammar                           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........LiteralGrammar                            	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match IN	    	[ls=6, seg='num AS numeric(8,4)']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Delim._look_ahead_match SI	    	[mq=[], sb=['NUM', '', 'AS', '', 'NUMERIC', '(8,4)']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: AsKeywordSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............ComparisonOperatorGrammar            	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............ComparisonOperatorGrammar             	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............BinaryOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........BinaryOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ColumnReferenceSegment                  	OneOf.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	NonCo.match OUT     	+   	[match=<MatchResult 1/5: ' '>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........SingleIdentifierGrammar                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........SingleIdentifierGrammar                 	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ColumnReferenceSegment                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'num'>, seg="'num'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........ColumnReferenceSegment                   	Delim.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........ColumnReferenceSegment                    	Colum.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ArrayLiteralSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ArrayLiteralSegment                      	Array.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............SingleIdentifierGrammar            	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................SingleIdentifierGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............SingleIdentifierGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="' AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............DatatypeSegment                       	Brack.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............DatatypeSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........DatatypeSegment                        	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........DatatypeSegment                         	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Datat.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Accessor_Grammar                           	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_D_Grammar                       	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_D_Grammar                        	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_C_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_C_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	OneOf.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:11]	...........ComparisonOperatorGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........ComparisonOperatorGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........BinaryOperatorGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:9 ]	.........BinaryOperatorGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........Expression_A_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........Expression_A_Grammar                      	Seque.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....Expression_A_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/4: ''>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...Expression_A_Grammar                           	Seque.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:3 ]	...ExpressionSegment                              	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..ExpressionSegment                               	Expre.match OUT     	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/6: 'num'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	+   	[match=<MatchResult 1/4: 'AS'>, seg="'AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...DatatypeSegment                                	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....DatatypeSegment                              	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........SingleIdentifierGrammar                   	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........SingleIdentifierGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........SingleIdentifierGrammar                   	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:8 ]	........DatatypeSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......DatatypeSegment                            	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:7 ]	.......DatatypeSegment                            	Ref.match OUT       	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......DatatypeSegment                             	Seque.match OUT     	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....DatatypeSegment                              	OneOf.match OUT     	+   	[match=<MatchResult 1/2: 'numeric'>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......DatatypeSegment                            	OneOf.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Delimited: [<Ref: ExpressionSegment>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match IN	    	[ls=3, seg='8,4']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match SI	    	[mq=[(<Ref: CommaSegment>, 1, ',')], sb=['8', ',', '4']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Ref.match OUT       	+   	[match=<MatchResult 1/2: ','>, seg="',4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match SC	    	[bsm=(1, 1, <Ref: CommaSegment>)]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........Expression_A_Grammar                   	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............Expression_C_Grammar                  	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............Expression_D_Grammar                	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionSegment                   	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:22]	......................DateAddFunctionNameSegment  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:21]	.....................DateAddFunctionNameSegment   	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................DateAddFunctionNameSegment    	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:19]	...................FunctionSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:24]	........................SingleIdentifierGrammar   	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:25]	.........................SingleIdentifierGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:25]	.........................SingleIdentifierGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:24]	........................SingleIdentifierGrammar   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:24]	........................FunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:23]	.......................FunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:23]	.......................FunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:23]	.......................FunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:21]	.....................FunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionNameSegment           	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:19]	...................FunctionSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................FunctionSegment                 	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................FunctionSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionSegment                    	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............LiteralGrammar                     	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................LiteralGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................LiteralGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............LiteralGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............Expression_D_Grammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............Expression_D_Grammar                 	Seque.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............Expression_C_Grammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............Expression_C_Grammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............Expression_A_Grammar                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........Expression_A_Grammar                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_A_Grammar                    	Seque.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ExpressionSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ExpressionSegment                        	Expre.match OUT     	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '8'>, seg="'8'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match IN	    	[ls=1, seg='4']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match SI	    	[mq=[], sb=['4']]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Delim._look_ahead_match SC	    	[bsm=None]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........Expression_A_Grammar                   	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............Expression_C_Grammar                  	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............Expression_D_Grammar                	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionSegment                   	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:22]	......................DateAddFunctionNameSegment  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:21]	.....................DateAddFunctionNameSegment   	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................DateAddFunctionNameSegment    	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:19]	...................FunctionSegment                	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:24]	........................SingleIdentifierGrammar   	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:25]	.........................SingleIdentifierGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:25]	.........................SingleIdentifierGrammar  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:24]	........................SingleIdentifierGrammar   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:24]	........................FunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:23]	.......................FunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:23]	.......................FunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:23]	.......................FunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:22]	......................FunctionNameSegment         	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:21]	.....................FunctionNameSegment          	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionNameSegment           	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:20]	....................FunctionSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:19]	...................FunctionSegment                	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:18]	..................FunctionSegment                 	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:17]	.................FunctionSegment                  	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:16]	................FunctionSegment                   	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............FunctionSegment                    	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............LiteralGrammar                     	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................LiteralGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:16]	................LiteralGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:15]	...............LiteralGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:15]	...............Expression_D_Grammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:14]	..............Expression_D_Grammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:13]	.............Expression_D_Grammar                 	Seque.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:13]	.............Expression_C_Grammar                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:12]	............Expression_C_Grammar                  	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:12]	............Expression_A_Grammar                  	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:11]	...........Expression_A_Grammar                   	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:10]	..........Expression_A_Grammar                    	Seque.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:10]	..........ExpressionSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........ExpressionSegment                        	Expre.match OUT     	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:9 ]	.........DatatypeSegment                          	Ref.match OUT       	++  	[match=<MatchResult 1/1: '4'>, seg="'4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:8 ]	........DatatypeSegment                           	Delim.match OUT     	++  	[match=<MatchResult 3/3: '8,4'>, seg="'8,4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:7 ]	.......DatatypeSegment                            	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '8,4'>, seg="'8,4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:6 ]	......DatatypeSegment                             	Brack.match OUT     	++  	[match=<MatchResult 3/3: '8,4'>, seg="'8,4'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:5 ]	.....DatatypeSegment                              	Brack.match OUT     	++  	[match=<MatchResult 1/1: '(8,4)'>, seg="'(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:4 ]	....DatatypeSegment                               	Seque.match OUT     	++  	[match=<MatchResult 2/2: 'numeric(8,4)'>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:3 ]	...DatatypeSegment                                	OneOf.match OUT     	++  	[match=<MatchResult 2/2: 'numeric(8,4)'>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..DatatypeSegment                                 	Datat.match OUT     	++  	[match=<MatchResult 1/1: 'numeric(8,4)'>, seg="'numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:2 ]	..FunctionContentsGrammar                         	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'numeric(8,4)'>, seg="'numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:1 ]	.FunctionContentsGrammar                          	Seque.match OUT     	++  	[match=<MatchResult 5/5: 'num AS numeric(8,4)'>, seg="'num AS numeric(8,4)'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:3  MD:0 ]	FunctionContentsGrammar                           	AnyNu.match OUT     	++  	[match=<MatchResult 5/5: 'num AS numeric(8,4)'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:3  MD:0 ]	EphemeralSegment                                  	Ref.match OUT       	++  	[match=<MatchResult 5/5: 'num AS numeric(8,4)'>, seg="'num AS numeric(8,4)'"]
DEBUG    sqlfluff.parser:base.py:859 EphemeralSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 4: EphemeralSegment
#
###
Initial Structure:
[L:  1, P:  6]      |ephemeral:
[L:  1, P:  6]      |    expression:
[L:  1, P:  6]      |        column_reference:
[L:  1, P:  6]      |            identifier:                                       'num'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    keyword:                                                  'AS'
[L:  1, P: 12]      |    whitespace:                                               ' '
[L:  1, P: 13]      |    data_type:
[L:  1, P: 13]      |        data_type_identifier:                                 'numeric'
[L:  1, P: 20]      |        bracketed:
[L:  1, P: 20]      |            start_bracket:                                    '('
[L:  1, P: 21]      |            [META] indent:
[L:  1, P: 21]      |            expression:
[L:  1, P: 21]      |                literal:                                      '8'
[L:  1, P: 22]      |            comma:                                            ','
[L:  1, P: 23]      |            expression:
[L:  1, P: 23]      |                literal:                                      '4'
[L:  1, P: 24]      |            [META] dedent:
[L:  1, P: 24]      |            end_bracket:                                      ')'

INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <ExpressionSegment: ([L:  1, P:  6])>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <KeywordSegment: ([L:  1, P: 10]) 'AS'>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 12]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:4] Skipping expansion of <DatatypeSegment: ([L:  1, P: 13])>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <Dedent: ([L:  1, P: 25]) ''>...
INFO     sqlfluff.parser:base.py:251 [PD:3] Skipping expansion of <SymbolSegment: ([L:  1, P: 25]) ')'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.*] __
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'a'>, <CodeSegment: ([L:  1, P:  2]) '.'>, <CodeSegment: ([L:  1, P:  3]) '*'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'a'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'a.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 'a'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'a'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/3: 'a.'>, seg="'a.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 2/3: 'a.'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '*'>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'a.*'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'a.*'>, seg="'a.*'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    wildcard_expression:
[L:  1, P:  1]      |        wildcard_identifier:
[L:  1, P:  1]      |            identifier:                                       'a'
[L:  1, P:  2]      |            dot:                                              '.'
[L:  1, P:  3]      |            star:                                             '*'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WildcardExpressionSegment: ([L:  1, P:  1])>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.*] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'a'>, <CodeSegment: ([L:  1, P:  2]) '.'>, <CodeSegment: ([L:  1, P:  3]) 'b'>, <CodeSegment: ([L:  1, P:  4]) '.'>, <CodeSegment: ([L:  1, P:  5]) '*'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'a'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'a.b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'a'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'a'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/4: '.'>, seg="'.b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/5: 'a.'>, seg="'a.b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'b'>, seg="'b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 'b'>, seg="'b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'b'>, seg="'b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/3: 'b.'>, seg="'b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 4/5: 'a.b.'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '*'>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	++  	[match=<MatchResult 5/5: 'a.b.*'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.*'>, seg="'a.b.*'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    wildcard_expression:
[L:  1, P:  1]      |        wildcard_identifier:
[L:  1, P:  1]      |            identifier:                                       'a'
[L:  1, P:  2]      |            dot:                                              '.'
[L:  1, P:  3]      |            identifier:                                       'b'
[L:  1, P:  4]      |            dot:                                              '.'
[L:  1, P:  5]      |            star:                                             '*'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WildcardExpressionSegment: ([L:  1, P:  1])>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.c.*] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'a'>, <CodeSegment: ([L:  1, P:  2]) '.'>, <CodeSegment: ([L:  1, P:  3]) 'b'>, <CodeSegment: ([L:  1, P:  4]) '.'>, <CodeSegment: ([L:  1, P:  5]) 'c'>, <CodeSegment: ([L:  1, P:  6]) '.'>, <CodeSegment: ([L:  1, P:  7]) '*'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'a'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'a.b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'a'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'a'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/6: '.'>, seg="'.b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/7: 'a.'>, seg="'a.b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'b'>, seg="'b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'b'>, seg="'b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'b'>, seg="'b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/4: '.'>, seg="'.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/5: 'b.'>, seg="'b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'c'>, seg="'c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/3: 'c'>, seg="'c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'c'>, seg="'c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/2: '.'>, seg="'.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	+   	[match=<MatchResult 2/3: 'c.'>, seg="'c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	+   	[match=<MatchResult 6/7: 'a.b.c.'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: '*'>, seg="'*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	++  	[match=<MatchResult 7/7: 'a.b.c.*'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'a.b.c.*'>, seg="'a.b.c.*'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    wildcard_expression:
[L:  1, P:  1]      |        wildcard_identifier:
[L:  1, P:  1]      |            identifier:                                       'a'
[L:  1, P:  2]      |            dot:                                              '.'
[L:  1, P:  3]      |            identifier:                                       'b'
[L:  1, P:  4]      |            dot:                                              '.'
[L:  1, P:  5]      |            identifier:                                       'c'
[L:  1, P:  6]      |            dot:                                              '.'
[L:  1, P:  7]      |            star:                                             '*'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WildcardExpressionSegment: ([L:  1, P:  1])>...
__ test__dialect__ansi_specific_segment_parses[ObjectReferenceSegment-a..c.*] __
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'a'>, <CodeSegment: ([L:  1, P:  2]) '.'>, <CodeSegment: ([L:  1, P:  3]) '.'>, <CodeSegment: ([L:  1, P:  4]) 'c'>, <CodeSegment: ([L:  1, P:  5]) '.'>, <CodeSegment: ([L:  1, P:  6]) '*'>)
Base route...
<ObjectReferenceSegment: ([L:  1, P:  1])>
<ObjectReferenceSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ObjectReferenceSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ObjectReferenceSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ObjectReferenceSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ObjectReferenceSegment
#
###
Initial Structure:
[L:  1, P:  1]      |object_reference:
[L:  1, P:  1]      |    raw:                                                      'a'
[L:  1, P:  2]      |    raw:                                                      '.'
[L:  1, P:  3]      |    raw:                                                      '.'
[L:  1, P:  4]      |    raw:                                                      'c'
[L:  1, P:  5]      |    raw:                                                      '.'
[L:  1, P:  6]      |    raw:                                                      '*'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'a'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  2]) '.'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  3]) '.'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  4]) 'c'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  5]) '.'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) '*'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment--some_variable] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '-'>, <CodeSegment: ([L:  1, P:  2]) 'some_variable'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: QualifiedNumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	OneOf.match PRN     	    	[ns=0, ps=1, ms=1, pruned=[<Ref: PlusSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......QualifiedNumericLiteralSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....QualifiedNumericLiteralSegment               	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....QualifiedNumericLiteralSegment                	Quali.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=2, seg='-some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[], sb=['-', 'SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ArithmeticBinaryOperatorGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=0, ms=1, pruned=[], opts=[<Ref: Expression_C_Grammar>, <Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: QualifiedNumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	OneOf.match PRN     	    	[ns=0, ps=1, ms=1, pruned=[<Ref: PlusSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............QualifiedNumericLiteralSegment       	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........QualifiedNumericLiteralSegment         	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........QualifiedNumericLiteralSegment          	Quali.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=2, seg='-some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['-', 'SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ArithmeticBinaryOperatorGrammar     	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=0, ps=3, ms=1, pruned=[<Ref: PositiveSegment>, <Ref: NotKeywordSegment>, <Ref: PriorKeywordSegment>], opts=[<Ref: NegativeSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/2: '-'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........LiteralGrammar                          	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........LiteralGrammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match IN	    	[ls=1, seg='some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match SI	    	[mq=[], sb=['SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Colum.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_C_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	++  	[match=<MatchResult 2/2: '-some_variable'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	++  	[match=<MatchResult 2/2: '-some_variable'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	++  	[match=<MatchResult 2/2: '-some_variable'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	++  	[match=<MatchResult 2/2: '-some_variable'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '-some_variable'>, seg="'-some_variable'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        sign_indicator:                                       '-'
[L:  1, P:  2]      |        column_reference:
[L:  1, P:  2]      |            identifier:                                       'some_variable'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-- some_variable] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) '-'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) 'some_variable'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: QualifiedNumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	OneOf.match PRN     	    	[ns=0, ps=1, ms=1, pruned=[<Ref: PlusSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......QualifiedNumericLiteralSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......QualifiedNumericLiteralSegment              	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="' some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....QualifiedNumericLiteralSegment               	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....QualifiedNumericLiteralSegment                	Quali.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=3, seg='- some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[], sb=['-', '', 'SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ArithmeticBinaryOperatorGrammar           	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ArithmeticBinaryOperatorGrammar            	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=0, ms=1, pruned=[], opts=[<Ref: Expression_C_Grammar>, <Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: QualifiedNumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	OneOf.match PRN     	    	[ns=0, ps=1, ms=1, pruned=[<Ref: PlusSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............QualifiedNumericLiteralSegment       	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............QualifiedNumericLiteralSegment        	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="' some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........QualifiedNumericLiteralSegment         	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........QualifiedNumericLiteralSegment          	Quali.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=3, seg='- some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['-', '', 'SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=2, ms=1, pruned=[<Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match PRN     	    	[ns=0, ps=9, ms=1, pruned=[<Ref: PlusSegment>, <Ref: DivideSegment>, <Ref: MultiplySegment>, <Ref: ModuloSegment>, <Ref: BitwiseAndSegment>, <Ref: BitwiseOrSegment>, <Ref: BitwiseXorSegment>, <Ref: BitwiseLShiftSegment>, <Ref: BitwiseRShiftSegment>], opts=[<Ref: MinusSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ArithmeticBinaryOperatorGrammar     	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ArithmeticBinaryOperatorGrammar      	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match PRN     	    	[ns=0, ps=3, ms=1, pruned=[<Ref: PositiveSegment>, <Ref: NotKeywordSegment>, <Ref: PriorKeywordSegment>], opts=[<Ref: NegativeSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	OneOf.match OUT     	+   	[match=<MatchResult 1/3: '-'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DateAddFunctionNameSegment       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	DateA.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................SingleIdentifierGrammar        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:20]	....................SingleIdentifierGrammar       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:19]	...................SingleIdentifierGrammar        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................FunctionNameSegment            	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................FunctionNameSegment             	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	AnyNu.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionNameSegment                	Funct.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............FunctionSegment                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............FunctionSegment                     	AnyNu.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........FunctionSegment                         	Funct.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........LiteralGrammar                          	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........LiteralGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........LiteralGrammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match IN	    	[ls=1, seg='some_variable']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Delim._look_ahead_match SI	    	[mq=[], sb=['SOME_VARIABLE']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............BinaryOperatorGrammar                	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............ComparisonOperatorGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............BinaryOperatorGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............BinaryOperatorGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............ColumnReferenceSegment               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............ColumnReferenceSegment                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	NonCo.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Colum.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_C_Grammar                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'some_variable'>, seg="'some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Seque.match OUT     	++  	[match=<MatchResult 3/3: '- some_variable'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	++  	[match=<MatchResult 3/3: '- some_variable'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	++  	[match=<MatchResult 3/3: '- some_variable'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	++  	[match=<MatchResult 3/3: '- some_variable'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: '- some_variable'>, seg="'- some_variable'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        sign_indicator:                                       '-'
[L:  1, P:  2]      |        whitespace:                                           ' '
[L:  1, P:  3]      |        column_reference:
[L:  1, P:  3]      |            identifier:                                       'some_variable'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-concat(left(uaid, 2), '|', right(concat('0000000', SPLIT_PART(uaid, '|', 4)), 10), '|', '00000000')] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'concat'>, <CodeSegment: ([L:  1, P:  7]) '('>, <CodeSegment: ([L:  1, P:  8]) 'left'>, <CodeSegment: ([L:  1, P: 12]) '('>, <CodeSegment: ([L:  1, P: 13]) 'uaid'>, <CodeSegment: ([L:  1, P: 17]) ','>, <WhitespaceSegment: ([L:  1, P: 18]) ' '>, <CodeSegment: ([L:  1, P: 19]) '2'>, <CodeSegment: ([L:  1, P: 20]) ')'>, <CodeSegment: ([L:  1, P: 21]) ','>, <WhitespaceSegment: ([L:  1, P: 22]) ' '>, <CodeSegment: ([L:  1, P: 23]) "'|'">, <CodeSegment: ([L:  1, P: 26]) ','>, <WhitespaceSegment: ([L:  1, P: 27]) ' '>, <CodeSegment: ([L:  1, P: 28]) 'right'>, <CodeSegment: ([L:  1, P: 33]) '('>, <CodeSegment: ([L:  1, P: 34]) 'concat'>, <CodeSegment: ([L:  1, P: 40]) '('>, <CodeSegment: ([L:  1, P: 41]) "'0000000'">, <CodeSegment: ([L:  1, P: 50]) ','>, <WhitespaceSegment: ([L:  1, P: 51]) ' '>, <CodeSegment: ([L:  1, P: 52]) 'SPLIT_PART'>, <CodeSegment: ([L:  1, P: 62]) '('>, <CodeSegment: ([L:  1, P: 63]) 'uaid'>, <CodeSegment: ([L:  1, P: 67]) ','>, <WhitespaceSegment: ([L:  1, P: 68]) ' '>, <CodeSegment: ([L:  1, P: 69]) "'|'">, <CodeSegment: ([L:  1, P: 72]) ','>, <WhitespaceSegment: ([L:  1, P: 73]) ' '>, <CodeSegment: ([L:  1, P: 74]) '4'>, <CodeSegment: ([L:  1, P: 75]) ')'>, <CodeSegment: ([L:  1, P: 76]) ')'>, <CodeSegment: ([L:  1, P: 77]) ','>, <WhitespaceSegment: ([L:  1, P: 78]) ' '>, <CodeSegment: ([L:  1, P: 79]) '10'>, <CodeSegment: ([L:  1, P: 81]) ')'>, <CodeSegment: ([L:  1, P: 82]) ','>, <WhitespaceSegment: ([L:  1, P: 83]) ' '>, <CodeSegment: ([L:  1, P: 84]) "'|'">, <CodeSegment: ([L:  1, P: 87]) ','>, <WhitespaceSegment: ([L:  1, P: 88]) ' '>, <CodeSegment: ([L:  1, P: 89]) "'00000000'">, <CodeSegment: ([L:  1, P: 99]) ')'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'concat'
[L:  1, P:  7]      |    raw:                                                      '('
[L:  1, P:  8]      |    raw:                                                      'left'
[L:  1, P: 12]      |    raw:                                                      '('
[L:  1, P: 13]      |    raw:                                                      'uaid'
[L:  1, P: 17]      |    comma:                                                    ','
[L:  1, P: 18]      |    whitespace:                                               ' '
[L:  1, P: 19]      |    raw:                                                      '2'
[L:  1, P: 20]      |    raw:                                                      ')'
[L:  1, P: 21]      |    comma:                                                    ','
[L:  1, P: 22]      |    whitespace:                                               ' '
[L:  1, P: 23]      |    raw:                                                      "'|'"
[L:  1, P: 26]      |    comma:                                                    ','
[L:  1, P: 27]      |    whitespace:                                               ' '
[L:  1, P: 28]      |    raw:                                                      'right'
[L:  1, P: 33]      |    raw:                                                      '('
[L:  1, P: 34]      |    raw:                                                      'concat'
[L:  1, P: 40]      |    raw:                                                      '('
[L:  1, P: 41]      |    raw:                                                      "'0000000'"
[L:  1, P: 50]      |    comma:                                                    ','
[L:  1, P: 51]      |    whitespace:                                               ' '
[L:  1, P: 52]      |    raw:                                                      'SPLIT_PART'
[L:  1, P: 62]      |    raw:                                                      '('
[L:  1, P: 63]      |    raw:                                                      'uaid'
[L:  1, P: 67]      |    comma:                                                    ','
[L:  1, P: 68]      |    whitespace:                                               ' '
[L:  1, P: 69]      |    raw:                                                      "'|'"
[L:  1, P: 72]      |    comma:                                                    ','
[L:  1, P: 73]      |    whitespace:                                               ' '
[L:  1, P: 74]      |    raw:                                                      '4'
[L:  1, P: 75]      |    raw:                                                      ')'
[L:  1, P: 76]      |    raw:                                                      ')'
[L:  1, P: 77]      |    comma:                                                    ','
[L:  1, P: 78]      |    whitespace:                                               ' '
[L:  1, P: 79]      |    raw:                                                      '10'
[L:  1, P: 81]      |    raw:                                                      ')'
[L:  1, P: 82]      |    comma:                                                    ','
[L:  1, P: 83]      |    whitespace:                                               ' '
[L:  1, P: 84]      |    raw:                                                      "'|'"
[L:  1, P: 87]      |    comma:                                                    ','
[L:  1, P: 88]      |    whitespace:                                               ' '
[L:  1, P: 89]      |    raw:                                                      "'00000000'"
[L:  1, P: 99]      |    raw:                                                      ')'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'concat'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  7]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  8]) 'left'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 12]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 13]) 'uaid'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 17]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 18]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 19]) '2'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 20]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 21]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 22]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 23]) "'|'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 26]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 27]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 28]) 'right'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 33]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 34]) 'concat'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 40]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 41]) "'0000000'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 50]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 51]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 52]) 'SPLIT_PART'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 62]) '('>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 63]) 'uaid'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 67]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 68]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 69]) "'|'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 72]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 73]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 74]) '4'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 75]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 76]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 77]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 78]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 79]) '10'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 81]) ')'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 82]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 83]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 84]) "'|'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 87]) ','>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 88]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 89]) "'00000000'">...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 99]) ')'>...
___ test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is null] ___
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'c'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) 'is'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'null'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'c'
[L:  1, P:  2]      |    whitespace:                                               ' '
[L:  1, P:  3]      |    raw:                                                      'is'
[L:  1, P:  5]      |    whitespace:                                               ' '
[L:  1, P:  6]      |    raw:                                                      'null'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'c'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  2]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  3]) 'is'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  5]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'null'>...
_ test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is not null] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'c'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) 'is'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'not'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'null'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'c'
[L:  1, P:  2]      |    whitespace:                                               ' '
[L:  1, P:  3]      |    raw:                                                      'is'
[L:  1, P:  5]      |    whitespace:                                               ' '
[L:  1, P:  6]      |    raw:                                                      'not'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    raw:                                                      'null'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'c'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  2]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  3]) 'is'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  5]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  6]) 'not'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'null'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'c'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) 'is'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'null'>, <WhitespaceSegment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'as'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) 'c_isnull'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=9, seg='c is null as c_isnul...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[], sb=['C', '', 'IS', '', 'NULL', '', 'AS', '', 'C_ISNULL']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	+   	[match=<MatchResult 1/8: ' '>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=9, seg='c is null as c_isnul...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['C', '', 'IS', '', 'NULL', '', 'AS', '', 'C_ISNULL']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	+   	[match=<MatchResult 1/8: ' '>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/8: ''>, seg="' is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/9: 'c'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=4, ms=1, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'is'>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........IsClauseGrammar                           	OneOf.match PRN     	    	[ns=0, ps=2, ms=1, pruned=[<Ref: NanKeywordSegment>, <Ref: BooleanLiteralGrammar>], opts=[<Ref: NullKeywordSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........IsClauseGrammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........IsClauseGrammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 3/7: 'is null'>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 3/7: 'is null'>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	+   	[match=<MatchResult 3/7: 'is null'>, seg="'is null as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 5/9: 'c is null'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 5/9: 'c is null'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'c is null'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'c is null'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'c is null'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'c is null'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'as'>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c_isnull'>, seg="'c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c_isnull'>, seg="'c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c_isnull'>, seg="'c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'c_isnull'>, seg="'c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c_isnull'>, seg="'c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'as c_isnull'>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'as c_isnull'>, seg="'as c_isnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'as c_isnull'>, seg="'as c_isnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'c is null as c_isnull'>, seg="'c is null as c_isnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: 'c is null as c_isnull'>, seg="'c is null as c_isnul...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        column_reference:
[L:  1, P:  1]      |            identifier:                                       'c'
[L:  1, P:  2]      |        whitespace:                                           ' '
[L:  1, P:  3]      |        keyword:                                              'is'
[L:  1, P:  5]      |        whitespace:                                           ' '
[L:  1, P:  6]      |        keyword:                                              'null'
[L:  1, P: 10]      |    whitespace:                                               ' '
[L:  1, P: 11]      |    alias_expression:
[L:  1, P: 11]      |        keyword:                                              'as'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        identifier:                                           'c_isnull'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 10]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 11])>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'c'>, <WhitespaceSegment: ([L:  1, P:  2]) ' '>, <CodeSegment: ([L:  1, P:  3]) 'is'>, <WhitespaceSegment: ([L:  1, P:  5]) ' '>, <CodeSegment: ([L:  1, P:  6]) 'not'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'null'>, <WhitespaceSegment: ([L:  1, P: 14]) ' '>, <CodeSegment: ([L:  1, P: 15]) 'as'>, <WhitespaceSegment: ([L:  1, P: 17]) ' '>, <CodeSegment: ([L:  1, P: 18]) 'c_notnull'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=11, seg='c is not null as c_n...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[], sb=['C', '', 'IS', '', 'NOT', '', 'NULL', '', 'AS', '', 'C_NOTNULL']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	+   	[match=<MatchResult 1/10: ' '>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=4, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=11, seg='c is not null as c_n...']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['C', '', 'IS', '', 'NOT', '', 'NULL', '', 'AS', '', 'C_NOTNULL']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	+   	[match=<MatchResult 1/10: ' '>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c'>, seg="'c'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/10: ''>, seg="' is not null as c_no...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/11: ''>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 1/11: 'c'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=4, ms=1, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/9: 'is'>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'not'>, seg="'not null as c_notnul...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........IsClauseGrammar                           	OneOf.match PRN     	    	[ns=0, ps=2, ms=1, pruned=[<Ref: NanKeywordSegment>, <Ref: BooleanLiteralGrammar>], opts=[<Ref: NullKeywordSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........IsClauseGrammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........IsClauseGrammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_A_Grammar                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'null'>, seg="'null as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 5/9: 'is not null'>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/9: ''>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 5/9: 'is not null'>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	+   	[match=<MatchResult 5/9: 'is not null'>, seg="'is not null as c_not...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 7/11: 'c is not null'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 7/11: 'c is not null'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'c is not null'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'c is not null'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'c is not null'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'c is not null'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'as'>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c_notnull'>, seg="'c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c_notnull'>, seg="'c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'c_notnull'>, seg="'c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'c_notnull'>, seg="'c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'c_notnull'>, seg="'c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'as c_notnull'>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'as c_notnull'>, seg="'as c_notnull'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'as c_notnull'>, seg="'as c_notnull'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'c is not null as c_notnull'>, seg="'c is not null as c_n...'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: 'c is not null as c_notnull'>, seg="'c is not null as c_n...'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        column_reference:
[L:  1, P:  1]      |            identifier:                                       'c'
[L:  1, P:  2]      |        whitespace:                                           ' '
[L:  1, P:  3]      |        keyword:                                              'is'
[L:  1, P:  5]      |        whitespace:                                           ' '
[L:  1, P:  6]      |        keyword:                                              'not'
[L:  1, P:  9]      |        whitespace:                                           ' '
[L:  1, P: 10]      |        keyword:                                              'null'
[L:  1, P: 14]      |    whitespace:                                               ' '
[L:  1, P: 15]      |    alias_expression:
[L:  1, P: 15]      |        keyword:                                              'as'
[L:  1, P: 17]      |        whitespace:                                           ' '
[L:  1, P: 18]      |        identifier:                                           'c_notnull'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 14]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 15])>...
___ test__dialect__ansi_specific_segment_parses[ExpressionSegment-NULL::INT] ___
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'NULL'>, <CodeSegment: ([L:  1, P:  5]) '::'>, <CodeSegment: ([L:  1, P:  7]) 'INT'>)
Base route...
<ExpressionSegment: ([L:  1, P:  1])>
<ExpressionSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.ExpressionSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 ExpressionSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 ExpressionSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: ExpressionSegment
#
###
Initial Structure:
[L:  1, P:  1]      |expression:
[L:  1, P:  1]      |    raw:                                                      'NULL'
[L:  1, P:  5]      |    raw:                                                      '::'
[L:  1, P:  7]      |    raw:                                                      'INT'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'NULL'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  5]) '::'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  7]) 'INT'>...
_ test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-NULL::INT AS user_id] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'NULL'>, <CodeSegment: ([L:  1, P:  5]) '::'>, <CodeSegment: ([L:  1, P:  7]) 'INT'>, <WhitespaceSegment: ([L:  1, P: 10]) ' '>, <CodeSegment: ([L:  1, P: 11]) 'AS'>, <WhitespaceSegment: ([L:  1, P: 13]) ' '>, <CodeSegment: ([L:  1, P: 14]) 'user_id'>)
Base route...
<SelectClauseElementSegment: ([L:  1, P:  1])>
<SelectClauseElementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.SelectClauseElementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: WildcardExpressionSegment>, <Sequence: [<Ref: BaseExpressionElementGrammar>, <Ref: AliasExpressionSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........SingleIdentifierGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......WildcardIdentifierSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......WildcardIdentifierSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....WildcardIdentifierSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....WildcardIdentifierSegment                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardIdentifierSegment                      	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...WildcardExpressionSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..WildcardExpressionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.WildcardExpressionSegment                        	Wildc.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match PRN     	    	[ns=5, ps=1, ms=0, pruned=[<Ref: IntervalExpressionSegment>], opts=[<Ref: LiteralGrammar>, <Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: ColumnReferenceSegment>, <Ref: ExpressionSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: NullLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....LiteralGrammar                                	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...LiteralGrammar                                 	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DateAddFunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........DateAddFunctionNameSegment               	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........DateAddFunctionNameSegment                	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............SingleIdentifierGrammar              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............SingleIdentifierGrammar               	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............FunctionNameSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionNameSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........FunctionNameSegment                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionNameSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........FunctionNameSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionNameSegment                       	Funct.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........FunctionSegment                           	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	AnyNu.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......FunctionSegment                            	Brack.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......FunctionSegment                             	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....FunctionSegment                              	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....FunctionSegment                               	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...FunctionSegment                                	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match IN	    	[ls=7, seg='NULL::INT AS user_id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Delim._look_ahead_match SI	    	[mq=[], sb=['NULL', '::', 'INT', '', 'AS', '', 'USER_ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: CastOperatorSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/6: '::'>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........ComparisonOperatorGrammar                 	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......ComparisonOperatorGrammar                  	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......BinaryOperatorGrammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......BinaryOperatorGrammar                       	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......ColumnReferenceSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '::'>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....SingleIdentifierGrammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ColumnReferenceSegment                       	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ColumnReferenceSegment                        	Delim.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ColumnReferenceSegment                         	Colum.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: PositiveSegment>, <Ref: N..., <Ref: Expression_C_Grammar>]>], opts=[<Ref: Expression_C_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<Ref: ExistsKeywordSegment>, <Bracketed: [<Ref: SelectStatementSegmen...]>, <Ref: CaseExpressionSegment>], opts=[<Ref: Expression_D_Grammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match PRN     	    	[ns=6, ps=3, ms=0, pruned=[<Bracketed: [<OneOf: [<Ref: ExpressionSegment>, <Ref:...]>, <Ref: SelectStatementSegment>, <Ref: IntervalExpressionSegment>], opts=[<Ref: BareFunctionSegment>, <Ref: FunctionSegment>, <Ref: LiteralGrammar>, <Ref: ColumnReferenceSegment>, <Sequence: [<Ref: SimpleArrayTypeGrammar [opt]>, <Ref: ArrayLiteralSegment>]>, <Sequence: [<Ref: DatatypeSegment>, <OneOf: [<Ref: QuotedLiteralSegment>, <R...]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Sequence: [<Ref: DateAddFunctionNameSeg...]>], opts=[<Sequence: [<Sequence: [<AnyNumberOf: [<Ref: Functio..., <Ref: PostFunctionGrammar [opt]>]>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DateAddFunctionNameSegment        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DateAddFunctionNameSegment         	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DateAddFunctionNameSegment          	DateA.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Ref: DotSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:19]	...................SingleIdentifierGrammar        	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:18]	..................SingleIdentifierGrammar         	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................FunctionNameSegment             	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................FunctionNameSegment              	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	AnyNu.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: FunctionNameIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................FunctionNameSegment              	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................FunctionNameSegment               	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............FunctionNameSegment                	Seque.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionNameSegment                 	Funct.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............FunctionSegment                     	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............FunctionSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............FunctionSegment                       	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........FunctionSegment                        	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........FunctionSegment                         	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........FunctionSegment                          	Funct.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match PRN     	    	[ns=2, ps=3, ms=1, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: QualifiedNumericLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>, <Ref: NullLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........LiteralGrammar                          	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........LiteralGrammar                           	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match IN	    	[ls=7, seg='NULL::INT AS user_id']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Delim._look_ahead_match SI	    	[mq=[], sb=['NULL', '::', 'INT', '', 'AS', '', 'USER_ID']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match PRN     	    	[ns=1, ps=9, ms=1, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: CastOperatorSegment>, <Ref: BinaryOperatorGrammar>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	+   	[match=<MatchResult 1/6: '::'>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............ComparisonOperatorGrammar           	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............ComparisonOperatorGrammar            	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............BinaryOperatorGrammar                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............BinaryOperatorGrammar                 	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ColumnReferenceSegment                	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ColumnReferenceSegment                 	OneOf.match OUT     	+   	[match=<MatchResult 1/6: '::'>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	NonCo.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............SingleIdentifierGrammar               	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........SingleIdentifierGrammar                	OneOf.match OUT     	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ColumnReferenceSegment                 	Ref.match OUT       	    	[match=<MatchResult 0/1: ''>, seg="'NULL'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ColumnReferenceSegment                  	Delim.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ColumnReferenceSegment                   	Colum.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ArrayLiteralSegment                    	Brack.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........ArrayLiteralSegment                     	Array.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................SingleIdentifierGrammar          	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................SingleIdentifierGrammar           	OneOf.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:15]	...............DatatypeSegment                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Seque.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Brack.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:13]	.............DatatypeSegment                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	Seque.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........DatatypeSegment                        	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........DatatypeSegment                         	Datat.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_D_Grammar                    	Ref.match OUT       	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match PRN     	    	[ns=2, ps=3, ms=0, pruned=[<Ref: BooleanLiteralGrammar>, <Ref: NullLiteralSegment>, <Ref: DateTimeLiteralGrammar>], opts=[<Ref: QuotedLiteralSegment>, <Ref: NumericLiteralSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........Expression_D_Grammar                   	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........Expression_D_Grammar                    	OneOf.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/7: ''>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	OneOf.match OUT     	+   	[match=<MatchResult 1/7: 'NULL'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ArrayAccessorSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Accessor_Grammar                          	AnyNu.match OUT     	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:8 ]	........Expression_D_Grammar                      	Ref.match OUT       	    	[match=<MatchResult 0/6: ''>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=0, ms=1, pruned=[], opts=[<Ref: ShorthandCastSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ShorthandCastSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/6: '::'>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	OneOf.match PRN     	    	[ns=1, ps=2, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: TimeKeywordSegment>, <Ref..., <Bracketed: [<Ref: NumericLiteralSegment..., <Sequence:...]>, <Sequence: [<Ref: DoubleKeywordSegment>, <Ref: PrecisionKeywordSegment>]>], opts=[<Sequence: [<OneOf: [<Sequence: [<OneOf: [<Ref: Char..., <Bracketed: [<OneOf: [<Delimited: [<Ref:..., <Ref: Char...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<OneOf: [<Ref: CharacterKeywordSegment>,..., <OneOf: [<Ref: VaryingKeywordSegment>, <...]>], opts=[<Sequence: [<Sequence: [<Ref: SingleIdentifierGramma..., <Ref: DatatypeIdentifierSegment>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................SingleIdentifierGrammar          	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:18]	..................SingleIdentifierGrammar         	Ref.match OUT       	    	[match=<MatchResult 0/5: ''>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:17]	.................SingleIdentifierGrammar          	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:17]	.................DatatypeSegment                  	Ref.match OUT       	    	[match=<MatchResult 0/4: ''>, seg="' AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:16]	................DatatypeSegment                   	Seque.match OUT     	    	[match=<MatchResult 0/5: ''>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:16]	................DatatypeSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:15]	...............DatatypeSegment                    	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:14]	..............DatatypeSegment                     	Brack.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:14]	..............DatatypeSegment                     	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:13]	.............DatatypeSegment                      	Seque.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:12]	............DatatypeSegment                       	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........DatatypeSegment                        	Datat.match OUT     	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........ShorthandCastSegment                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'INT'>, seg="'INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........ShorthandCastSegment                    	Seque.match OUT     	+   	[match=<MatchResult 2/6: '::INT'>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........ShorthandCastSegment                     	Short.match OUT     	+   	[match=<MatchResult 1/5: '::INT'>, seg="'::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:9 ]	.........Expression_D_Grammar                     	Ref.match OUT       	+   	[match=<MatchResult 1/5: '::INT'>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match PRN     	    	[ns=0, ps=1, ms=0, pruned=[<Ref: ShorthandCastSegment>], opts='ALL']
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_D_Grammar                      	AnyNu.match OUT     	+   	[match=<MatchResult 1/5: '::INT'>, seg="'::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_D_Grammar                       	Seque.match OUT     	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_C_Grammar                       	Ref.match OUT       	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_C_Grammar                        	OneOf.match OUT     	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......Expression_A_Grammar                        	Ref.match OUT       	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	OneOf.match OUT     	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match PRN     	    	[ns=1, ps=0, ms=0, pruned=[], opts=[<OneOf: [<Sequence: [<OneOf: [<Sequence: [<Ref: N..., <Sequence: [<Ref: NotKeywordSegment [opt..., <Sequence:...]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match PRN     	    	[ns=3, ps=5, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Bracketed: [<OneOf: [<Delimited: [<Ref:...]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: InKeywordSegment>, <Ref: FunctionSegment>]>, <Sequence: [<Ref: IsKeywordSegment>, <Ref: NotKeywordSegment [opt]>, <Ref: IsClauseGrammar>]>, <Sequence: [<Ref: NotKeywordSegment>, <Ref: Expression_C_Grammar>]>, <Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: BetweenKeywordSegment>, <Ref: Expression_C_Grammar>, <AnyNumbe...]>], opts=[<Sequence: [<OneOf: [<Sequence: [<Ref: NotKeywordSeg..., <Ref: Expression_C_Grammar>, <Sequence: [<Ref: EscapeKe...]>, <Ref: IsNullGrammar>, <Ref: NotNullGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match PRN     	    	[ns=1, ps=1, ms=0, pruned=[<Sequence: [<Ref: NotKeywordSegment [opt]>, <Ref: LikeGrammar>]>], opts=[<Sequence: [<Ref: BinaryOperatorGrammar>, <Ref: NotKeywordSegment [opt]>]>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:12]	............ComparisonOperatorGrammar             	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:11]	...........ComparisonOperatorGrammar              	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:11]	...........BinaryOperatorGrammar                  	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:10]	..........BinaryOperatorGrammar                   	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:10]	..........Expression_A_Grammar                    	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:9 ]	.........Expression_A_Grammar                     	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:8 ]	........Expression_A_Grammar                      	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Seque.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......Expression_A_Grammar                       	Ref.match OUT       	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......Expression_A_Grammar                        	OneOf.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....Expression_A_Grammar                         	AnyNu.match OUT     	    	[match=<MatchResult 0/3: ''>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....Expression_A_Grammar                          	Seque.match OUT     	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....ExpressionSegment                             	Ref.match OUT       	+   	[match=<MatchResult 2/6: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...ExpressionSegment                              	Expre.match OUT     	+   	[match=<MatchResult 1/5: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...BaseExpressionElementGrammar                   	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..BaseExpressionElementGrammar                    	OneOf.match OUT     	+   	[match=<MatchResult 1/5: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	+   	[match=<MatchResult 1/5: 'NULL::INT'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....AliasExpressionSegment                        	Ref.match OUT       	+   	[match=<MatchResult 1/3: 'AS'>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Sequence: [<Ref: SingleIdentifierGrammar>, <Bracketed: [<Ref: SingleIdentifierListS...]>, <Ref: QuotedLiteralSegment>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match PRN     	    	[ns=2, ps=0, ms=0, pruned=[], opts=[<Ref: NakedIdentifierSegment>, <Ref: QuotedIdentifierSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:7 ]	.......SingleIdentifierGrammar                    	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'user_id'>, seg="'user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:6 ]	......SingleIdentifierGrammar                     	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'user_id'>, seg="'user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:6 ]	......AliasExpressionSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'user_id'>, seg="'user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:5 ]	.....AliasExpressionSegment                       	Seque.match OUT     	++  	[match=<MatchResult 1/1: 'user_id'>, seg="'user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....AliasExpressionSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 1/1: 'user_id'>, seg="'user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...AliasExpressionSegment                         	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'AS user_id'>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..AliasExpressionSegment                          	Alias.match OUT     	++  	[match=<MatchResult 1/1: 'AS user_id'>, seg="'AS user_id'"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..SelectClauseElementSegment                      	Ref.match OUT       	++  	[match=<MatchResult 1/1: 'AS user_id'>, seg="'AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.SelectClauseElementSegment                       	Seque.match OUT     	++  	[match=<MatchResult 3/3: 'NULL::INT AS user_id'>, seg="'NULL::INT AS user_id'"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:0 ]	SelectClauseElementSegment                        	OneOf.match OUT     	++  	[match=<MatchResult 3/3: 'NULL::INT AS user_id'>, seg="'NULL::INT AS user_id'"]
DEBUG    sqlfluff.parser:base.py:859 SelectClauseElementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: SelectClauseElementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |select_clause_element:
[L:  1, P:  1]      |    expression:
[L:  1, P:  1]      |        literal:                                              'NULL'
[L:  1, P:  5]      |        cast_expression:
[L:  1, P:  5]      |            casting_operator:                                 '::'
[L:  1, P:  7]      |            data_type:
[L:  1, P:  7]      |                data_type_identifier:                         'INT'
[L:  1, P: 10]      |    whitespace:                                               ' '
[L:  1, P: 11]      |    alias_expression:
[L:  1, P: 11]      |        keyword:                                              'AS'
[L:  1, P: 13]      |        whitespace:                                           ' '
[L:  1, P: 14]      |        identifier:                                           'user_id'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <ExpressionSegment: ([L:  1, P:  1])>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 10]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <AliasExpressionSegment: ([L:  1, P: 11])>...
_ test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE TABLE test] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'TRUNCATE'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'TABLE'>, <WhitespaceSegment: ([L:  1, P: 15]) ' '>, <CodeSegment: ([L:  1, P: 16]) 'test'>)
Base route...
<TruncateStatementSegment: ([L:  1, P:  1])>
<TruncateStatementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.TruncateStatementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 TruncateStatementSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 TruncateStatementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: TruncateStatementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |truncate_table:
[L:  1, P:  1]      |    raw:                                                      'TRUNCATE'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    raw:                                                      'TABLE'
[L:  1, P: 15]      |    whitespace:                                               ' '
[L:  1, P: 16]      |    raw:                                                      'test'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'TRUNCATE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'TABLE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P: 15]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 16]) 'test'>...
_ test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE test] _
----------------------------- Captured stdout call -----------------------------
(<CodeSegment: ([L:  1, P:  1]) 'TRUNCATE'>, <WhitespaceSegment: ([L:  1, P:  9]) ' '>, <CodeSegment: ([L:  1, P: 10]) 'test'>)
Base route...
<TruncateStatementSegment: ([L:  1, P:  1])>
<TruncateStatementSegment: ([L:  1, P:  1])>
<class 'sqlfluff.dialects.dialect_ansi.TruncateStatementSegment'>
<class 'str'>
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:base.py:777 TruncateStatementSegment.parse: no grammar. Going straight to expansion
DEBUG    sqlfluff.parser:base.py:859 TruncateStatementSegment.parse: Done Parse. Plotting Recursion. Recurse=True
DEBUG    sqlfluff.parser:base.py:868 ###
#
# Beginning Parse Depth 1: TruncateStatementSegment
#
###
Initial Structure:
[L:  1, P:  1]      |truncate_table:
[L:  1, P:  1]      |    raw:                                                      'TRUNCATE'
[L:  1, P:  9]      |    whitespace:                                               ' '
[L:  1, P: 10]      |    raw:                                                      'test'

INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P:  1]) 'TRUNCATE'>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <WhitespaceSegment: ([L:  1, P:  9]) ' '>...
INFO     sqlfluff.parser:base.py:251 [PD:1] Skipping expansion of <CodeSegment: ([L:  1, P: 10]) 'test'>...
_ test__dialect__ansi_specific_segment_not_match[ObjectReferenceSegment-\n     ] _
----------------------------- Captured stdout call -----------------------------
(<NewlineSegment: ([L:  1, P:  1]) '\n'>, <WhitespaceSegment: ([L:  2, P:  1]) '     '>)
------------------------------ Captured log call -------------------------------
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..None                                            	Delim._look_ahead_match IN	    	[ls=2, seg='\n     ']
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..None                                            	Delim._look_ahead_match SI	    	[mq=[], sb=['', '']]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..None                                            	OneOf.match PRN     	    	[ns=1, ps=10, ms=0, pruned=[<Ref: OnKeywordSegment>, <Ref: AsKeywordSegment>, <Ref: UsingKeywordSegment>, <Ref: CommaSegment>, <Ref: CastOperatorSegment>, <Ref: StartSquareBracketSegment>, <Ref: StartBracketSegment>, <Ref: ColonSegment>, <Ref: DelimiterSegment>, <class 'sqlfluff.core.parser.segments.base.BracketedSegment'>], opts=[<Ref: BinaryOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...BinaryOperatorGrammar                          	OneOf.match PRN     	    	[ns=1, ps=3, ms=0, pruned=[<Ref: ArithmeticBinaryOperatorGrammar>, <Ref: StringBinaryOperatorGrammar>, <Ref: BooleanBinaryOperatorGrammar>], opts=[<Ref: ComparisonOperatorGrammar>]]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ComparisonOperatorGrammar                     	OneOf.match PRN     	    	[ns=1, ps=7, ms=0, pruned=[<Ref: EqualsSegment>, <Ref: GreaterThanSegment>, <Ref: LessThanSegment>, <Ref: GreaterThanOrEqualToSegment>, <Ref: LessThanOrEqualToSegment>, <Ref: NotEqualToSegment_a>, <Ref: NotEqualToSegment_b>], opts=[<Ref: LikeOperatorSegment>]]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:5 ]	.....ComparisonOperatorGrammar                    	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:4 ]	....ComparisonOperatorGrammar                     	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:4 ]	....BinaryOperatorGrammar                         	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:3 ]	...BinaryOperatorGrammar                          	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:3 ]	...None                                           	Ref.match OUT       	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:2 ]	..None                                            	OneOf.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:2 ]	..None                                            	NonCo.match OUT     	++  	[match=<MatchResult 2/2: '\n     '>, seg="'\\n     '"]
INFO     sqlfluff.parser:match_logging.py:28 [PD:0  MD:1 ]	.None                                             	Delim.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
DEBUG    sqlfluff.parser:match_logging.py:30 [PD:0  MD:0 ]	None                                              	Objec.match OUT     	    	[match=<MatchResult 0/2: ''>, seg="'\\n     '"]
_ test__dialect__ansi_specific_segment_not_parse[SELECT 1 + (2 -err_locations0] _
----------------------------- Captured stdout call -----------------------------
[SQLParseError("Couldn't find closing bracket for opening bracket.")]
_ test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 UNION SELECT * FROM b-err_locations1] _
----------------------------- Captured stdout call -----------------------------
[SQLParseError("Line 1, Position 27: Found unparsable section: ' UNION SELECT * FROM b'")]
_ test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a LIMIT 1 UNION SELECT * FROM b-err_locations2] _
----------------------------- Captured stdout call -----------------------------
[SQLParseError("Line 1, Position 24: Found unparsable section: ' UNION SELECT * FROM b'")]
_ test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 LIMIT 1 UNION SELECT * FROM b-err_locations3] _
----------------------------- Captured stdout call -----------------------------
[SQLParseError("Line 1, Position 35: Found unparsable section: ' UNION SELECT * FROM b'")]
=========================== short test summary info ============================
PASSED test/dialects/ansi_test.py::test__dialect__ansi__file_lex[a b-res0]
PASSED test/dialects/ansi_test.py::test__dialect__ansi__file_lex[b.c-res1]
PASSED test/dialects/ansi_test.py::test__dialect__ansi__file_lex[abc \n \t def  ;blah-res2]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectKeywordSegment-select]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NakedIdentifierSegment-online_sales]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[BareFunctionSegment-current_timestamp]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[FunctionSegment-current_timestamp()]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NumericLiteralSegment-1000.0]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-online_sales / 1000.0]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[IntervalExpressionSegment-INTERVAL 1 YEAR]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN 'nothing' ELSE 'test' END]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN CASE WHEN true THEN 'something' ELSE 'nothing' END ELSE 'test' END]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CAST(ROUND(online_sales / 1000.0) AS varchar)]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-name NOT LIKE '%y']
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-MIN (test.id) AS min_test_id]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 1 year)]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[1]]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[OFFSET(1)]]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[5:8]]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-4 + my_array[OFFSET(1)]]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-bits[OFFSET(0)] + 7]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)]) / audience_size AS relative_abundance]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-count_18_24 * bits[OFFSET(0)] + count_25_34]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)] + count_25_34) / audience_size AS relative_abundance]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectStatementSegment-SELECT t.val/t.id FROM test WHERE id*1.0/id > 0.8]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-t.val/t.id]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS INT64)]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS numeric(8,4))]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.*]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.*]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.c.*]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ObjectReferenceSegment-a..c.*]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment--some_variable]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-- some_variable]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-concat(left(uaid, 2), '|', right(concat('0000000', SPLIT_PART(uaid, '|', 4)), 10), '|', '00000000')]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is null]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is not null]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-NULL::INT]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-NULL::INT AS user_id]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE TABLE test]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE test]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_match[ObjectReferenceSegment-\n     ]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT 1 + (2 -err_locations0]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 UNION SELECT * FROM b-err_locations1]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a LIMIT 1 UNION SELECT * FROM b-err_locations2]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 LIMIT 1 UNION SELECT * FROM b-err_locations3]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_is_whitespace
PASSED test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-True-meta_loc0]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-False-meta_loc1]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-True-meta_loc2]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-False-meta_loc3]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[;;-Line 1, Position 1: Found unparsable section: ';;']
PASSED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[select id from tbl;-]
PASSED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[select id from tbl;select id2 from tbl2;-]
FAILED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[select id from tbl;;-Could not parse: ;]
FAILED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[select id from tbl;;;;;;-Could not parse: ;;;;;]
FAILED test/dialects/ansi_test.py::test__dialect__ansi_multiple_semicolons[select id from tbl;;select id2 from tbl2;-Could not parse: ;select id2 from tbl2;]
=================== 3 failed, 56 passed, 1 warning in 1.84s ====================
+ git checkout 304a197829f98e7425a46d872ada73176137e5ae test/dialects/ansi_test.py
Updated 1 path from c2e0eb73a
