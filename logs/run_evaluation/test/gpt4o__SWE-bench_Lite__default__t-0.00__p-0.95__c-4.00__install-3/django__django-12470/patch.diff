
diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..227263943f 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -143,7 +143,12 @@ class ModelBase(type):
                 # Non-abstract child classes inherit some attributes from their
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
-                if not hasattr(meta, 'ordering'):
+                if not hasattr(meta, 'ordering') or not meta.ordering:
+                    if base_meta and base_meta.ordering:
+                        new_class._meta.ordering = base_meta.ordering
+                        new_class._meta.ordering = base_meta.ordering
+                        new_class._meta.ordering = base_meta.ordering
+                if not hasattr(meta, 'ordering') or not meta.ordering:
                     new_class._meta.ordering = base_meta.ordering
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
diff --git a/django/db/models/options.py b/django/db/models/options.py
index f027a74976..2504a41e40 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -83,7 +83,7 @@ class Options:
         self.verbose_name_plural = None
         self.db_table = ''
         self.ordering = []
-        self._ordering_clash = False
+        print(f"Options.__init__: self.ordering = {self.ordering}")
         self.indexes = []
         self.constraints = []
         self.unique_together = []
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..868ac2d4d9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,37 @@
+from django.db import models
+from django.conf import settings
+from django.db import connection
+from django.apps import apps
+from django.apps import AppConfig
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+apps.populate(settings.INSTALLED_APPS)
+
+class Parent(models.Model):
+    class Meta:
+            app_label = 'myapp'
+
+class Child(Parent):
+    class Meta:
+        app_label = 'myapp'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Parent)
+    schema_editor.create_model(Child)
+
+# Query Child model
+query = Child.objects.all().query
+print(query)
