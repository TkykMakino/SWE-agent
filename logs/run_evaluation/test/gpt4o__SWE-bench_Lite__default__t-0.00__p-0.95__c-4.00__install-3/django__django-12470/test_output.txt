+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/base.py
	modified:   django/db/models/options.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 142ab6846ac09d6d401e26fc8b6b988a583ac0f5
Author: gowthamk63 <gowthamk63@gmail.com>
Date:   Wed Mar 11 15:14:50 2020 -0400

    Fixed #31123 -- Added --include-stale-apps option to the remove_stale_contenttypes management command.
    
    Co-Authored-By: Javier Buzzi <buzzi.javier@gmail.com>

diff --git a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py
index 4d282d524e..b1f966b032 100644
--- a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py
+++ b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py
@@ -1,11 +1,11 @@
+import itertools
+
 from django.apps import apps
 from django.contrib.contenttypes.models import ContentType
 from django.core.management import BaseCommand
 from django.db import DEFAULT_DB_ALIAS, router
 from django.db.models.deletion import Collector
 
-from ...management import get_contenttypes_and_models
-
 
 class Command(BaseCommand):
 
@@ -18,18 +18,32 @@ class Command(BaseCommand):
             '--database', default=DEFAULT_DB_ALIAS,
             help='Nominates the database to use. Defaults to the "default" database.',
         )
+        parser.add_argument(
+            '--include-stale-apps', action='store_true', default=False,
+            help=(
+                "Deletes stale content types including ones from previously "
+                "installed apps that have been removed from INSTALLED_APPS."
+            ),
+        )
 
     def handle(self, **options):
         db = options['database']
+        include_stale_apps = options['include_stale_apps']
         interactive = options['interactive']
         verbosity = options['verbosity']
 
-        for app_config in apps.get_app_configs():
-            content_types, app_models = get_contenttypes_and_models(app_config, db, ContentType)
-            to_remove = [
-                ct for (model_name, ct) in content_types.items()
-                if model_name not in app_models
-            ]
+        if not router.allow_migrate_model(db, ContentType):
+            return
+        ContentType.objects.clear_cache()
+
+        apps_content_types = itertools.groupby(
+            ContentType.objects.using(db).order_by('app_label', 'model'),
+            lambda obj: obj.app_label,
+        )
+        for app_label, content_types in apps_content_types:
+            if not include_stale_apps and app_label not in apps.app_configs:
+                continue
+            to_remove = [ct for ct in content_types if ct.model_class() is None]
             # Confirm that the content type is stale before deletion.
             using = router.db_for_write(ContentType)
             if to_remove:
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index a5ef671e26..56358b4ef8 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -1651,6 +1651,13 @@ the deletion.
 
 Specifies the database to use. Defaults to ``default``.
 
+.. django-admin-option:: --include-stale-apps
+
+.. versionadded:: 3.1
+
+Deletes stale content types including ones from previously installed apps that
+have been removed from :setting:`INSTALLED_APPS`. Defaults to ``False``.
+
 ``django.contrib.gis``
 ----------------------
 
diff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt
index efc57e8d01..77a71bbc43 100644
--- a/docs/releases/3.1.txt
+++ b/docs/releases/3.1.txt
@@ -99,7 +99,9 @@ Minor features
 :mod:`django.contrib.contenttypes`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-* ...
+* The new :option:`remove_stale_contenttypes --include-stale-apps` option
+  allows removing stale content types from previously installed apps that have
+  been removed from :setting:`INSTALLED_APPS`.
 
 :mod:`django.contrib.gis`
 ~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/tests/contenttypes_tests/test_management.py b/tests/contenttypes_tests/test_management.py
index 3e375518c9..65842aa09e 100644
--- a/tests/contenttypes_tests/test_management.py
+++ b/tests/contenttypes_tests/test_management.py
@@ -10,10 +10,15 @@ from django.test.utils import captured_stdout
 from .models import ModelWithNullFKToSite, Post
 
 
-@modify_settings(INSTALLED_APPS={'append': ['no_models']})
+@modify_settings(INSTALLED_APPS={'append': ['empty_models', 'no_models']})
 class RemoveStaleContentTypesTests(TestCase):
     # Speed up tests by avoiding retrieving ContentTypes for all test apps.
-    available_apps = ['contenttypes_tests', 'no_models', 'django.contrib.contenttypes']
+    available_apps = [
+        'contenttypes_tests',
+        'empty_models',
+        'no_models',
+        'django.contrib.contenttypes',
+    ]
 
     def setUp(self):
         self.before_count = ContentType.objects.count()
@@ -65,9 +70,34 @@ class RemoveStaleContentTypesTests(TestCase):
             contenttypes_management.create_contenttypes(self.app_config, interactive=False, verbosity=0, apps=apps)
         self.assertEqual(ContentType.objects.count(), self.before_count + 1)
 
-    def test_contenttypes_removed_in_apps_without_models(self):
-        ContentType.objects.create(app_label='no_models', model='Fake')
+    @modify_settings(INSTALLED_APPS={'remove': ['empty_models']})
+    def test_contenttypes_removed_in_installed_apps_without_models(self):
+        ContentType.objects.create(app_label='empty_models', model='Fake 1')
+        ContentType.objects.create(app_label='no_models', model='Fake 2')
         with mock.patch('builtins.input', return_value='yes'), captured_stdout() as stdout:
             call_command('remove_stale_contenttypes', verbosity=2)
-        self.assertIn("Deleting stale content type 'no_models | Fake'", stdout.getvalue())
+        self.assertNotIn(
+            "Deleting stale content type 'empty_models | Fake 1'",
+            stdout.getvalue(),
+        )
+        self.assertIn(
+            "Deleting stale content type 'no_models | Fake 2'",
+            stdout.getvalue(),
+        )
+        self.assertEqual(ContentType.objects.count(), self.before_count + 1)
+
+    @modify_settings(INSTALLED_APPS={'remove': ['empty_models']})
+    def test_contenttypes_removed_for_apps_not_in_installed_apps(self):
+        ContentType.objects.create(app_label='empty_models', model='Fake 1')
+        ContentType.objects.create(app_label='no_models', model='Fake 2')
+        with mock.patch('builtins.input', return_value='yes'), captured_stdout() as stdout:
+            call_command('remove_stale_contenttypes', include_stale_apps=True, verbosity=2)
+        self.assertIn(
+            "Deleting stale content type 'empty_models | Fake 1'",
+            stdout.getvalue(),
+        )
+        self.assertIn(
+            "Deleting stale content type 'no_models | Fake 2'",
+            stdout.getvalue(),
+        )
         self.assertEqual(ContentType.objects.count(), self.before_count)
+ git diff 142ab6846ac09d6d401e26fc8b6b988a583ac0f5
diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..227263943f 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -143,7 +143,12 @@ class ModelBase(type):
                 # Non-abstract child classes inherit some attributes from their
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
-                if not hasattr(meta, 'ordering'):
+                if not hasattr(meta, 'ordering') or not meta.ordering:
+                    if base_meta and base_meta.ordering:
+                        new_class._meta.ordering = base_meta.ordering
+                        new_class._meta.ordering = base_meta.ordering
+                        new_class._meta.ordering = base_meta.ordering
+                if not hasattr(meta, 'ordering') or not meta.ordering:
                     new_class._meta.ordering = base_meta.ordering
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
diff --git a/django/db/models/options.py b/django/db/models/options.py
index f027a74976..2504a41e40 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -83,7 +83,7 @@ class Options:
         self.verbose_name_plural = None
         self.db_table = ''
         self.ordering = []
-        self._ordering_clash = False
+        print(f"Options.__init__: self.ordering = {self.ordering}")
         self.indexes = []
         self.constraints = []
         self.unique_together = []
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.1
+ git checkout 142ab6846ac09d6d401e26fc8b6b988a583ac0f5 tests/model_inheritance/models.py tests/model_inheritance/tests.py
Updated 0 paths from d12a79a5db
+ git apply -v -
Checking patch tests/model_inheritance/models.py...
Checking patch tests/model_inheritance/tests.py...
Applied patch tests/model_inheritance/models.py cleanly.
Applied patch tests/model_inheritance/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 model_inheritance.models model_inheritance.tests
Testing against Django installed in '/testbed/django'
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Importing application model_inheritance
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Skipping setup of unused database(s): other.
Options.__init__: self.ordering = []
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, model_inheritance, sessions, staticfiles
  Apply all migrations: admin, sites
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table model_inheritance_worker
    Creating table model_inheritance_student
    Creating table model_inheritance_post
    Creating table model_inheritance_comment
    Creating table model_inheritance_link
    Creating table model_inheritance_chef
    Creating table model_inheritance_place
    Creating table my_restaurant
    Creating table model_inheritance_italianrestaurant
    Creating table model_inheritance_supplier
    Creating table model_inheritance_parkinglot
    Creating table model_inheritance_title
    Creating table model_inheritance_mixinmodel
    Creating table model_inheritance_base
    Creating table model_inheritance_subbase
    Creating table model_inheritance_grandparent
    Creating table model_inheritance_parent
    Creating table model_inheritance_child
    Creating table model_inheritance_grandchild
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial...Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
 OK
  Applying admin.0002_logentry_remove_auto_add...Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
 OK
  Applying admin.0003_logentry_add_action_flag_choices...Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
 OK
  Applying sites.0001_initial...Options.__init__: self.ordering = []
 OK
  Applying sites.0002_alter_domain_unique...Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
 OK
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Options.__init__: self.ordering = []
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Traceback (most recent call last):
  File "./tests/runtests.py", line 573, in <module>
    options.start_at, options.start_after, options.pdb, options.buffer,
  File "./tests/runtests.py", line 311, in django_tests
    extra_tests=extra_tests,
  File "/testbed/django/test/runner.py", line 698, in run_tests
    self.run_checks(databases)
  File "/testbed/django/test/runner.py", line 636, in run_checks
    call_command('check', verbosity=self.verbosity, databases=databases)
  File "/testbed/django/core/management/__init__.py", line 168, in call_command
    return command.execute(*args, **defaults)
  File "/testbed/django/core/management/base.py", line 369, in execute
    output = self.handle(*args, **options)
  File "/testbed/django/core/management/commands/check.py", line 69, in handle
    databases=options['databases'],
  File "/testbed/django/core/management/base.py", line 394, in check
    databases=databases,
  File "/testbed/django/core/checks/registry.py", line 68, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/testbed/django/core/checks/model_checks.py", line 34, in check_all_models
    errors.extend(model.check(**kwargs))
  File "/testbed/django/db/models/base.py", line 1284, in check
    *cls._check_ordering(),
  File "/testbed/django/db/models/base.py", line 1676, in _check_ordering
    if cls._meta._ordering_clash:
AttributeError: 'Options' object has no attribute '_ordering_clash'
+ git checkout 142ab6846ac09d6d401e26fc8b6b988a583ac0f5 tests/model_inheritance/models.py tests/model_inheritance/tests.py
Updated 2 paths from d12a79a5db
