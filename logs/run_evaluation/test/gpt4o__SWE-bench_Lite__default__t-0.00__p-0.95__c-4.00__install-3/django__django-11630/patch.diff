
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..faa1904df4 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -36,7 +36,8 @@ def check_all_models(app_configs=None, **kwargs):
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
     for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
+        app_labels = set(label.split('.')[0] for label in model_labels)
+        if len(app_labels) != len(model_labels):
             errors.append(
                 Error(
                     "db_table '%s' is used by multiple models: %s."
diff --git a/test_env/my_test_project/app1/__init__.py b/test_env/my_test_project/app1/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_env/my_test_project/app1/admin.py b/test_env/my_test_project/app1/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_env/my_test_project/app1/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_env/my_test_project/app1/apps.py b/test_env/my_test_project/app1/apps.py
new file mode 100644
index 0000000000..1824a7b931
--- /dev/null
+++ b/test_env/my_test_project/app1/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class App1Config(AppConfig):
+    name = 'app1'
diff --git a/test_env/my_test_project/app1/migrations/__init__.py b/test_env/my_test_project/app1/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_env/my_test_project/app1/models.py b/test_env/my_test_project/app1/models.py
new file mode 100644
index 0000000000..43b60daf69
--- /dev/null
+++ b/test_env/my_test_project/app1/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Model1(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'shared_table'
diff --git a/test_env/my_test_project/app1/tests.py b/test_env/my_test_project/app1/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_env/my_test_project/app1/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_env/my_test_project/app1/views.py b/test_env/my_test_project/app1/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_env/my_test_project/app1/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/test_env/my_test_project/app2/__init__.py b/test_env/my_test_project/app2/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_env/my_test_project/app2/admin.py b/test_env/my_test_project/app2/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_env/my_test_project/app2/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_env/my_test_project/app2/apps.py b/test_env/my_test_project/app2/apps.py
new file mode 100644
index 0000000000..008e3c5f90
--- /dev/null
+++ b/test_env/my_test_project/app2/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class App2Config(AppConfig):
+    name = 'app2'
diff --git a/test_env/my_test_project/app2/migrations/__init__.py b/test_env/my_test_project/app2/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_env/my_test_project/app2/models.py b/test_env/my_test_project/app2/models.py
new file mode 100644
index 0000000000..5d496c62d7
--- /dev/null
+++ b/test_env/my_test_project/app2/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Model2(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'shared_table'
diff --git a/test_env/my_test_project/app2/tests.py b/test_env/my_test_project/app2/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_env/my_test_project/app2/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_env/my_test_project/app2/views.py b/test_env/my_test_project/app2/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_env/my_test_project/app2/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/test_env/my_test_project/manage.py b/test_env/my_test_project/manage.py
new file mode 100755
index 0000000000..b84300e3aa
--- /dev/null
+++ b/test_env/my_test_project/manage.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_env/my_test_project/my_test_project/__init__.py b/test_env/my_test_project/my_test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_env/my_test_project/my_test_project/asgi.py b/test_env/my_test_project/my_test_project/asgi.py
new file mode 100644
index 0000000000..6c19ec045d
--- /dev/null
+++ b/test_env/my_test_project/my_test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for my_test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_test_project.settings')
+
+application = get_asgi_application()
diff --git a/test_env/my_test_project/my_test_project/settings.py b/test_env/my_test_project/my_test_project/settings.py
new file mode 100644
index 0000000000..c5d604b862
--- /dev/null
+++ b/test_env/my_test_project/my_test_project/settings.py
@@ -0,0 +1,122 @@
+"""
+Django settings for my_test_project project.
+
+Generated by 'django-admin startproject' using Django 3.0.dev20190807092314.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '%a^e(^54jr-=49qgz8*5(^%8ipon#n5&r=qlpu#_v=15@s-yfi'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'app1',
+    'app2',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'my_test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'my_test_project.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/test_env/my_test_project/my_test_project/urls.py b/test_env/my_test_project/my_test_project/urls.py
new file mode 100644
index 0000000000..35d4f84255
--- /dev/null
+++ b/test_env/my_test_project/my_test_project/urls.py
@@ -0,0 +1,21 @@
+"""my_test_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_env/my_test_project/my_test_project/wsgi.py b/test_env/my_test_project/my_test_project/wsgi.py
new file mode 100644
index 0000000000..2f00dbe760
--- /dev/null
+++ b/test_env/my_test_project/my_test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for my_test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_test_project.settings')
+
+application = get_wsgi_application()
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..2753b50b9c
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/asgi.py b/test_project/test_project/asgi.py
new file mode 100644
index 0000000000..342a9c9009
--- /dev/null
+++ b/test_project/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_asgi_application()
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..f27bdaaa4e
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,120 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 3.0.dev20190807092314.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '$+k-m0$0_vtgx4%-cr95b+!looor)&^4fl%6=1*5@dq$+s_qw1'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..cc86b838e7
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,21 @@
+"""test_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..7050af9edd
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_wsgi_application()
