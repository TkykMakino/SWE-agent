
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 9ce46e3f73..56c89fcdc7 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -156,7 +156,10 @@ class Field(RegisterLookupMixin):
         if isinstance(choices, collections.abc.Iterator):
             choices = list(choices)
         self.choices = choices
-        self.help_text = help_text
+        if self.choices and self.max_length is not None:
+            max_choice_length = max(len(str(choice)) for choice, _ in self.choices)
+            if self.max_length < max_choice_length:
+                raise ValueError(f"max_length {self.max_length} is too short to fit the longest choice {max_choice_length}.")
         self.db_index = db_index
         self.db_column = db_column
         self._db_tablespace = db_tablespace
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0776df54be
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,6 @@
+from django.db.models import CharField
+
+try:
+    field = CharField(max_length=3, choices=[('longvalue', 'Long Value')])
+except ValueError as e:
+    print(e)
diff --git a/test_max_length.py b/test_max_length.py
new file mode 100644
index 0000000000..feee50f83a
--- /dev/null
+++ b/test_max_length.py
@@ -0,0 +1,17 @@
+import unittest
+from django.db.models import CharField
+
+class TestMaxLength(unittest.TestCase):
+    def test_max_length_too_short(self):
+        with self.assertRaises(ValueError) as context:
+            CharField(max_length=3, choices=[('longvalue', 'Long Value')])
+        self.assertIn("max_length 3 is too short to fit the longest choice 9", str(context.exception))
+
+    def test_max_length_sufficient(self):
+        try:
+            CharField(max_length=10, choices=[('longvalue', 'Long Value')])
+        except ValueError:
+            self.fail("CharField raised ValueError unexpectedly!")
+
+if __name__ == '__main__':
+    unittest.main()
