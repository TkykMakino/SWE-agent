
diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..dcf00c569d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,68 @@
+from django.conf import settings
+from django.core.exceptions import ValidationError
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+# Minimal settings configuration
+settings.configure(
+    USE_I18N=False,
+)
+
+def test_validator(validator, username):
+    try:
+        validator(username)
+        print(f"'{username}' is valid.")
+    except ValidationError as e:
+        print(f"'{username}' is invalid: {e}")
+
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+# Test usernames
+test_usernames = [
+    "validusername",
+    "valid.username",
+    "valid+username",
+    "valid-username",
+    "valid@username",
+    "invalidusername\n"
+]
+
+print("Testing ASCIIUsernameValidator:")
+for username in test_usernames:
+    test_validator(ascii_validator, username)
+
+print("\nTesting UnicodeUsernameValidator:")
+for username in test_usernames:
+    test_validator(unicode_validator, username)
+
+print("Script completed successfully, no errors.")
+
+def test_validator(validator, username):
+    try:
+        validator(username)
+        print(f"'{username}' is valid.")
+    except Exception as e:
+        print(f"'{username}' is invalid: {e}")
+
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+# Test usernames
+test_usernames = [
+    "validusername",
+    "valid.username",
+    "valid+username",
+    "valid-username",
+    "valid@username",
+    "invalidusername\n"
+]
+
+print("Testing ASCIIUsernameValidator:")
+for username in test_usernames:
+    test_validator(ascii_validator, username)
+
+print("\nTesting UnicodeUsernameValidator:")
+for username in test_usernames:
+    test_validator(unicode_validator, username)
+
+print("Script completed successfully, no errors.")
