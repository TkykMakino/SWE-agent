+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   pydicom/dataelem.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	mydicom

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit f909c76e31f759246cec3708dadd173c5d6e84b1
Author: scaramallion <scaramallion@users.noreply.github.com>
Date:   Tue Jun 15 12:32:54 2021 +1000

    Don't inherit Dataset from dict (#1403)
    
    * Don't inherit from dict
    
    * Fix version issue in test

diff --git a/doc/release_notes/v2.2.0.rst b/doc/release_notes/v2.2.0.rst
index 65573c97d..4c9b93dee 100644
--- a/doc/release_notes/v2.2.0.rst
+++ b/doc/release_notes/v2.2.0.rst
@@ -29,6 +29,7 @@ Changes
 * :func:`~pydicom.filewriter.write_file` is deprecated and will be removed in
   v3.0, use :func:`~pydicom.filewriter.dcmwrite` instead.
 * Data dictionaries updated to version 2021b of the DICOM Standard
+* :class:`~pydicom.dataset.Dataset` no longer inherits from :class:`dict`
 
 Enhancements
 ------------
diff --git a/pydicom/dataset.py b/pydicom/dataset.py
index 634d6ebe8..323a50e88 100644
--- a/pydicom/dataset.py
+++ b/pydicom/dataset.py
@@ -33,12 +33,10 @@ from typing import (
 import warnings
 import weakref
 
-if TYPE_CHECKING:  # pragma: no cover
-    try:
-        import numpy  # type: ignore[import]
-        import numpy as np
-    except ImportError:
-        pass
+try:
+    import numpy  # type: ignore[import]
+except ImportError:
+    pass
 
 import pydicom  # for dcmwrite
 import pydicom.charset
@@ -220,18 +218,11 @@ def _dict_equal(
 
 _Dataset = TypeVar("_Dataset", bound="Dataset")
 _DatasetValue = Union[DataElement, RawDataElement]
+_DatasetType = Union[_Dataset, MutableMapping[BaseTag, _DatasetValue]]
 
 
-class Dataset(Dict[BaseTag, _DatasetValue]):
-    """Contains a collection (dictionary) of DICOM Data Elements.
-
-    Behaves like a :class:`dict`.
-
-    .. note::
-
-        :class:`Dataset` is only derived from :class:`dict` to make it work in
-        a NumPy :class:`~numpy.ndarray`. The parent :class:`dict` class
-        is never called, as all :class:`dict` methods are overridden.
+class Dataset:
+    """A DICOM dataset as a mutable mapping of DICOM Data Elements.
 
     Examples
     --------
@@ -374,9 +365,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
     """
     indent_chars = "   "
 
-    def __init__(
-        self, *args: MutableMapping[BaseTag, _DatasetValue], **kwargs
-    ) -> None:
+    def __init__(self, *args: _DatasetType, **kwargs) -> None:
         """Create a new :class:`Dataset` instance."""
         self._parent_encoding = kwargs.get('parent_encoding', default_encoding)
 
@@ -411,6 +400,8 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         self._pixel_array: Optional["numpy.ndarray"] = None
         self._pixel_id: Dict[str, int] = {}
 
+        self.file_meta: FileMetaDataset
+
     def __enter__(self) -> "Dataset":
         """Method invoked on entry to a with statement."""
         return self
@@ -463,6 +454,10 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         # use data_element.tag since DataElement verified it
         self._dict[data_element.tag] = data_element
 
+    def __array__(self) -> "numpy.ndarray":
+        """Support accessing the dataset from a numpy array."""
+        return numpy.asarray(self._dict)
+
     def data_element(self, name: str) -> Optional[DataElement]:
         """Return the element corresponding to the element keyword `name`.
 
@@ -484,7 +479,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
             return self[tag]
         return None
 
-    def __contains__(self, name: TagType) -> bool:  # type: ignore[override]
+    def __contains__(self, name: TagType) -> bool:
         """Simulate dict.__contains__() to handle DICOM keywords.
 
         Examples
@@ -719,7 +714,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
 
     @overload
     def get(self, key: str, default: Optional[Any] = None) -> Any:
-        pass
+        pass  # pragma: no cover
 
     @overload
     def get(
@@ -727,7 +722,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         key: Union[int, Tuple[int, int], BaseTag],
         default: Optional[Any] = None
     ) -> DataElement:
-        pass
+        pass  # pragma: no cover
 
     def get(
         self,
@@ -774,9 +769,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         except KeyError:
             return default
 
-    def items(  # type: ignore[override]
-        self
-    ) -> AbstractSet[Tuple[BaseTag, _DatasetValue]]:
+    def items(self) -> AbstractSet[Tuple[BaseTag, _DatasetValue]]:
         """Return the :class:`Dataset` items to simulate :meth:`dict.items`.
 
         Returns
@@ -788,7 +781,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         """
         return self._dict.items()
 
-    def keys(self) -> AbstractSet[BaseTag]:  # type: ignore[override]
+    def keys(self) -> AbstractSet[BaseTag]:
         """Return the :class:`Dataset` keys to simulate :meth:`dict.keys`.
 
         Returns
@@ -852,11 +845,11 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
 
     @overload
     def __getitem__(self, key: slice) -> "Dataset":
-        pass
+        pass  # pragma: no cover
 
     @overload
     def __getitem__(self, key: TagType) -> DataElement:
-        pass
+        pass  # pragma: no cover
 
     def __getitem__(
         self, key: Union[slice, TagType]
@@ -1113,11 +1106,11 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
 
     @overload
     def get_item(self, key: slice) -> "Dataset":
-        pass
+        pass  # pragma: no cover
 
     @overload
     def get_item(self, key: TagType) -> DataElement:
-        pass
+        pass  # pragma: no cover
 
     def get_item(
         self, key: Union[slice, TagType]
@@ -1218,7 +1211,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         """
         return self[(group, 0x0000):(group + 1, 0x0000)]  # type: ignore[misc]
 
-    def __iter__(self) -> Iterator[DataElement]:  # type: ignore[override]
+    def __iter__(self) -> Iterator[DataElement]:
         """Iterate through the top-level of the Dataset, yielding DataElements.
 
         Examples
@@ -1468,9 +1461,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
 
         handler = getattr(pydicom.config, handler_name)
 
-        file_meta = cast("FileDataset", self).file_meta
-        file_meta = cast("FileMetaDataset", file_meta)
-        tsyntax = file_meta.TransferSyntaxUID
+        tsyntax = self.file_meta.TransferSyntaxUID
         if not handler.supports_transfer_syntax(tsyntax):
             raise NotImplementedError(
                 "Unable to decode pixel data with a transfer syntax UID"
@@ -1492,8 +1483,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         See :meth:`~Dataset.convert_pixel_data` for more information.
         """
         # Find all possible handlers that support the transfer syntax
-        file_meta = cast("FileDataset", self).file_meta
-        ts = cast("FileMetaDataset", file_meta).TransferSyntaxUID
+        ts = self.file_meta.TransferSyntaxUID
         possible_handlers = [
             hh for hh in pydicom.config.pixel_data_handlers
             if hh is not None
@@ -1802,7 +1792,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
             # All is as expected, updated the Transfer Syntax
             self.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian
 
-    def overlay_array(self, group: int) -> "np.ndarray":
+    def overlay_array(self, group: int) -> "numpy.ndarray":
         """Return the *Overlay Data* in `group` as a :class:`numpy.ndarray`.
 
         .. versionadded:: 1.4
@@ -1874,7 +1864,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         raise last_exception  # type: ignore[misc]
 
     @property
-    def pixel_array(self) -> "np.ndarray":
+    def pixel_array(self) -> "numpy.ndarray":
         """Return the pixel data as a :class:`numpy.ndarray`.
 
         .. versionchanged:: 1.4
@@ -1891,7 +1881,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         self.convert_pixel_data()
         return cast("numpy.ndarray", self._pixel_array)
 
-    def waveform_array(self, index: int) -> "np.ndarray":
+    def waveform_array(self, index: int) -> "numpy.ndarray":
         """Return an :class:`~numpy.ndarray` for the multiplex group at
         `index` in the (5400,0100) *Waveform Sequence*.
 
@@ -2318,14 +2308,7 @@ class Dataset(Dict[BaseTag, _DatasetValue]):
         """
         return dir(self)
 
-    def update(  # type: ignore[override]
-        self,
-        d: Union[
-            Dict[str, Any],
-            MutableMapping[BaseTag, _DatasetValue],
-            MutableMapping[TagType, _DatasetValue]
-        ]
-    ) -> None:
+    def update(self, d: _DatasetType) -> None:
         """Extend :meth:`dict.update` to handle DICOM tags and keywords.
 
         Parameters
@@ -2619,7 +2602,7 @@ class FileDataset(Dataset):
     def __init__(
         self,
         filename_or_obj: Union[str, "os.PathLike[AnyStr]", BinaryIO],
-        dataset: Dataset,
+        dataset: _DatasetType,
         preamble: Optional[bytes] = None,
         file_meta: Optional["FileMetaDataset"] = None,
         is_implicit_VR: bool = True,
@@ -2651,7 +2634,9 @@ class FileDataset(Dataset):
         """
         Dataset.__init__(self, dataset)
         self.preamble = preamble
-        self.file_meta: Optional["FileMetaDataset"] = file_meta
+        self.file_meta: "FileMetaDataset" = (
+            file_meta if file_meta is not None else FileMetaDataset()
+        )
         self.is_implicit_VR: bool = is_implicit_VR
         self.is_little_endian: bool = is_little_endian
 
@@ -2810,9 +2795,7 @@ class FileMetaDataset(Dataset):
     Group 2 (File Meta Information) data elements
     """
 
-    def __init__(
-        self, *args: MutableMapping[BaseTag, _DatasetValue], **kwargs
-    ) -> None:
+    def __init__(self, *args: _DatasetType, **kwargs) -> None:
         """Initialize a FileMetaDataset
 
         Parameters are as per :class:`Dataset`; this overrides the super class
@@ -2845,7 +2828,7 @@ class FileMetaDataset(Dataset):
         self.PrivateInformation: bytes  # OB, 1C
 
     @staticmethod
-    def validate(init_value: MutableMapping[BaseTag, _DatasetValue]) -> None:
+    def validate(init_value: _DatasetType) -> None:
         """Raise errors if initialization value is not acceptable for file_meta
 
         Parameters
diff --git a/pydicom/encoders/base.py b/pydicom/encoders/base.py
index 00a3f994b..563a13434 100644
--- a/pydicom/encoders/base.py
+++ b/pydicom/encoders/base.py
@@ -289,9 +289,7 @@ class Encoder:
         kwargs = {**self.kwargs_from_ds(ds), **kwargs}
         self._validate_encoding_profile(**kwargs)
 
-        file_meta = cast("FileDataset", ds).file_meta
-        file_meta = cast("FileMetaDataset", file_meta)
-        tsyntax = file_meta.TransferSyntaxUID
+        tsyntax = ds.file_meta.TransferSyntaxUID
         if not tsyntax.is_compressed:
             return self._encode_bytes(
                 ds.PixelData, idx, encoding_plugin, **kwargs
diff --git a/pydicom/multival.py b/pydicom/multival.py
index 4220c9afa..a96d1ecf4 100644
--- a/pydicom/multival.py
+++ b/pydicom/multival.py
@@ -83,10 +83,11 @@ class MultiValue(MutableSequence[_ItemType]):
         return self._list == other
 
     @overload
-    def __getitem__(self, index: int) -> _ItemType: pass
+    def __getitem__(self, index: int) -> _ItemType: pass  # pragma: no cover
 
     @overload
-    def __getitem__(self, index: slice) -> MutableSequence[_ItemType]: pass
+    def __getitem__(self, index: slice) -> MutableSequence[_ItemType]:
+        pass  # pragma: no cover
 
     def __getitem__(
         self, index: Union[slice, int]
@@ -106,10 +107,11 @@ class MultiValue(MutableSequence[_ItemType]):
         return self._list != other
 
     @overload
-    def __setitem__(self, idx: int, val: _T) -> None: pass
+    def __setitem__(self, idx: int, val: _T) -> None: pass  # pragma: no cover
 
     @overload
-    def __setitem__(self, idx: slice, val: Iterable[_T]) -> None: pass
+    def __setitem__(self, idx: slice, val: Iterable[_T]) -> None:
+        pass  # pragma: no cover
 
     def __setitem__(  # type: ignore[misc]
         self, idx: Union[int, slice], val: Union[_T, Iterable[_T]]
diff --git a/pydicom/pixel_data_handlers/gdcm_handler.py b/pydicom/pixel_data_handlers/gdcm_handler.py
index 0bd2a3f73..090083e84 100644
--- a/pydicom/pixel_data_handlers/gdcm_handler.py
+++ b/pydicom/pixel_data_handlers/gdcm_handler.py
@@ -66,9 +66,8 @@ def needs_to_convert_to_RGB(ds: "Dataset"):
 
     This affects JPEG transfer syntaxes.
     """
-    file_meta: "FileMetaDataset" = ds.file_meta  # type: ignore[has-type]
     should_convert = (
-        file_meta.TransferSyntaxUID in should_convert_these_syntaxes_to_RGB
+        ds.file_meta.TransferSyntaxUID in should_convert_these_syntaxes_to_RGB
     )
     should_convert &= ds.SamplesPerPixel == 3
     return False
@@ -80,9 +79,8 @@ def should_change_PhotometricInterpretation_to_RGB(ds: "Dataset") -> bool:
 
     This affects JPEG transfer syntaxes.
     """
-    file_meta: "FileMetaDataset" = ds.file_meta  # type: ignore[has-type]
     should_change = (
-        file_meta.TransferSyntaxUID in should_convert_these_syntaxes_to_RGB
+        ds.file_meta.TransferSyntaxUID in should_convert_these_syntaxes_to_RGB
     )
     should_change &= ds.SamplesPerPixel == 3
     return False
@@ -114,9 +112,7 @@ def create_data_element(ds: "Dataset") -> "DataElement":
     gdcm.DataElement
         The converted *Pixel Data* element.
     """
-    file_meta = cast("FileDataset", ds).file_meta
-    file_meta = cast("FileMetaDataset", file_meta)
-    tsyntax = file_meta.TransferSyntaxUID
+    tsyntax = ds.file_meta.TransferSyntaxUID
     data_element = gdcm.DataElement(gdcm.Tag(0x7fe0, 0x0010))
     if tsyntax.is_compressed:
         if getattr(ds, 'NumberOfFrames', 1) > 1:
@@ -168,9 +164,7 @@ def create_image(ds: "Dataset", data_element: "DataElement") -> "gdcm.Image":
         gdcm.PhotometricInterpretation(pi_type)
     )
 
-    file_meta = cast("FileDataset", ds).file_meta
-    file_meta = cast("FileMetaDataset", file_meta)
-    tsyntax = file_meta.TransferSyntaxUID
+    tsyntax = ds.file_meta.TransferSyntaxUID
     ts_type = gdcm.TransferSyntax.GetTSType(str.__str__(tsyntax))
     image.SetTransferSyntax(gdcm.TransferSyntax(ts_type))
     pixel_format = gdcm.PixelFormat(
@@ -209,7 +203,7 @@ def create_image_reader(ds: "Dataset") -> "gdcm.ImageReader":
         #   originate with
         new = ds.group_dataset(0x0028)
         new["PixelData"] = ds["PixelData"]  # avoid ambiguous VR
-        new.file_meta = ds.file_meta  # type: ignore[has-type]
+        new.file_meta = ds.file_meta
         tfile = NamedTemporaryFile('wb')
         new.save_as(tfile.name)
         fname = tfile.name
@@ -286,9 +280,7 @@ def get_pixeldata(ds: "Dataset") -> "numpy.ndarray":
             f"expected data {expected_length_pixels}"
         )
 
-    file_meta = cast("FileDataset", ds).file_meta
-    file_meta = cast("FileMetaDataset", file_meta)
-    tsyntax = file_meta.TransferSyntaxUID
+    tsyntax = ds.file_meta.TransferSyntaxUID
     if (
         config.APPLY_J2K_CORRECTIONS
         and tsyntax in [JPEG2000, JPEG2000Lossless]
diff --git a/pydicom/pixel_data_handlers/pillow_handler.py b/pydicom/pixel_data_handlers/pillow_handler.py
index 04a4ecac0..91021c909 100644
--- a/pydicom/pixel_data_handlers/pillow_handler.py
+++ b/pydicom/pixel_data_handlers/pillow_handler.py
@@ -155,9 +155,7 @@ def get_pixeldata(ds: "Dataset") -> "numpy.ndarray":
     NotImplementedError
         If the transfer syntax is not supported
     """
-    file_meta = cast("FileDataset", ds).file_meta
-    file_meta = cast("FileMetaDataset", file_meta)
-    transfer_syntax = file_meta.TransferSyntaxUID
+    transfer_syntax = ds.file_meta.TransferSyntaxUID
 
     if not HAVE_PIL:
         raise ImportError(
diff --git a/pydicom/pixel_data_handlers/pylibjpeg_handler.py b/pydicom/pixel_data_handlers/pylibjpeg_handler.py
index 91cc0e73f..6d335e0ec 100644
--- a/pydicom/pixel_data_handlers/pylibjpeg_handler.py
+++ b/pydicom/pixel_data_handlers/pylibjpeg_handler.py
@@ -223,8 +223,7 @@ def generate_frames(
     RuntimeError
         If the plugin required to decode the pixel data is not installed.
     """
-    file_meta: "FileMetaDataset" = ds.file_meta
-    tsyntax = file_meta.TransferSyntaxUID
+    tsyntax = ds.file_meta.TransferSyntaxUID
     # The check of transfer syntax must be first
     if tsyntax not in _DECODERS:
         if tsyntax in _OPENJPEG_SYNTAXES:
diff --git a/pydicom/pixel_data_handlers/rle_handler.py b/pydicom/pixel_data_handlers/rle_handler.py
index 960c5dcdf..a11dcd561 100644
--- a/pydicom/pixel_data_handlers/rle_handler.py
+++ b/pydicom/pixel_data_handlers/rle_handler.py
@@ -127,8 +127,7 @@ def get_pixeldata(ds: "Dataset", rle_segment_order: str = '>') -> "np.ndarray":
         If the actual length of the pixel data doesn't match the expected
         length.
     """
-    file_meta = cast("FileMetaDataset", ds.file_meta)  # type: ignore[has-type]
-    transfer_syntax = file_meta.TransferSyntaxUID
+    transfer_syntax = ds.file_meta.TransferSyntaxUID
     # The check of transfer syntax must be first
     if transfer_syntax not in SUPPORTED_TRANSFER_SYNTAXES:
         raise NotImplementedError(
diff --git a/pydicom/pixel_data_handlers/util.py b/pydicom/pixel_data_handlers/util.py
index 1cb7895ae..afdb8cddb 100644
--- a/pydicom/pixel_data_handlers/util.py
+++ b/pydicom/pixel_data_handlers/util.py
@@ -1146,9 +1146,7 @@ def pixel_dtype(ds: "Dataset", as_float: bool = False) -> "np.dtype":
         raise ImportError("Numpy is required to determine the dtype.")
 
     if ds.is_little_endian is None:
-        file_meta = cast("FileDataset", ds).file_meta
-        file_meta = cast("FileMetaDataset", file_meta)
-        ds.is_little_endian = file_meta.TransferSyntaxUID.is_little_endian
+        ds.is_little_endian = ds.file_meta.TransferSyntaxUID.is_little_endian
 
     if not as_float:
         # (0028,0103) Pixel Representation, US, 1
@@ -1302,9 +1300,7 @@ def reshape_pixel_array(ds: "Dataset", arr: "np.ndarray") -> "np.ndarray":
 
     # Valid values for Planar Configuration are dependent on transfer syntax
     if nr_samples > 1:
-        file_meta = cast("FileDataset", ds).file_meta
-        file_meta = cast("FileMetaDataset", file_meta)
-        transfer_syntax = file_meta.TransferSyntaxUID
+        transfer_syntax = ds.file_meta.TransferSyntaxUID
         if transfer_syntax in ['1.2.840.10008.1.2.4.50',
                                '1.2.840.10008.1.2.4.57',
                                '1.2.840.10008.1.2.4.70',
diff --git a/pydicom/sequence.py b/pydicom/sequence.py
index 1b54ebe6b..43d9d4246 100644
--- a/pydicom/sequence.py
+++ b/pydicom/sequence.py
@@ -121,10 +121,12 @@ class Sequence(MultiValue[Dataset]):
                 item.parent = self._parent
 
     @overload  # type: ignore[override]
-    def __setitem__(self, idx: int, val: Dataset) -> None: pass
+    def __setitem__(self, idx: int, val: Dataset) -> None:
+        pass  # pragma: no cover
 
     @overload
-    def __setitem__(self, idx: slice, val: Iterable[Dataset]) -> None: pass
+    def __setitem__(self, idx: slice, val: Iterable[Dataset]) -> None:
+        pass  # pragma: no cover
 
     def __setitem__(
         self, idx: Union[slice, int], val: Union[Iterable[Dataset], Dataset]
diff --git a/pydicom/tests/test_dataset.py b/pydicom/tests/test_dataset.py
index 3ef2c5b76..b616e514f 100644
--- a/pydicom/tests/test_dataset.py
+++ b/pydicom/tests/test_dataset.py
@@ -5,10 +5,17 @@ import copy
 import io
 import math
 import pickle
+import sys
 import weakref
 
 import pytest
 
+try:
+    import numpy
+    HAVE_NP = True
+except ImportError:
+    HAVE_NP = False
+
 import pydicom
 from pydicom import config
 from pydicom import dcmread
@@ -1835,28 +1842,44 @@ class TestFileDataset:
         fds = FileDataset(Dummy(), ds)
         assert '/some/path/to/test' == fds.filename
 
-    def test_works_as_expected_within_numpy_array(self):
+    @pytest.mark.skipif(not HAVE_NP, reason="Numpy not available")
+    def test_with_array(self):
         """Test Dataset within a numpy array"""
-        try:
-            import numpy as np
-        except ImportError:
-            np = None
+        ds = get_testdata_file("CT_small.dcm", read=True)
+        arr = numpy.array([ds])
+        assert arr[0].PatientName == ds.PatientName
+        assert arr.dtype == object
+        assert arr.shape == (1, )
+        assert arr.flags.writeable
 
-        if np is None:
-            pytest.skip('No numpy installed')
+        arr[0].PatientName = "Citizen^Jan"
+        assert arr[0].PatientName == "Citizen^Jan"
+        assert "BeamSequence" not in arr[0]
+        arr[0].BeamSequence = []
+        assert arr[0].BeamSequence == []
 
-        # see PR #836
-        dataset = Dataset()
-        patient_name = 'MacDonald^George'
-        dataset.PatientName = patient_name
-        array_of_datasets = np.array([dataset])
-        assert patient_name == array_of_datasets[0].PatientName
+        elem = arr[0]["PatientID"]
+        assert isinstance(elem, DataElement)
+
+        b = DicomBytesIO()
+        arr[0].save_as(b)
+        b.seek(0)
+
+        out = dcmread(b)
+        assert out == arr[0]
 
     def test_dataset_overrides_all_dict_attributes(self):
         """Ensure that we don't use inherited dict functionality"""
         ds = Dataset()
         di = dict()
-        expected_diff = {'__class__', '__doc__', '__hash__'}
+        expected_diff = {'__class__', '__doc__', '__hash__', 'fromkeys'}
+        if sys.version_info[:2] >= (3, 8):
+            expected_diff.add('__reversed__')
+        if sys.version_info[:2] >= (3, 9):
+            expected_diff.update([
+                '__ror__', '__ior__', '__or__', '__class_getitem__'
+            ])
+
         assert expected_diff == set(dir(di)) - set(dir(ds))
 
     def test_copy_filedataset(self):
+ git diff f909c76e31f759246cec3708dadd173c5d6e84b1
diff --git a/pydicom/dataelem.py b/pydicom/dataelem.py
index b2709f132..7ee1d65c3 100644
--- a/pydicom/dataelem.py
+++ b/pydicom/dataelem.py
@@ -318,7 +318,10 @@ class DataElement:
         json_element: Dict[str, Any] = {'vr': self.VR}
         if self.VR in jsonrep.BINARY_VR_VALUES:
             if not self.is_empty:
-                binary_value = self.value
+                if self.VR == 'OL' and isinstance(self.value, MultiValue):
+                    binary_value = bytes(self.value)
+                else:
+                    binary_value = self.value
                 encoded_value = base64.b64encode(binary_value).decode('utf-8')
                 if (
                     bulk_data_element_handler is not None
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Installing collected packages: pydicom
  Attempting uninstall: pydicom
    Found existing installation: pydicom 2.2.0.dev0
    Uninstalling pydicom-2.2.0.dev0:
      Successfully uninstalled pydicom-2.2.0.dev0
  DEPRECATION: Legacy editable install of pydicom==2.2.0.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for pydicom
Successfully installed pydicom
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout f909c76e31f759246cec3708dadd173c5d6e84b1 pydicom/tests/test_valuerep.py
Updated 0 paths from 7afea20cd
+ git apply -v -
Checking patch pydicom/tests/test_valuerep.py...
Applied patch pydicom/tests/test_valuerep.py cleanly.
+ pytest -rA pydicom/tests/test_valuerep.py
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-8.3.3, pluggy-1.5.0
rootdir: /testbed
collected 304 items

pydicom/tests/test_valuerep.py ......................................... [ 13%]
........................................................................ [ 37%]
........................................................................ [ 60%]
..........FF............................................................ [ 84%]
..........................F.FF.................                          [100%]

=================================== FAILURES ===================================
______________ TestBadValueRead.test_read_bad_value_in_VR_default ______________

self = <pydicom.tests.test_valuerep.TestBadValueRead object at 0x77342ebf5e20>
allow_invalid_values = None

    def test_read_bad_value_in_VR_default(self, allow_invalid_values):
        # found a conversion
>       assert "1A" == convert_value("SH", self.tag)
E       AttributeError: 'TestBadValueRead' object has no attribute 'tag'

pydicom/tests/test_valuerep.py:987: AttributeError
________ TestBadValueRead.test_read_bad_value_in_VR_enforce_valid_value ________

self = <pydicom.tests.test_valuerep.TestBadValueRead object at 0x77342ebf5df0>
enforce_valid_values = None

    def test_read_bad_value_in_VR_enforce_valid_value(
            self, enforce_valid_values):
        # found a conversion
>       assert "1A" == convert_value("SH", self.tag)
E       AttributeError: 'TestBadValueRead' object has no attribute 'tag'

pydicom/tests/test_valuerep.py:998: AttributeError
_______ test_assigning_bytes[OD-bytes-vm017-vmN17-DoubleFloatPixelData] ________

vr = 'OD', pytype = <class 'bytes'>, vm0 = (None, b''), vmN = (b'\x00\x01',)
keyword = 'DoubleFloatPixelData'

    @pytest.mark.parametrize("vr, pytype, vm0, vmN, keyword", VALUE_REFERENCE)
    def test_assigning_bytes(vr, pytype, vm0, vmN, keyword):
        """Test that byte VRs are excluded from the backslash check."""
        if pytype == bytes:
            ds = Dataset()
            value = b"\x00\x01" + b"\\" + b"\x02\x03"
            setattr(ds, keyword, value)
            elem = ds[keyword]
            assert elem.VR == vr
>           assert elem.value == value
E           AssertionError: assert [b'\x00\x01', b'\x02\x03'] == b'\x00\x01\\\x02\x03'
E             
E             At index 0 diff: b'\x00\x01' != 0
E             Right contains 3 more items, first extra item: 92
E             Use -v to get more diff

pydicom/tests/test_valuerep.py:1560: AssertionError
________ test_assigning_bytes[OL-bytes-vm019-vmN19-TrackPointIndexList] ________

vr = 'OL', pytype = <class 'bytes'>, vm0 = (None, b''), vmN = (b'\x00\x01',)
keyword = 'TrackPointIndexList'

    @pytest.mark.parametrize("vr, pytype, vm0, vmN, keyword", VALUE_REFERENCE)
    def test_assigning_bytes(vr, pytype, vm0, vmN, keyword):
        """Test that byte VRs are excluded from the backslash check."""
        if pytype == bytes:
            ds = Dataset()
            value = b"\x00\x01" + b"\\" + b"\x02\x03"
            setattr(ds, keyword, value)
            elem = ds[keyword]
            assert elem.VR == vr
>           assert elem.value == value
E           AssertionError: assert [b'\x00\x01', b'\x02\x03'] == b'\x00\x01\\\x02\x03'
E             
E             At index 0 diff: b'\x00\x01' != 0
E             Right contains 3 more items, first extra item: 92
E             Use -v to get more diff

pydicom/tests/test_valuerep.py:1560: AssertionError
__________ test_assigning_bytes[OV-bytes-vm020-vmN20-SelectorOVValue] __________

vr = 'OV', pytype = <class 'bytes'>, vm0 = (None, b''), vmN = (b'\x00\x01',)
keyword = 'SelectorOVValue'

    @pytest.mark.parametrize("vr, pytype, vm0, vmN, keyword", VALUE_REFERENCE)
    def test_assigning_bytes(vr, pytype, vm0, vmN, keyword):
        """Test that byte VRs are excluded from the backslash check."""
        if pytype == bytes:
            ds = Dataset()
            value = b"\x00\x01" + b"\\" + b"\x02\x03"
            setattr(ds, keyword, value)
            elem = ds[keyword]
            assert elem.VR == vr
>           assert elem.value == value
E           AssertionError: assert [b'\x00\x01', b'\x02\x03'] == b'\x00\x01\\\x02\x03'
E             
E             At index 0 diff: b'\x00\x01' != 0
E             Right contains 3 more items, first extra item: 92
E             Use -v to get more diff

pydicom/tests/test_valuerep.py:1560: AssertionError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED pydicom/tests/test_valuerep.py::TestTM::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestTM::test_pickling_tm_from_time
PASSED pydicom/tests/test_valuerep.py::TestTM::test_str_and_repr
PASSED pydicom/tests/test_valuerep.py::TestTM::test_new_empty_str
PASSED pydicom/tests/test_valuerep.py::TestTM::test_new_str_conversion
PASSED pydicom/tests/test_valuerep.py::TestTM::test_new_obj_conversion
PASSED pydicom/tests/test_valuerep.py::TestTM::test_comparison
PASSED pydicom/tests/test_valuerep.py::TestTM::test_time_behavior
PASSED pydicom/tests/test_valuerep.py::TestDT::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestDT::test_pickling_with_timezone
PASSED pydicom/tests/test_valuerep.py::TestDT::test_pickling_dt_from_datetime
PASSED pydicom/tests/test_valuerep.py::TestDT::test_pickling_dt_from_datetime_with_timezone
PASSED pydicom/tests/test_valuerep.py::TestDT::test_new_empty_str
PASSED pydicom/tests/test_valuerep.py::TestDT::test_new_obj_conversion
PASSED pydicom/tests/test_valuerep.py::TestDT::test_new_str_conversion
PASSED pydicom/tests/test_valuerep.py::TestDT::test_str_and_repr
PASSED pydicom/tests/test_valuerep.py::TestDT::test_comparison
PASSED pydicom/tests/test_valuerep.py::TestDT::test_datetime_behavior
PASSED pydicom/tests/test_valuerep.py::TestDA::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestDA::test_new_obj_conversion
PASSED pydicom/tests/test_valuerep.py::TestDA::test_str_and_repr
PASSED pydicom/tests/test_valuerep.py::TestDA::test_comparison
PASSED pydicom/tests/test_valuerep.py::TestDA::test_date_behavior
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[1]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[3.14159265358979]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[-1234.456e78]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[1.234E-5]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[1.234E+5]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[+1]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[    42]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_valid[42    ]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[nan]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[-inf]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[3.141592653589793]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[1,000]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[1 000]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[127.0.0.1]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[1.e]
PASSED pydicom/tests/test_valuerep.py::TestIsValidDS::test_invalid[]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[1.0-1.0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[0.0-0.0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[-0.0--0.0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[0.123-0.123]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[-0.321--0.321]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[1e-05-1e-05]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[3.141592653589793-3.14159265358979]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[-3.141592653589793--3.1415926535898]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[5.385940192876374e-07-5.3859401929e-07]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[-5.385940192876374e-07--5.385940193e-07]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[12342534378.125532-12342534378.1255]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[64070869985876.78-64070869985876.8]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_auto_format[1.7976931348623157e+308-1.797693135e+308]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-101]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-100]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[100]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[101]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-16]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-15]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-14]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-13]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-12]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-11]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-10]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-9]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-8]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-7]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-6]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-5]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-4]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-3]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-2]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[-1]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[1]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[2]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[3]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[4]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[5]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[6]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[7]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[8]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[9]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[10]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[11]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[12]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[13]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[14]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[15]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_pi[16]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-101]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-100]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[100]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[101]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-16]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-15]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-14]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-13]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-12]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-11]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-10]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-9]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-8]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-7]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-6]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-5]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-4]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-3]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-2]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[-1]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[1]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[2]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[3]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[4]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[5]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[6]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[7]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[8]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[9]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[10]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[11]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[12]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[13]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[14]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[15]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_powers_of_negative_pi[16]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_invalid[nan0]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_invalid[nan1]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_invalid[-inf]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_invalid[inf]
PASSED pydicom/tests/test_valuerep.py::TestTruncateFloatForDS::test_wrong_type
PASSED pydicom/tests/test_valuerep.py::TestDS::test_empty_value
PASSED pydicom/tests/test_valuerep.py::TestDS::test_float_values
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_new_empty
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_str_value
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_str
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_repr
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_DSfloat
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_DSdecimal
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format[True]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format[False]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format_from_invalid_DS
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format_invalid_string[True]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format_invalid_string[False]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format_valid_string[True]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_auto_format_valid_string[False]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_length
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_DSfloat_auto_format
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[nan0]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[-nan]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[inf0]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[-inf0]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[nan1]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[nan2]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[-inf1]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_enforce_valid_values_value[inf1]
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_comparison_operators
PASSED pydicom/tests/test_valuerep.py::TestDSfloat::test_hash
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_float_value
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_new_empty
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_str_value
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_DSfloat
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_DSdecimal
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_repr
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format[True]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format[False]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format_from_invalid_DS
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format_invalid_string[True]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format_invalid_string[False]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[NaN]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[-NaN]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[Infinity]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[-Infinity]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[val4]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[val5]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[val6]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_enforce_valid_values_value[val7]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format_valid_string[True]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_auto_format_valid_string[False]
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_DSdecimal_auto_format
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_comparison_operators
PASSED pydicom/tests/test_valuerep.py::TestDSdecimal::test_hash
PASSED pydicom/tests/test_valuerep.py::TestIS::test_empty_value
PASSED pydicom/tests/test_valuerep.py::TestIS::test_str_value
PASSED pydicom/tests/test_valuerep.py::TestIS::test_valid_value
PASSED pydicom/tests/test_valuerep.py::TestIS::test_invalid_value
PASSED pydicom/tests/test_valuerep.py::TestIS::test_pickling
PASSED pydicom/tests/test_valuerep.py::TestIS::test_longint
PASSED pydicom/tests/test_valuerep.py::TestIS::test_overflow
PASSED pydicom/tests/test_valuerep.py::TestIS::test_str
PASSED pydicom/tests/test_valuerep.py::TestIS::test_repr
PASSED pydicom/tests/test_valuerep.py::TestIS::test_comparison_operators
PASSED pydicom/tests/test_valuerep.py::TestIS::test_hash
PASSED pydicom/tests/test_valuerep.py::TestDecimalString::test_DS_decimal_set
PASSED pydicom/tests/test_valuerep.py::TestDecimalString::test_valid_decimal_strings
PASSED pydicom/tests/test_valuerep.py::TestDecimalString::test_invalid_decimal_strings
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_last_first
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_copy
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_three_component
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_formatting
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_unicode_kr
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_unicode_jp_from_bytes
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_unicode_jp_from_bytes_comp_delimiter
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_unicode_jp_from_bytes_caret_delimiter
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_unicode_jp_from_unicode
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_not_equal
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_encoding_carried
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_hash
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_next
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_iterator
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_contains
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_length
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_kr_from_bytes
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_kr_from_unicode
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_jp_from_bytes
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_jp_from_unicode
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_veterinary
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_with_separator
PASSED pydicom/tests/test_valuerep.py::TestPersonName::test_from_named_components_with_separator_from_bytes
PASSED pydicom/tests/test_valuerep.py::TestDateTime::test_date
PASSED pydicom/tests/test_valuerep.py::TestDateTime::test_date_time
PASSED pydicom/tests/test_valuerep.py::TestDateTime::test_time
PASSED pydicom/tests/test_valuerep.py::test_person_name_unicode_warns
PASSED pydicom/tests/test_valuerep.py::test_set_value[AE-str-vm00-vmN0-Receiver]
PASSED pydicom/tests/test_valuerep.py::test_set_value[AS-str-vm01-vmN1-PatientAge]
PASSED pydicom/tests/test_valuerep.py::test_set_value[AT-int-vm02-vmN2-OffendingElement]
PASSED pydicom/tests/test_valuerep.py::test_set_value[CS-str-vm03-vmN3-QualityControlSubject]
PASSED pydicom/tests/test_valuerep.py::test_set_value[DA-str-vm04-vmN4-PatientBirthDate]
PASSED pydicom/tests/test_valuerep.py::test_set_value[DS-str-vm05-vmN5-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_set_value[DS-int-vm06-vmN6-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_set_value[DS-float-vm07-vmN7-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_set_value[DT-str-vm08-vmN8-AcquisitionDateTime]
PASSED pydicom/tests/test_valuerep.py::test_set_value[FD-float-vm09-vmN9-RealWorldValueLUTData]
PASSED pydicom/tests/test_valuerep.py::test_set_value[FL-float-vm010-vmN10-VectorAccuracy]
PASSED pydicom/tests/test_valuerep.py::test_set_value[IS-str-vm011-vmN11-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_set_value[IS-int-vm012-vmN12-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_set_value[IS-float-vm013-vmN13-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_set_value[LO-str-vm014-vmN14-DataSetSubtype]
PASSED pydicom/tests/test_valuerep.py::test_set_value[LT-str-vm015-vmN15-ExtendedCodeMeaning]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OB-bytes-vm016-vmN16-FillPattern]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OD-bytes-vm017-vmN17-DoubleFloatPixelData]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OF-bytes-vm018-vmN18-UValueData]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OL-bytes-vm019-vmN19-TrackPointIndexList]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OV-bytes-vm020-vmN20-SelectorOVValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[OW-bytes-vm021-vmN21-TrianglePointIndexList]
PASSED pydicom/tests/test_valuerep.py::test_set_value[PN-str-vm022-vmN22-PatientName]
PASSED pydicom/tests/test_valuerep.py::test_set_value[SH-str-vm023-vmN23-CodeValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[SL-int-vm024-vmN24-RationalNumeratorValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[SQ-list-vm025-vmN25-BeamSequence]
PASSED pydicom/tests/test_valuerep.py::test_set_value[SS-int-vm026-vmN26-SelectorSSValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[ST-str-vm027-vmN27-InstitutionAddress]
PASSED pydicom/tests/test_valuerep.py::test_set_value[SV-int-vm028-vmN28-SelectorSVValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[TM-str-vm029-vmN29-StudyTime]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UC-str-vm030-vmN30-LongCodeValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UI-str-vm031-vmN31-SOPClassUID]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UL-int-vm032-vmN32-SimpleFrameList]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UN-bytes-vm033-vmN33-SelectorUNValue]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UR-str-vm034-vmN34-CodingSchemeURL]
PASSED pydicom/tests/test_valuerep.py::test_set_value[US-int-vm035-vmN35-SourceAcquisitionBeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UT-str-vm036-vmN36-StrainAdditionalInformation]
PASSED pydicom/tests/test_valuerep.py::test_set_value[UV-int-vm037-vmN37-SelectorUVValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[AE-str-vm00-vmN0-Receiver]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[AS-str-vm01-vmN1-PatientAge]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[AT-int-vm02-vmN2-OffendingElement]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[CS-str-vm03-vmN3-QualityControlSubject]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[DA-str-vm04-vmN4-PatientBirthDate]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[DS-str-vm05-vmN5-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[DS-int-vm06-vmN6-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[DS-float-vm07-vmN7-PatientWeight]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[DT-str-vm08-vmN8-AcquisitionDateTime]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[FD-float-vm09-vmN9-RealWorldValueLUTData]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[FL-float-vm010-vmN10-VectorAccuracy]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[IS-str-vm011-vmN11-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[IS-int-vm012-vmN12-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[IS-float-vm013-vmN13-BeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[LO-str-vm014-vmN14-DataSetSubtype]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[LT-str-vm015-vmN15-ExtendedCodeMeaning]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[OB-bytes-vm016-vmN16-FillPattern]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[OF-bytes-vm018-vmN18-UValueData]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[OW-bytes-vm021-vmN21-TrianglePointIndexList]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[PN-str-vm022-vmN22-PatientName]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[SH-str-vm023-vmN23-CodeValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[SL-int-vm024-vmN24-RationalNumeratorValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[SQ-list-vm025-vmN25-BeamSequence]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[SS-int-vm026-vmN26-SelectorSSValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[ST-str-vm027-vmN27-InstitutionAddress]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[SV-int-vm028-vmN28-SelectorSVValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[TM-str-vm029-vmN29-StudyTime]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UC-str-vm030-vmN30-LongCodeValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UI-str-vm031-vmN31-SOPClassUID]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UL-int-vm032-vmN32-SimpleFrameList]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UN-bytes-vm033-vmN33-SelectorUNValue]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UR-str-vm034-vmN34-CodingSchemeURL]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[US-int-vm035-vmN35-SourceAcquisitionBeamNumber]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UT-str-vm036-vmN36-StrainAdditionalInformation]
PASSED pydicom/tests/test_valuerep.py::test_assigning_bytes[UV-int-vm037-vmN37-SelectorUVValue]
FAILED pydicom/tests/test_valuerep.py::TestBadValueRead::test_read_bad_value_in_VR_default
FAILED pydicom/tests/test_valuerep.py::TestBadValueRead::test_read_bad_value_in_VR_enforce_valid_value
FAILED pydicom/tests/test_valuerep.py::test_assigning_bytes[OD-bytes-vm017-vmN17-DoubleFloatPixelData]
FAILED pydicom/tests/test_valuerep.py::test_assigning_bytes[OL-bytes-vm019-vmN19-TrackPointIndexList]
FAILED pydicom/tests/test_valuerep.py::test_assigning_bytes[OV-bytes-vm020-vmN20-SelectorOVValue]
======================== 5 failed, 299 passed in 0.65s =========================
+ git checkout f909c76e31f759246cec3708dadd173c5d6e84b1 pydicom/tests/test_valuerep.py
Updated 1 path from 7afea20cd
