
diff --git a/src/sqlfluff/rules/L031.py b/src/sqlfluff/rules/L031.py
index 838c6ce5..53bfe418 100644
--- a/src/sqlfluff/rules/L031.py
+++ b/src/sqlfluff/rules/L031.py
@@ -49,6 +49,69 @@ class Rule_L031(BaseRule):
     def _eval(self, segment, **kwargs):
         """Identify aliases in from clause and join conditions.
 
+        Find base table, table expressions in join, and other expressions in select clause
+        and decide if it's needed to report them.
+        """
+        if segment.is_type("select_statement"):
+            # A buffer for all table expressions in join conditions
+            from_expression_elements = []
+            column_reference_segments = []
+
+            from_clause_segment = segment.get_child("from_clause")
+
+            if not from_clause_segment:
+                return None
+
+            from_expression = from_clause_segment.get_child("from_expression")
+            from_expression_element = None
+            if from_expression:
+                from_expression_element = from_expression.get_child(
+                    "from_expression_element"
+                )
+
+            if not from_expression_element:
+                return None
+            from_expression_element = from_expression_element.get_child(
+                "table_expression"
+            )
+
+            # Find base table
+            base_table = None
+            if from_expression_element:
+                base_table = from_expression_element.get_child("object_reference")
+
+            from_clause_index = segment.segments.index(from_clause_segment)
+            from_clause_and_after = segment.segments[from_clause_index:]
+
+            # Check for join conditions
+            join_conditions = [
+                clause
+                for clause in from_clause_and_after
+                if clause.is_type("join_clause")
+            ]
+
+            if not join_conditions:
+                return None
+
+            for clause in from_clause_and_after:
+                for from_expression_element in clause.recursive_crawl(
+                    "from_expression_element"
+                ):
+                    from_expression_elements.append(from_expression_element)
+                for column_reference in clause.recursive_crawl("column_reference"):
+                    column_reference_segments.append(column_reference)
+
+            return (
+                self._lint_aliases_in_join(
+                    base_table,
+                    from_expression_elements,
+                    column_reference_segments,
+                    segment,
+                )
+            )
+        return None
+        """Identify aliases in from clause and join conditions.
+
         Find base table, table expressions in join, and other expressions in select clause
         and decide if it's needed to report them.
         """
