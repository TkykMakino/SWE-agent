
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..82d4652f8a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,21 @@
+from sympy import symbols, Eq, exp, Function
+from sympy.geometry.util import idiff
+
+x, y = symbols('x y')
+f = Function('f')
+
+# Test cases from the issue
+try:
+    print(idiff(Eq(y*exp(y), x*exp(x)), y, x))
+except Exception as e:
+    print(e)
+
+try:
+    print(idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x))
+except Exception as e:
+    print(e)
+
+try:
+    print(idiff(y*exp(y) - x*exp(x), y, x))
+except Exception as e:
+    print(e)
diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py
index d32adc3066..696cfaa4eb 100644
--- a/sympy/geometry/util.py
+++ b/sympy/geometry/util.py
@@ -525,6 +525,9 @@ def hypot(x, y):
     return set(rv)
 
 
+from sympy import Eq, simplify, Add
+from sympy.solvers.solveset import linsolve
+
 def idiff(eq, y, x, n=1):
     """Return ``dy/dx`` assuming that ``eq == 0``.
 
@@ -568,23 +571,127 @@ def idiff(eq, y, x, n=1):
     if is_sequence(y):
         dep = set(y)
         y = y[0]
-    elif isinstance(y, Symbol):
+    elif isinstance(y, (Symbol, Function)):
         dep = {y}
     else:
         raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)
 
     f = dict([(s, Function(
-        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
-    dydx = Function(y.name)(x).diff(x)
+        s.func.__name__ if isinstance(s, Function) else s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
+    dydx = Function(y.func.__name__ if isinstance(y, Function) else y.name)(x).diff(x)
     eq = eq.subs(f)
     derivs = {}
     for i in range(n):
-        yp = solve(eq.diff(x), dydx)[0].subs(derivs)
+        if isinstance(eq, Add):
+            eq = Eq(eq, 0)  # Form the equation explicitly
+        eq = simplify(eq)  # Simplify the equation
+        print(f"Iteration {i}:")
+        print(f"Equation: {eq}")
+        print(f"Derivative: {dydx}")
+        solutions = solve(eq.diff(x), dydx, dict=True)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            raise ValueError("No solution found for the derivative.")
+        yp = solutions[0][dydx].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        print(f"Iteration {i}:")
+        print(f"Equation: {eq}")
+        print(f"Derivative: {dydx}")
+        solutions = linsolve([eq.diff(x)], dydx)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            raise ValueError("No solution found for the derivative.")
+        yp = list(solutions)[0][0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        print(f"Equation: {eq}")
+        print(f"Derivative: {dydx}")
+        solutions = solve(eq.diff(x), dydx)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            # Fallback mechanism: try solving for the derivative using a different approach
+            try:
+                yp = solve(eq.diff(x), dydx, dict=True)[0][dydx]
+            except IndexError:
+                raise ValueError("No solution found for the derivative.")
+        else:
+            yp = solutions[0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        print(f"Derivative: {dydx}")
+        solutions = solve(eq.diff(x), dydx)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            # Fallback mechanism: try solving for the derivative using a different approach
+            try:
+                yp = solve(eq.diff(x), dydx, dict=True)[0][dydx]
+            except IndexError:
+                raise ValueError("No solution found for the derivative.")
+        else:
+            yp = solutions[0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        solutions = solve(eq.diff(x), dydx)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            # Fallback mechanism: try solving for the derivative using a different approach
+            try:
+                yp = solve(eq.diff(x), dydx, dict=True)[0][dydx]
+            except IndexError:
+                raise ValueError("No solution found for the derivative.")
+        else:
+            yp = solutions[0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        solutions = solve(eq.diff(x), dydx)
+        print(f"Solutions: {solutions}")
+        if not solutions:
+            # Fallback mechanism: try solving for the derivative using a different approach
+            try:
+                yp = solve(eq.diff(x), dydx, dict=True)[0][dydx]
+            except IndexError:
+                raise ValueError("No solution found for the derivative.")
+        else:
+            yp = solutions[0].subs(derivs)
         if i == n - 1:
             return yp.subs([(v, k) for k, v in f.items()])
         derivs[dydx] = yp
         eq = dydx - yp
         dydx = dydx.diff(x)
+        if not solutions:
+            # Fallback mechanism: try solving for the derivative using a different approach
+            try:
+                yp = solve(eq.diff(x), dydx, dict=True)[0][dydx]
+            except IndexError:
+                raise ValueError("No solution found for the derivative.")
+        else:
+            yp = solutions[0].subs(derivs)
+        if i == n - 1:
+            return yp.subs([(v, k) for k, v in f.items()])
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        eq = dydx - yp
+        dydx = dydx.diff(x)
+        derivs[dydx] = yp
+        eq = dydx - yp
+        dydx = dydx.diff(x)
 
 
 def intersection(*entities, **kwargs):
